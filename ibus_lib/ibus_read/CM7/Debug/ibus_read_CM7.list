
ibus_read_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800db70  0800db70  0001db70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc64  0800dc64  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc64  0800dc64  0001dc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc6c  0800dc6c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc6c  0800dc6c  0001dc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc70  0800dc70  0001dc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  24000000  0800dc74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  24000164  0800ddd8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001ed0  0800ddd8  00021ed0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d585  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e39  00000000  00000000  0003d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00041550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  000428b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042c39  00000000  00000000  00043a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdde  00000000  00000000  000866c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c114  00000000  00000000  000a349f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023f5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005388  00000000  00000000  0023f604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800db58 	.word	0x0800db58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	0800db58 	.word	0x0800db58

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b0a4      	sub	sp, #144	; 0x90
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char buffer11[] = "***  All RX channels value  :  ***\r\n";
 80007b6:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <main+0x174>)
 80007b8:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80007bc:	461d      	mov	r5, r3
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ca:	6020      	str	r0, [r4, #0]
 80007cc:	3404      	adds	r4, #4
 80007ce:	7021      	strb	r1, [r4, #0]
char buffer10[] = "      ";
 80007d0:	4a55      	ldr	r2, [pc, #340]	; (8000928 <main+0x178>)
 80007d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	8019      	strh	r1, [r3, #0]
 80007e0:	3302      	adds	r3, #2
 80007e2:	0c0a      	lsrs	r2, r1, #16
 80007e4:	701a      	strb	r2, [r3, #0]
char uart_buf[50];
int32_t uart_buf_len;
uint16_t ibus_data1[14] = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
 80007f6:	619a      	str	r2, [r3, #24]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000800:	bf00      	nop
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <main+0x17c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <main+0x6c>
 800080e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf2      	bgt.n	8000802 <main+0x52>
  if ( timeout < 0 )
 800081c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000820:	2b00      	cmp	r3, #0
 8000822:	da01      	bge.n	8000828 <main+0x78>
  {
  Error_Handler();
 8000824:	f000 f98e 	bl	8000b44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fae6 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f884 	bl	8000938 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000830:	4b3e      	ldr	r3, [pc, #248]	; (800092c <main+0x17c>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a3d      	ldr	r2, [pc, #244]	; (800092c <main+0x17c>)
 8000838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b3a      	ldr	r3, [pc, #232]	; (800092c <main+0x17c>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800084e:	2000      	movs	r0, #0
 8000850:	f002 ff2c 	bl	80036ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f002 ff42 	bl	80036e0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <main+0x17c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d106      	bne.n	8000880 <main+0xd0>
 8000872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf2      	bgt.n	8000866 <main+0xb6>
if ( timeout < 0 )
 8000880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000884:	2b00      	cmp	r3, #0
 8000886:	da01      	bge.n	800088c <main+0xdc>
{
Error_Handler();
 8000888:	f000 f95c 	bl	8000b44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f930 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f000 f90e 	bl	8000ab0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000894:	f00b fef2 	bl	800c67c <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 8000898:	f000 f8be 	bl	8000a18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ibus_init_communication(&huart6);  // call the HAL_UART_Receive_DMA() function
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <main+0x180>)
 800089e:	f00c fc2d 	bl	800d0fc <ibus_init_communication>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
 	CDC_Transmit_FS((uint8_t*)buffer11,sizeof(buffer11));
 80008a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008a6:	2125      	movs	r1, #37	; 0x25
 80008a8:	4618      	mov	r0, r3
 80008aa:	f00b ffa7 	bl	800c7fc <CDC_Transmit_FS>
 	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fb34 	bl	8000f1c <HAL_Delay>
 	 if(read_ibus_frame(ibus_data1))  // print values once frame from RX is received
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00c fc30 	bl	800d11c <read_ibus_frame>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0ef      	beq.n	80008a2 <main+0xf2>
 	 	 {
 	 		 	 for(int ch_index = 0;ch_index < 14; ch_index++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008c8:	e027      	b.n	800091a <main+0x16a>
 	 		 	 	 	{
 	 		 		       // printing all 14 channels value via USB to monitor
 	 		 	 	 	   uart_buf_len = sprintf(uart_buf,"%02d",(unsigned int)ibus_data1[ch_index]);
 80008ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	3390      	adds	r3, #144	; 0x90
 80008d2:	443b      	add	r3, r7
 80008d4:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80008d8:	461a      	mov	r2, r3
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4915      	ldr	r1, [pc, #84]	; (8000934 <main+0x184>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f00c fccb 	bl	800d27c <siprintf>
 80008e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 	 		 	 	 	   CDC_Transmit_FS((uint8_t*)uart_buf,uart_buf_len);
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00b ff82 	bl	800c7fc <CDC_Transmit_FS>
 	 		 	 	 	   HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fb0f 	bl	8000f1c <HAL_Delay>
 	 		 	 	 	   CDC_Transmit_FS((uint8_t*)buffer10,sizeof(buffer10));
 80008fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000902:	2107      	movs	r1, #7
 8000904:	4618      	mov	r0, r3
 8000906:	f00b ff79 	bl	800c7fc <CDC_Transmit_FS>
 	 		 	 	 	   HAL_Delay(10);  // make some delay to read data from monitor
 800090a:	200a      	movs	r0, #10
 800090c:	f000 fb06 	bl	8000f1c <HAL_Delay>
 	 		 	 for(int ch_index = 0;ch_index < 14; ch_index++)
 8000910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000914:	3301      	adds	r3, #1
 8000916:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800091a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800091e:	2b0d      	cmp	r3, #13
 8000920:	ddd3      	ble.n	80008ca <main+0x11a>
   {
 8000922:	e7be      	b.n	80008a2 <main+0xf2>
 8000924:	0800db78 	.word	0x0800db78
 8000928:	0800dba0 	.word	0x0800dba0
 800092c:	58024400 	.word	0x58024400
 8000930:	24000180 	.word	0x24000180
 8000934:	0800db70 	.word	0x0800db70

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00c fc90 	bl	800d26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00c fc8a 	bl	800d26c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000958:	2004      	movs	r0, #4
 800095a:	f004 f98f 	bl	8004c7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <SystemClock_Config+0xd8>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <SystemClock_Config+0xd8>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xd8>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xdc>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000980:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <SystemClock_Config+0xdc>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xdc>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000994:	bf00      	nop
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xdc>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a2:	d1f8      	bne.n	8000996 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 80009a4:	2332      	movs	r3, #50	; 0x32
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80009b8:	2320      	movs	r3, #32
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 f9c3 	bl	8004d50 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009d0:	f000 f8b8 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	233f      	movs	r3, #63	; 0x3f
 80009d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2101      	movs	r1, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 fe03 	bl	8005604 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a04:	f000 f89e 	bl	8000b44 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3770      	adds	r7, #112	; 0x70
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58000400 	.word	0x58000400
 8000a14:	58024800 	.word	0x58024800

08000a18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART6_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a62:	f006 ffc7 	bl	80079f4 <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f86a 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a74:	f008 fa1a 	bl	8008eac <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 f861 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a86:	f008 fa4f 	bl	8008f28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f858 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART6_UART_Init+0x90>)
 8000a96:	f008 f9d0 	bl	8008e3a <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f850 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000180 	.word	0x24000180
 8000aac:	40011400 	.word	0x40011400

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_DMA_Init+0x3c>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <MX_DMA_Init+0x3c>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_DMA_Init+0x3c>)
 8000ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f000 fb2a 	bl	8001132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f000 fb41 	bl	8001166 <HAL_NVIC_EnableIRQ>

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58024400 	.word	0x58024400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_GPIO_Init+0x50>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	58024400 	.word	0x58024400

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x30>)
 8000b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x30>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x30>)
 8000b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0bc      	sub	sp, #240	; 0xf0
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	22c8      	movs	r2, #200	; 0xc8
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00c fb61 	bl	800d26c <memset>
  if(huart->Instance==USART6)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <HAL_UART_MspInit+0x124>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d174      	bne.n	8000c9e <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000bb4:	f04f 0201 	mov.w	r2, #1
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_CSI;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 f8a6 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bd6:	f7ff ffb5 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000be0:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0x12c>)
 8000c3c:	f002 fb86 	bl	800334c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA1_Stream0;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_UART_MspInit+0x134>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c48:	2247      	movs	r2, #71	; 0x47
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c82:	f000 fa8b 	bl	800119c <HAL_DMA_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000c8c:	f7ff ff5a 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_UART_MspInit+0x130>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	37f0      	adds	r7, #240	; 0xf0
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40011400 	.word	0x40011400
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	24000214 	.word	0x24000214
 8000cb8:	40020010 	.word	0x40020010

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8e8 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA1_Stream0_IRQHandler+0x10>)
 8000d16:	f001 f807 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000214 	.word	0x24000214

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f002 fe46 	bl	80039ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24001774 	.word	0x24001774

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f00c fa56 	bl	800d218 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24080000 	.word	0x24080000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	2400028c 	.word	0x2400028c
 8000da0:	24001ed0 	.word	0x24001ed0

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f7ff fc6c 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f00c fa27 	bl	800d224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fceb 	bl	80007b0 <main>
  bx  lr
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000de0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de4:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8000de8:	0800dc74 	.word	0x0800dc74
  ldr r2, =_sbss
 8000dec:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8000df0:	24001ed0 	.word	0x24001ed0

08000df4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC3_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f98c 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e04:	f004 fdb4 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_Init+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4913      	ldr	r1, [pc, #76]	; (8000e64 <HAL_Init+0x6c>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_Init+0x6c>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_Init+0x70>)
 8000e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f000 f814 	bl	8000e70 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e002      	b.n	8000e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe7d 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	0800dbf0 	.word	0x0800dbf0
 8000e68:	24000004 	.word	0x24000004
 8000e6c:	24000000 	.word	0x24000000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e021      	b.n	8000ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_InitTick+0x64>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f971 	bl	8001182 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f93b 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x68>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2400000c 	.word	0x2400000c
 8000ed4:	24000000 	.word	0x24000000
 8000ed8:	24000008 	.word	0x24000008

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2400000c 	.word	0x2400000c
 8000f00:	24000290 	.word	0x24000290

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	24000290 	.word	0x24000290

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2400000c 	.word	0x2400000c

08000f64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetREVID+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0c1b      	lsrs	r3, r3, #16
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	5c001000 	.word	0x5c001000

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <__NVIC_SetPriorityGrouping+0x40>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x40>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	05fa0000 	.word	0x05fa0000

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff29 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff40 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff90 	bl	8001070 <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5f 	bl	800101c <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff33 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa4 	bl	80010d8 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff feae 	bl	8000f04 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e316      	b.n	80017e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a66      	ldr	r2, [pc, #408]	; (8001354 <HAL_DMA_Init+0x1b8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d04a      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a65      	ldr	r2, [pc, #404]	; (8001358 <HAL_DMA_Init+0x1bc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d045      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a63      	ldr	r2, [pc, #396]	; (800135c <HAL_DMA_Init+0x1c0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d040      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a62      	ldr	r2, [pc, #392]	; (8001360 <HAL_DMA_Init+0x1c4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d03b      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a60      	ldr	r2, [pc, #384]	; (8001364 <HAL_DMA_Init+0x1c8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d036      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5f      	ldr	r2, [pc, #380]	; (8001368 <HAL_DMA_Init+0x1cc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d031      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a5d      	ldr	r2, [pc, #372]	; (800136c <HAL_DMA_Init+0x1d0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d02c      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a5c      	ldr	r2, [pc, #368]	; (8001370 <HAL_DMA_Init+0x1d4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d027      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_DMA_Init+0x1d8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d022      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a59      	ldr	r2, [pc, #356]	; (8001378 <HAL_DMA_Init+0x1dc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d01d      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_DMA_Init+0x1e0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d018      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a56      	ldr	r2, [pc, #344]	; (8001380 <HAL_DMA_Init+0x1e4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d013      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a54      	ldr	r2, [pc, #336]	; (8001384 <HAL_DMA_Init+0x1e8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00e      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a53      	ldr	r2, [pc, #332]	; (8001388 <HAL_DMA_Init+0x1ec>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d009      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_DMA_Init+0x1f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d004      	beq.n	8001254 <HAL_DMA_Init+0xb8>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_DMA_Init+0x1f4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_DMA_Init+0xbc>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_DMA_Init+0xbe>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 813b 	beq.w	80014d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a37      	ldr	r2, [pc, #220]	; (8001354 <HAL_DMA_Init+0x1b8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d04a      	beq.n	8001310 <HAL_DMA_Init+0x174>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a36      	ldr	r2, [pc, #216]	; (8001358 <HAL_DMA_Init+0x1bc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d045      	beq.n	8001310 <HAL_DMA_Init+0x174>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a34      	ldr	r2, [pc, #208]	; (800135c <HAL_DMA_Init+0x1c0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d040      	beq.n	8001310 <HAL_DMA_Init+0x174>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_DMA_Init+0x1c4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d03b      	beq.n	8001310 <HAL_DMA_Init+0x174>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_DMA_Init+0x1c8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d036      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_DMA_Init+0x1cc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d031      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2e      	ldr	r2, [pc, #184]	; (800136c <HAL_DMA_Init+0x1d0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02c      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_DMA_Init+0x1d4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d027      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <HAL_DMA_Init+0x1d8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d022      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <HAL_DMA_Init+0x1dc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d01d      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <HAL_DMA_Init+0x1e0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d018      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_DMA_Init+0x1e4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_DMA_Init+0x1e8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00e      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_DMA_Init+0x1ec>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d009      	beq.n	8001310 <HAL_DMA_Init+0x174>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_DMA_Init+0x1f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Init+0x174>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_DMA_Init+0x1f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d108      	bne.n	8001322 <HAL_DMA_Init+0x186>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e007      	b.n	8001332 <HAL_DMA_Init+0x196>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001332:	e02f      	b.n	8001394 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001334:	f7ff fde6 	bl	8000f04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b05      	cmp	r3, #5
 8001340:	d928      	bls.n	8001394 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e246      	b.n	80017e2 <HAL_DMA_Init+0x646>
 8001354:	40020010 	.word	0x40020010
 8001358:	40020028 	.word	0x40020028
 800135c:	40020040 	.word	0x40020040
 8001360:	40020058 	.word	0x40020058
 8001364:	40020070 	.word	0x40020070
 8001368:	40020088 	.word	0x40020088
 800136c:	400200a0 	.word	0x400200a0
 8001370:	400200b8 	.word	0x400200b8
 8001374:	40020410 	.word	0x40020410
 8001378:	40020428 	.word	0x40020428
 800137c:	40020440 	.word	0x40020440
 8001380:	40020458 	.word	0x40020458
 8001384:	40020470 	.word	0x40020470
 8001388:	40020488 	.word	0x40020488
 800138c:	400204a0 	.word	0x400204a0
 8001390:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1c8      	bne.n	8001334 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4b83      	ldr	r3, [pc, #524]	; (80015bc <HAL_DMA_Init+0x420>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80013ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d107      	bne.n	80013f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4313      	orrs	r3, r2
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80013f8:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <HAL_DMA_Init+0x424>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <HAL_DMA_Init+0x428>)
 80013fe:	4013      	ands	r3, r2
 8001400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001404:	d328      	bcc.n	8001458 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b28      	cmp	r3, #40	; 0x28
 800140c:	d903      	bls.n	8001416 <HAL_DMA_Init+0x27a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b2e      	cmp	r3, #46	; 0x2e
 8001414:	d917      	bls.n	8001446 <HAL_DMA_Init+0x2aa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b3e      	cmp	r3, #62	; 0x3e
 800141c:	d903      	bls.n	8001426 <HAL_DMA_Init+0x28a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b42      	cmp	r3, #66	; 0x42
 8001424:	d90f      	bls.n	8001446 <HAL_DMA_Init+0x2aa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b46      	cmp	r3, #70	; 0x46
 800142c:	d903      	bls.n	8001436 <HAL_DMA_Init+0x29a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b48      	cmp	r3, #72	; 0x48
 8001434:	d907      	bls.n	8001446 <HAL_DMA_Init+0x2aa>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b4e      	cmp	r3, #78	; 0x4e
 800143c:	d905      	bls.n	800144a <HAL_DMA_Init+0x2ae>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b52      	cmp	r3, #82	; 0x52
 8001444:	d801      	bhi.n	800144a <HAL_DMA_Init+0x2ae>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_DMA_Init+0x2b0>
 800144a:	2300      	movs	r3, #0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001456:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f023 0307 	bic.w	r3, r3, #7
 800146e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	2b04      	cmp	r3, #4
 8001480:	d117      	bne.n	80014b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f001 fdcf 	bl	8003038 <DMA_CheckFifoParam>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e197      	b.n	80017e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 fd0a 	bl	8002ed4 <DMA_CalcBaseAndBitshift>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	223f      	movs	r2, #63	; 0x3f
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	e0cd      	b.n	8001672 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a3b      	ldr	r2, [pc, #236]	; (80015c8 <HAL_DMA_Init+0x42c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <HAL_DMA_Init+0x430>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01d      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <HAL_DMA_Init+0x434>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d018      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a36      	ldr	r2, [pc, #216]	; (80015d4 <HAL_DMA_Init+0x438>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <HAL_DMA_Init+0x43c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00e      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_DMA_Init+0x440>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_DMA_Init+0x444>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d004      	beq.n	8001526 <HAL_DMA_Init+0x38a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <HAL_DMA_Init+0x448>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_DMA_Init+0x38e>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_DMA_Init+0x390>
 800152a:	2300      	movs	r3, #0
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8097 	beq.w	8001660 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_DMA_Init+0x42c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d021      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_DMA_Init+0x430>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01c      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_DMA_Init+0x434>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d017      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_DMA_Init+0x438>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_DMA_Init+0x43c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_DMA_Init+0x440>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d008      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_DMA_Init+0x444>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_DMA_Init+0x3e4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_DMA_Init+0x448>)
 800157e:	4293      	cmp	r3, r2
 8001580:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_DMA_Init+0x44c>)
 800159e:	4013      	ands	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	d020      	beq.n	80015ec <HAL_DMA_Init+0x450>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b80      	cmp	r3, #128	; 0x80
 80015b0:	d102      	bne.n	80015b8 <HAL_DMA_Init+0x41c>
 80015b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b6:	e01a      	b.n	80015ee <HAL_DMA_Init+0x452>
 80015b8:	2300      	movs	r3, #0
 80015ba:	e018      	b.n	80015ee <HAL_DMA_Init+0x452>
 80015bc:	fe10803f 	.word	0xfe10803f
 80015c0:	5c001000 	.word	0x5c001000
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	58025408 	.word	0x58025408
 80015cc:	5802541c 	.word	0x5802541c
 80015d0:	58025430 	.word	0x58025430
 80015d4:	58025444 	.word	0x58025444
 80015d8:	58025458 	.word	0x58025458
 80015dc:	5802546c 	.word	0x5802546c
 80015e0:	58025480 	.word	0x58025480
 80015e4:	58025494 	.word	0x58025494
 80015e8:	fffe000f 	.word	0xfffe000f
 80015ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800160c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800161c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <HAL_DMA_Init+0x650>)
 8001634:	4413      	add	r3, r2
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_DMA_Init+0x654>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	009a      	lsls	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f001 fc45 	bl	8002ed4 <DMA_CalcBaseAndBitshift>
 800164a:	4603      	mov	r3, r0
 800164c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e008      	b.n	8001672 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2203      	movs	r2, #3
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0b7      	b.n	80017e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5f      	ldr	r2, [pc, #380]	; (80017f4 <HAL_DMA_Init+0x658>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d072      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <HAL_DMA_Init+0x65c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d06d      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <HAL_DMA_Init+0x660>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d068      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_DMA_Init+0x664>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d063      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a59      	ldr	r2, [pc, #356]	; (8001804 <HAL_DMA_Init+0x668>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_DMA_Init+0x66c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d059      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a56      	ldr	r2, [pc, #344]	; (800180c <HAL_DMA_Init+0x670>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d054      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a54      	ldr	r2, [pc, #336]	; (8001810 <HAL_DMA_Init+0x674>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d04f      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a53      	ldr	r2, [pc, #332]	; (8001814 <HAL_DMA_Init+0x678>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04a      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_DMA_Init+0x67c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d045      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_DMA_Init+0x680>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d040      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_DMA_Init+0x684>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d03b      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_DMA_Init+0x688>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d036      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	; (8001828 <HAL_DMA_Init+0x68c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d031      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_DMA_Init+0x690>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d02c      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_DMA_Init+0x694>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d027      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_DMA_Init+0x698>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d022      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a45      	ldr	r2, [pc, #276]	; (8001838 <HAL_DMA_Init+0x69c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01d      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a44      	ldr	r2, [pc, #272]	; (800183c <HAL_DMA_Init+0x6a0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d018      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a42      	ldr	r2, [pc, #264]	; (8001840 <HAL_DMA_Init+0x6a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a41      	ldr	r2, [pc, #260]	; (8001844 <HAL_DMA_Init+0x6a8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00e      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <HAL_DMA_Init+0x6ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d009      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a3e      	ldr	r2, [pc, #248]	; (800184c <HAL_DMA_Init+0x6b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d004      	beq.n	8001762 <HAL_DMA_Init+0x5c6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <HAL_DMA_Init+0x6b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Init+0x5ca>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_DMA_Init+0x5cc>
 8001766:	2300      	movs	r3, #0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d032      	beq.n	80017d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f001 fcdf 	bl	8003130 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d102      	bne.n	8001780 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001794:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <HAL_DMA_Init+0x624>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d80c      	bhi.n	80017c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 fd5c 	bl	8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e008      	b.n	80017d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	a7fdabf8 	.word	0xa7fdabf8
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	40020010 	.word	0x40020010
 80017f8:	40020028 	.word	0x40020028
 80017fc:	40020040 	.word	0x40020040
 8001800:	40020058 	.word	0x40020058
 8001804:	40020070 	.word	0x40020070
 8001808:	40020088 	.word	0x40020088
 800180c:	400200a0 	.word	0x400200a0
 8001810:	400200b8 	.word	0x400200b8
 8001814:	40020410 	.word	0x40020410
 8001818:	40020428 	.word	0x40020428
 800181c:	40020440 	.word	0x40020440
 8001820:	40020458 	.word	0x40020458
 8001824:	40020470 	.word	0x40020470
 8001828:	40020488 	.word	0x40020488
 800182c:	400204a0 	.word	0x400204a0
 8001830:	400204b8 	.word	0x400204b8
 8001834:	58025408 	.word	0x58025408
 8001838:	5802541c 	.word	0x5802541c
 800183c:	58025430 	.word	0x58025430
 8001840:	58025444 	.word	0x58025444
 8001844:	58025458 	.word	0x58025458
 8001848:	5802546c 	.word	0x5802546c
 800184c:	58025480 	.word	0x58025480
 8001850:	58025494 	.word	0x58025494

08001854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e226      	b.n	8001cbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA_Start_IT+0x2a>
 800187a:	2302      	movs	r3, #2
 800187c:	e21f      	b.n	8001cbe <HAL_DMA_Start_IT+0x46a>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 820a 	bne.w	8001ca8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a68      	ldr	r2, [pc, #416]	; (8001a48 <HAL_DMA_Start_IT+0x1f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04a      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <HAL_DMA_Start_IT+0x1f8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d045      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_DMA_Start_IT+0x1fc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d040      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <HAL_DMA_Start_IT+0x200>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d03b      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a62      	ldr	r2, [pc, #392]	; (8001a58 <HAL_DMA_Start_IT+0x204>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d036      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_DMA_Start_IT+0x208>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d031      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_DMA_Start_IT+0x20c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d02c      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_DMA_Start_IT+0x210>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d027      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <HAL_DMA_Start_IT+0x214>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d022      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5a      	ldr	r2, [pc, #360]	; (8001a6c <HAL_DMA_Start_IT+0x218>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01d      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <HAL_DMA_Start_IT+0x21c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d018      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <HAL_DMA_Start_IT+0x220>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <HAL_DMA_Start_IT+0x224>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00e      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_DMA_Start_IT+0x228>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a53      	ldr	r2, [pc, #332]	; (8001a80 <HAL_DMA_Start_IT+0x22c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d004      	beq.n	8001942 <HAL_DMA_Start_IT+0xee>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <HAL_DMA_Start_IT+0x230>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d108      	bne.n	8001954 <HAL_DMA_Start_IT+0x100>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e007      	b.n	8001964 <HAL_DMA_Start_IT+0x110>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f001 f906 	bl	8002b7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_DMA_Start_IT+0x1f4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d04a      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <HAL_DMA_Start_IT+0x1f8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d045      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_DMA_Start_IT+0x1fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d040      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_DMA_Start_IT+0x200>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d03b      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <HAL_DMA_Start_IT+0x204>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d036      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <HAL_DMA_Start_IT+0x208>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d031      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <HAL_DMA_Start_IT+0x20c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02c      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_DMA_Start_IT+0x210>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d027      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_DMA_Start_IT+0x214>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d022      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <HAL_DMA_Start_IT+0x218>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d01d      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <HAL_DMA_Start_IT+0x21c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d018      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_DMA_Start_IT+0x220>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_DMA_Start_IT+0x224>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00e      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_DMA_Start_IT+0x228>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_DMA_Start_IT+0x22c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_DMA_Start_IT+0x1bc>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_DMA_Start_IT+0x230>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Start_IT+0x1c0>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_Start_IT+0x1c2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 021e 	bic.w	r2, r3, #30
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0216 	orr.w	r2, r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03e      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0208 	orr.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e035      	b.n	8001ab4 <HAL_DMA_Start_IT+0x260>
 8001a48:	40020010 	.word	0x40020010
 8001a4c:	40020028 	.word	0x40020028
 8001a50:	40020040 	.word	0x40020040
 8001a54:	40020058 	.word	0x40020058
 8001a58:	40020070 	.word	0x40020070
 8001a5c:	40020088 	.word	0x40020088
 8001a60:	400200a0 	.word	0x400200a0
 8001a64:	400200b8 	.word	0x400200b8
 8001a68:	40020410 	.word	0x40020410
 8001a6c:	40020428 	.word	0x40020428
 8001a70:	40020440 	.word	0x40020440
 8001a74:	40020458 	.word	0x40020458
 8001a78:	40020470 	.word	0x40020470
 8001a7c:	40020488 	.word	0x40020488
 8001a80:	400204a0 	.word	0x400204a0
 8001a84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 020e 	bic.w	r2, r3, #14
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 020a 	orr.w	r2, r2, #10
 8001a9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0204 	orr.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a83      	ldr	r2, [pc, #524]	; (8001cc8 <HAL_DMA_Start_IT+0x474>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d072      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a82      	ldr	r2, [pc, #520]	; (8001ccc <HAL_DMA_Start_IT+0x478>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d06d      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a80      	ldr	r2, [pc, #512]	; (8001cd0 <HAL_DMA_Start_IT+0x47c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d068      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_DMA_Start_IT+0x480>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d063      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a7d      	ldr	r2, [pc, #500]	; (8001cd8 <HAL_DMA_Start_IT+0x484>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d05e      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7c      	ldr	r2, [pc, #496]	; (8001cdc <HAL_DMA_Start_IT+0x488>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d059      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7a      	ldr	r2, [pc, #488]	; (8001ce0 <HAL_DMA_Start_IT+0x48c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d054      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a79      	ldr	r2, [pc, #484]	; (8001ce4 <HAL_DMA_Start_IT+0x490>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04f      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_DMA_Start_IT+0x494>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d04a      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a76      	ldr	r2, [pc, #472]	; (8001cec <HAL_DMA_Start_IT+0x498>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d045      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a74      	ldr	r2, [pc, #464]	; (8001cf0 <HAL_DMA_Start_IT+0x49c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d040      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a73      	ldr	r2, [pc, #460]	; (8001cf4 <HAL_DMA_Start_IT+0x4a0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d03b      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a71      	ldr	r2, [pc, #452]	; (8001cf8 <HAL_DMA_Start_IT+0x4a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a70      	ldr	r2, [pc, #448]	; (8001cfc <HAL_DMA_Start_IT+0x4a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d031      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_DMA_Start_IT+0x4ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02c      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6d      	ldr	r2, [pc, #436]	; (8001d04 <HAL_DMA_Start_IT+0x4b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d027      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6b      	ldr	r2, [pc, #428]	; (8001d08 <HAL_DMA_Start_IT+0x4b4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d022      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_DMA_Start_IT+0x4b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01d      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a68      	ldr	r2, [pc, #416]	; (8001d10 <HAL_DMA_Start_IT+0x4bc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d018      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a67      	ldr	r2, [pc, #412]	; (8001d14 <HAL_DMA_Start_IT+0x4c0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_DMA_Start_IT+0x4c4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a64      	ldr	r2, [pc, #400]	; (8001d1c <HAL_DMA_Start_IT+0x4c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a62      	ldr	r2, [pc, #392]	; (8001d20 <HAL_DMA_Start_IT+0x4cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x350>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a61      	ldr	r2, [pc, #388]	; (8001d24 <HAL_DMA_Start_IT+0x4d0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Start_IT+0x354>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_DMA_Start_IT+0x356>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01a      	beq.n	8001be4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a37      	ldr	r2, [pc, #220]	; (8001cc8 <HAL_DMA_Start_IT+0x474>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d04a      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a36      	ldr	r2, [pc, #216]	; (8001ccc <HAL_DMA_Start_IT+0x478>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d045      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_DMA_Start_IT+0x47c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d040      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <HAL_DMA_Start_IT+0x480>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d03b      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_DMA_Start_IT+0x484>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d036      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_DMA_Start_IT+0x488>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d031      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <HAL_DMA_Start_IT+0x48c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02c      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <HAL_DMA_Start_IT+0x490>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d027      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <HAL_DMA_Start_IT+0x494>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d022      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_DMA_Start_IT+0x498>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d01d      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_DMA_Start_IT+0x49c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d018      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_DMA_Start_IT+0x4a0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_DMA_Start_IT+0x4a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_DMA_Start_IT+0x4a8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_DMA_Start_IT+0x4ac>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_Start_IT+0x430>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_DMA_Start_IT+0x4b0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d108      	bne.n	8001c96 <HAL_DMA_Start_IT+0x442>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e012      	b.n	8001cbc <HAL_DMA_Start_IT+0x468>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e009      	b.n	8001cbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40020010 	.word	0x40020010
 8001ccc:	40020028 	.word	0x40020028
 8001cd0:	40020040 	.word	0x40020040
 8001cd4:	40020058 	.word	0x40020058
 8001cd8:	40020070 	.word	0x40020070
 8001cdc:	40020088 	.word	0x40020088
 8001ce0:	400200a0 	.word	0x400200a0
 8001ce4:	400200b8 	.word	0x400200b8
 8001ce8:	40020410 	.word	0x40020410
 8001cec:	40020428 	.word	0x40020428
 8001cf0:	40020440 	.word	0x40020440
 8001cf4:	40020458 	.word	0x40020458
 8001cf8:	40020470 	.word	0x40020470
 8001cfc:	40020488 	.word	0x40020488
 8001d00:	400204a0 	.word	0x400204a0
 8001d04:	400204b8 	.word	0x400204b8
 8001d08:	58025408 	.word	0x58025408
 8001d0c:	5802541c 	.word	0x5802541c
 8001d10:	58025430 	.word	0x58025430
 8001d14:	58025444 	.word	0x58025444
 8001d18:	58025458 	.word	0x58025458
 8001d1c:	5802546c 	.word	0x5802546c
 8001d20:	58025480 	.word	0x58025480
 8001d24:	58025494 	.word	0x58025494

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_DMA_IRQHandler+0x1ac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_DMA_IRQHandler+0x1b0>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5f      	ldr	r2, [pc, #380]	; (8001edc <HAL_DMA_IRQHandler+0x1b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_DMA_IRQHandler+0x1b8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_DMA_IRQHandler+0x1bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_DMA_IRQHandler+0x1c0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a59      	ldr	r2, [pc, #356]	; (8001eec <HAL_DMA_IRQHandler+0x1c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_DMA_IRQHandler+0x1c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <HAL_DMA_IRQHandler+0x1cc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_DMA_IRQHandler+0x1d0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_DMA_IRQHandler+0x1d4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_DMA_IRQHandler+0x1d8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_DMA_IRQHandler+0x1dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_DMA_IRQHandler+0x1e0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_DMA_IRQHandler+0x1e4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_DMA_IRQHandler+0x1e8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_DMA_IRQHandler+0x1ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xd2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_DMA_IRQHandler+0x1f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_IRQHandler+0xd6>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 842b 	beq.w	800265c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2208      	movs	r2, #8
 8001e10:	409a      	lsls	r2, r3
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a2 	beq.w	8001f60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <HAL_DMA_IRQHandler+0x1b4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <HAL_DMA_IRQHandler+0x1b8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d045      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_DMA_IRQHandler+0x1bc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d040      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ee8 <HAL_DMA_IRQHandler+0x1c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d03b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_DMA_IRQHandler+0x1c4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_DMA_IRQHandler+0x1c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_DMA_IRQHandler+0x1cc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02c      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_DMA_IRQHandler+0x1d0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <HAL_DMA_IRQHandler+0x1d4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_DMA_IRQHandler+0x1d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01d      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_DMA_IRQHandler+0x1dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_DMA_IRQHandler+0x1e0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_DMA_IRQHandler+0x1e4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_DMA_IRQHandler+0x1e8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_DMA_IRQHandler+0x1ec>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x194>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_DMA_IRQHandler+0x1f0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d12f      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x1f4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	e02e      	b.n	8001f30 <HAL_DMA_IRQHandler+0x208>
 8001ed2:	bf00      	nop
 8001ed4:	24000000 	.word	0x24000000
 8001ed8:	1b4e81b5 	.word	0x1b4e81b5
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	40020040 	.word	0x40020040
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	40020070 	.word	0x40020070
 8001ef0:	40020088 	.word	0x40020088
 8001ef4:	400200a0 	.word	0x400200a0
 8001ef8:	400200b8 	.word	0x400200b8
 8001efc:	40020410 	.word	0x40020410
 8001f00:	40020428 	.word	0x40020428
 8001f04:	40020440 	.word	0x40020440
 8001f08:	40020458 	.word	0x40020458
 8001f0c:	40020470 	.word	0x40020470
 8001f10:	40020488 	.word	0x40020488
 8001f14:	400204a0 	.word	0x400204a0
 8001f18:	400204b8 	.word	0x400204b8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0204 	bic.w	r2, r2, #4
 8001f42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06e      	beq.n	8002054 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_DMA_IRQHandler+0x3f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04a      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_DMA_IRQHandler+0x3fc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d045      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a66      	ldr	r2, [pc, #408]	; (8002128 <HAL_DMA_IRQHandler+0x400>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d040      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a64      	ldr	r2, [pc, #400]	; (800212c <HAL_DMA_IRQHandler+0x404>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d03b      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a63      	ldr	r2, [pc, #396]	; (8002130 <HAL_DMA_IRQHandler+0x408>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d036      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a61      	ldr	r2, [pc, #388]	; (8002134 <HAL_DMA_IRQHandler+0x40c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_DMA_IRQHandler+0x410>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02c      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5e      	ldr	r2, [pc, #376]	; (800213c <HAL_DMA_IRQHandler+0x414>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d027      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_DMA_IRQHandler+0x418>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a5b      	ldr	r2, [pc, #364]	; (8002144 <HAL_DMA_IRQHandler+0x41c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_DMA_IRQHandler+0x420>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_DMA_IRQHandler+0x424>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_DMA_IRQHandler+0x428>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_DMA_IRQHandler+0x42c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_DMA_IRQHandler+0x430>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2ee>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_DMA_IRQHandler+0x434>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10a      	bne.n	800202c <HAL_DMA_IRQHandler+0x304>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e003      	b.n	8002034 <HAL_DMA_IRQHandler+0x30c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0202 	orr.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2204      	movs	r2, #4
 800205e:	409a      	lsls	r2, r3
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808f 	beq.w	8002188 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <HAL_DMA_IRQHandler+0x3f8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04a      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_DMA_IRQHandler+0x3fc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d045      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_DMA_IRQHandler+0x400>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d040      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_DMA_IRQHandler+0x404>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d03b      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_DMA_IRQHandler+0x408>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d036      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_DMA_IRQHandler+0x40c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_DMA_IRQHandler+0x410>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d02c      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_DMA_IRQHandler+0x414>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d027      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_DMA_IRQHandler+0x418>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_DMA_IRQHandler+0x41c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01d      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_DMA_IRQHandler+0x420>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d018      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_DMA_IRQHandler+0x424>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <HAL_DMA_IRQHandler+0x428>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_DMA_IRQHandler+0x42c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_DMA_IRQHandler+0x430>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <HAL_DMA_IRQHandler+0x3e2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_DMA_IRQHandler+0x434>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12a      	bne.n	8002160 <HAL_DMA_IRQHandler+0x438>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e023      	b.n	8002168 <HAL_DMA_IRQHandler+0x440>
 8002120:	40020010 	.word	0x40020010
 8002124:	40020028 	.word	0x40020028
 8002128:	40020040 	.word	0x40020040
 800212c:	40020058 	.word	0x40020058
 8002130:	40020070 	.word	0x40020070
 8002134:	40020088 	.word	0x40020088
 8002138:	400200a0 	.word	0x400200a0
 800213c:	400200b8 	.word	0x400200b8
 8002140:	40020410 	.word	0x40020410
 8002144:	40020428 	.word	0x40020428
 8002148:	40020440 	.word	0x40020440
 800214c:	40020458 	.word	0x40020458
 8002150:	40020470 	.word	0x40020470
 8002154:	40020488 	.word	0x40020488
 8002158:	400204a0 	.word	0x400204a0
 800215c:	400204b8 	.word	0x400204b8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2204      	movs	r2, #4
 8002176:	409a      	lsls	r2, r3
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a6 	beq.w	80022ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a85      	ldr	r2, [pc, #532]	; (80023b8 <HAL_DMA_IRQHandler+0x690>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04a      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_DMA_IRQHandler+0x694>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d045      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_DMA_IRQHandler+0x698>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d040      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_DMA_IRQHandler+0x69c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d03b      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_DMA_IRQHandler+0x6a0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d036      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7d      	ldr	r2, [pc, #500]	; (80023cc <HAL_DMA_IRQHandler+0x6a4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d031      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7c      	ldr	r2, [pc, #496]	; (80023d0 <HAL_DMA_IRQHandler+0x6a8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d02c      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7a      	ldr	r2, [pc, #488]	; (80023d4 <HAL_DMA_IRQHandler+0x6ac>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a79      	ldr	r2, [pc, #484]	; (80023d8 <HAL_DMA_IRQHandler+0x6b0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_DMA_IRQHandler+0x6b4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01d      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a76      	ldr	r2, [pc, #472]	; (80023e0 <HAL_DMA_IRQHandler+0x6b8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a74      	ldr	r2, [pc, #464]	; (80023e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a73      	ldr	r2, [pc, #460]	; (80023e8 <HAL_DMA_IRQHandler+0x6c0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_DMA_IRQHandler+0x6c4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a70      	ldr	r2, [pc, #448]	; (80023f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_DMA_IRQHandler+0x516>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_DMA_IRQHandler+0x6cc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10a      	bne.n	8002254 <HAL_DMA_IRQHandler+0x52c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e009      	b.n	8002268 <HAL_DMA_IRQHandler+0x540>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03e      	beq.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2210      	movs	r2, #16
 8002276:	409a      	lsls	r2, r3
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d018      	beq.n	80022bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d108      	bne.n	80022aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d024      	beq.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e01f      	b.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01b      	beq.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e016      	b.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d107      	bne.n	80022da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2220      	movs	r2, #32
 80022f4:	409a      	lsls	r2, r3
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8110 	beq.w	8002520 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <HAL_DMA_IRQHandler+0x690>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d04a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <HAL_DMA_IRQHandler+0x694>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d045      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_DMA_IRQHandler+0x698>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d040      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <HAL_DMA_IRQHandler+0x69c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d03b      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_DMA_IRQHandler+0x6a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d036      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a25      	ldr	r2, [pc, #148]	; (80023cc <HAL_DMA_IRQHandler+0x6a4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d031      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_DMA_IRQHandler+0x6a8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02c      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <HAL_DMA_IRQHandler+0x6ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d027      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <HAL_DMA_IRQHandler+0x6b0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d022      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_DMA_IRQHandler+0x6b4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d01d      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_DMA_IRQHandler+0x6b8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d018      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_DMA_IRQHandler+0x6c0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00e      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_DMA_IRQHandler+0x6c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x678>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_DMA_IRQHandler+0x6cc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d12b      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x6d0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e02a      	b.n	800240c <HAL_DMA_IRQHandler+0x6e4>
 80023b6:	bf00      	nop
 80023b8:	40020010 	.word	0x40020010
 80023bc:	40020028 	.word	0x40020028
 80023c0:	40020040 	.word	0x40020040
 80023c4:	40020058 	.word	0x40020058
 80023c8:	40020070 	.word	0x40020070
 80023cc:	40020088 	.word	0x40020088
 80023d0:	400200a0 	.word	0x400200a0
 80023d4:	400200b8 	.word	0x400200b8
 80023d8:	40020410 	.word	0x40020410
 80023dc:	40020428 	.word	0x40020428
 80023e0:	40020440 	.word	0x40020440
 80023e4:	40020458 	.word	0x40020458
 80023e8:	40020470 	.word	0x40020470
 80023ec:	40020488 	.word	0x40020488
 80023f0:	400204a0 	.word	0x400204a0
 80023f4:	400204b8 	.word	0x400204b8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8087 	beq.w	8002520 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2220      	movs	r2, #32
 800241c:	409a      	lsls	r2, r3
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b04      	cmp	r3, #4
 800242c:	d139      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0216 	bic.w	r2, r2, #22
 800243c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_DMA_IRQHandler+0x736>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	223f      	movs	r2, #63	; 0x3f
 8002478:	409a      	lsls	r2, r3
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 834a 	beq.w	8002b2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
          }
          return;
 80024a0:	e344      	b.n	8002b2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d02c      	beq.n	8002520 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
 80024ce:	e027      	b.n	8002520 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d023      	beq.n	8002520 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e01e      	b.n	8002520 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0210 	bic.w	r2, r2, #16
 80024fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8306 	beq.w	8002b36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8088 	beq.w	8002648 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_DMA_IRQHandler+0xa08>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d04a      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a79      	ldr	r2, [pc, #484]	; (8002734 <HAL_DMA_IRQHandler+0xa0c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d045      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a77      	ldr	r2, [pc, #476]	; (8002738 <HAL_DMA_IRQHandler+0xa10>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d040      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a76      	ldr	r2, [pc, #472]	; (800273c <HAL_DMA_IRQHandler+0xa14>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d03b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a74      	ldr	r2, [pc, #464]	; (8002740 <HAL_DMA_IRQHandler+0xa18>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d036      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a73      	ldr	r2, [pc, #460]	; (8002744 <HAL_DMA_IRQHandler+0xa1c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d031      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a71      	ldr	r2, [pc, #452]	; (8002748 <HAL_DMA_IRQHandler+0xa20>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a70      	ldr	r2, [pc, #448]	; (800274c <HAL_DMA_IRQHandler+0xa24>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d027      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_DMA_IRQHandler+0xa28>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_DMA_IRQHandler+0xa2c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01d      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6b      	ldr	r2, [pc, #428]	; (8002758 <HAL_DMA_IRQHandler+0xa30>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6a      	ldr	r2, [pc, #424]	; (800275c <HAL_DMA_IRQHandler+0xa34>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_DMA_IRQHandler+0xa38>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_DMA_IRQHandler+0xa3c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a65      	ldr	r2, [pc, #404]	; (8002768 <HAL_DMA_IRQHandler+0xa40>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x8b8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a64      	ldr	r2, [pc, #400]	; (800276c <HAL_DMA_IRQHandler+0xa44>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x8ca>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e007      	b.n	8002602 <HAL_DMA_IRQHandler+0x8da>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3301      	adds	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260a:	429a      	cmp	r2, r3
 800260c:	d307      	bcc.n	800261e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f2      	bne.n	8002602 <HAL_DMA_IRQHandler+0x8da>
 800261c:	e000      	b.n	8002620 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800261e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002636:	e003      	b.n	8002640 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8272 	beq.w	8002b36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e26c      	b.n	8002b36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_DMA_IRQHandler+0xa48>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d022      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a42      	ldr	r2, [pc, #264]	; (8002774 <HAL_DMA_IRQHandler+0xa4c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01d      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a40      	ldr	r2, [pc, #256]	; (8002778 <HAL_DMA_IRQHandler+0xa50>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3f      	ldr	r2, [pc, #252]	; (800277c <HAL_DMA_IRQHandler+0xa54>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <HAL_DMA_IRQHandler+0xa58>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <HAL_DMA_IRQHandler+0xa5c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_DMA_IRQHandler+0xa60>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_IRQHandler+0x984>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a39      	ldr	r2, [pc, #228]	; (800278c <HAL_DMA_IRQHandler+0xa64>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x988>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_IRQHandler+0x98a>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 823f 	beq.w	8002b36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80cd 	beq.w	8002870 <HAL_DMA_IRQHandler+0xb48>
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80c7 	beq.w	8002870 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2204      	movs	r2, #4
 80026ec:	409a      	lsls	r2, r3
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d049      	beq.n	8002790 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8210 	beq.w	8002b30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002718:	e20a      	b.n	8002b30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8206 	beq.w	8002b30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800272c:	e200      	b.n	8002b30 <HAL_DMA_IRQHandler+0xe08>
 800272e:	bf00      	nop
 8002730:	40020010 	.word	0x40020010
 8002734:	40020028 	.word	0x40020028
 8002738:	40020040 	.word	0x40020040
 800273c:	40020058 	.word	0x40020058
 8002740:	40020070 	.word	0x40020070
 8002744:	40020088 	.word	0x40020088
 8002748:	400200a0 	.word	0x400200a0
 800274c:	400200b8 	.word	0x400200b8
 8002750:	40020410 	.word	0x40020410
 8002754:	40020428 	.word	0x40020428
 8002758:	40020440 	.word	0x40020440
 800275c:	40020458 	.word	0x40020458
 8002760:	40020470 	.word	0x40020470
 8002764:	40020488 	.word	0x40020488
 8002768:	400204a0 	.word	0x400204a0
 800276c:	400204b8 	.word	0x400204b8
 8002770:	58025408 	.word	0x58025408
 8002774:	5802541c 	.word	0x5802541c
 8002778:	58025430 	.word	0x58025430
 800277c:	58025444 	.word	0x58025444
 8002780:	58025458 	.word	0x58025458
 8002784:	5802546c 	.word	0x5802546c
 8002788:	58025480 	.word	0x58025480
 800278c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d160      	bne.n	800285c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7f      	ldr	r2, [pc, #508]	; (800299c <HAL_DMA_IRQHandler+0xc74>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d04a      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_DMA_IRQHandler+0xc78>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d045      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7c      	ldr	r2, [pc, #496]	; (80029a4 <HAL_DMA_IRQHandler+0xc7c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d040      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_DMA_IRQHandler+0xc80>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d03b      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a79      	ldr	r2, [pc, #484]	; (80029ac <HAL_DMA_IRQHandler+0xc84>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d036      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <HAL_DMA_IRQHandler+0xc88>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a76      	ldr	r2, [pc, #472]	; (80029b4 <HAL_DMA_IRQHandler+0xc8c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d02c      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a74      	ldr	r2, [pc, #464]	; (80029b8 <HAL_DMA_IRQHandler+0xc90>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d027      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a73      	ldr	r2, [pc, #460]	; (80029bc <HAL_DMA_IRQHandler+0xc94>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a71      	ldr	r2, [pc, #452]	; (80029c0 <HAL_DMA_IRQHandler+0xc98>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a70      	ldr	r2, [pc, #448]	; (80029c4 <HAL_DMA_IRQHandler+0xc9c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d018      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6e      	ldr	r2, [pc, #440]	; (80029c8 <HAL_DMA_IRQHandler+0xca0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6d      	ldr	r2, [pc, #436]	; (80029cc <HAL_DMA_IRQHandler+0xca4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00e      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6b      	ldr	r2, [pc, #428]	; (80029d0 <HAL_DMA_IRQHandler+0xca8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6a      	ldr	r2, [pc, #424]	; (80029d4 <HAL_DMA_IRQHandler+0xcac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_DMA_IRQHandler+0xb12>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_DMA_IRQHandler+0xcb0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0xb24>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0208 	bic.w	r2, r2, #8
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e007      	b.n	800285c <HAL_DMA_IRQHandler+0xb34>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8165 	beq.w	8002b30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800286e:	e15f      	b.n	8002b30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2202      	movs	r2, #2
 800287a:	409a      	lsls	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80c5 	beq.w	8002a10 <HAL_DMA_IRQHandler+0xce8>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80bf 	beq.w	8002a10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2202      	movs	r2, #2
 800289c:	409a      	lsls	r2, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d018      	beq.n	80028de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 813a 	beq.w	8002b34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028c8:	e134      	b.n	8002b34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8130 	beq.w	8002b34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028dc:	e12a      	b.n	8002b34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8089 	bne.w	80029fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2b      	ldr	r2, [pc, #172]	; (800299c <HAL_DMA_IRQHandler+0xc74>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04a      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <HAL_DMA_IRQHandler+0xc78>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d045      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_DMA_IRQHandler+0xc7c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <HAL_DMA_IRQHandler+0xc80>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d03b      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a25      	ldr	r2, [pc, #148]	; (80029ac <HAL_DMA_IRQHandler+0xc84>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d036      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_DMA_IRQHandler+0xc88>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_DMA_IRQHandler+0xc8c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d02c      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_DMA_IRQHandler+0xc90>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d027      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_DMA_IRQHandler+0xc94>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_DMA_IRQHandler+0xc98>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01d      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_DMA_IRQHandler+0xc9c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_DMA_IRQHandler+0xca0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_DMA_IRQHandler+0xca4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_DMA_IRQHandler+0xca8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_DMA_IRQHandler+0xcac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_DMA_IRQHandler+0xc62>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_DMA_IRQHandler+0xcb0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d128      	bne.n	80029dc <HAL_DMA_IRQHandler+0xcb4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0214 	bic.w	r2, r2, #20
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e027      	b.n	80029ec <HAL_DMA_IRQHandler+0xcc4>
 800299c:	40020010 	.word	0x40020010
 80029a0:	40020028 	.word	0x40020028
 80029a4:	40020040 	.word	0x40020040
 80029a8:	40020058 	.word	0x40020058
 80029ac:	40020070 	.word	0x40020070
 80029b0:	40020088 	.word	0x40020088
 80029b4:	400200a0 	.word	0x400200a0
 80029b8:	400200b8 	.word	0x400200b8
 80029bc:	40020410 	.word	0x40020410
 80029c0:	40020428 	.word	0x40020428
 80029c4:	40020440 	.word	0x40020440
 80029c8:	40020458 	.word	0x40020458
 80029cc:	40020470 	.word	0x40020470
 80029d0:	40020488 	.word	0x40020488
 80029d4:	400204a0 	.word	0x400204a0
 80029d8:	400204b8 	.word	0x400204b8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020a 	bic.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8097 	beq.w	8002b34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a0e:	e091      	b.n	8002b34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2208      	movs	r2, #8
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8088 	beq.w	8002b36 <HAL_DMA_IRQHandler+0xe0e>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8082 	beq.w	8002b36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <HAL_DMA_IRQHandler+0xe14>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d04a      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_DMA_IRQHandler+0xe18>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d045      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <HAL_DMA_IRQHandler+0xe1c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d040      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <HAL_DMA_IRQHandler+0xe20>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d03b      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_DMA_IRQHandler+0xe24>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d036      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <HAL_DMA_IRQHandler+0xe28>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d031      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_DMA_IRQHandler+0xe2c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d02c      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a36      	ldr	r2, [pc, #216]	; (8002b58 <HAL_DMA_IRQHandler+0xe30>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d027      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a35      	ldr	r2, [pc, #212]	; (8002b5c <HAL_DMA_IRQHandler+0xe34>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_DMA_IRQHandler+0xe38>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <HAL_DMA_IRQHandler+0xe3c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <HAL_DMA_IRQHandler+0xe40>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2f      	ldr	r2, [pc, #188]	; (8002b6c <HAL_DMA_IRQHandler+0xe44>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_DMA_IRQHandler+0xe48>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_DMA_IRQHandler+0xe4c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xdaa>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_DMA_IRQHandler+0xe50>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0xdbc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 021c 	bic.w	r2, r2, #28
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e007      	b.n	8002af4 <HAL_DMA_IRQHandler+0xdcc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 020e 	bic.w	r2, r2, #14
 8002af2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e004      	b.n	8002b36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b2c:	bf00      	nop
 8002b2e:	e002      	b.n	8002b36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8

08002b7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7f      	ldr	r2, [pc, #508]	; (8002d98 <DMA_SetConfig+0x21c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d072      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7d      	ldr	r2, [pc, #500]	; (8002d9c <DMA_SetConfig+0x220>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d06d      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7c      	ldr	r2, [pc, #496]	; (8002da0 <DMA_SetConfig+0x224>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d068      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <DMA_SetConfig+0x228>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d063      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a79      	ldr	r2, [pc, #484]	; (8002da8 <DMA_SetConfig+0x22c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d05e      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a77      	ldr	r2, [pc, #476]	; (8002dac <DMA_SetConfig+0x230>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d059      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a76      	ldr	r2, [pc, #472]	; (8002db0 <DMA_SetConfig+0x234>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d054      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a74      	ldr	r2, [pc, #464]	; (8002db4 <DMA_SetConfig+0x238>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d04f      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a73      	ldr	r2, [pc, #460]	; (8002db8 <DMA_SetConfig+0x23c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <DMA_SetConfig+0x240>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a70      	ldr	r2, [pc, #448]	; (8002dc0 <DMA_SetConfig+0x244>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a6e      	ldr	r2, [pc, #440]	; (8002dc4 <DMA_SetConfig+0x248>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6d      	ldr	r2, [pc, #436]	; (8002dc8 <DMA_SetConfig+0x24c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6b      	ldr	r2, [pc, #428]	; (8002dcc <DMA_SetConfig+0x250>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6a      	ldr	r2, [pc, #424]	; (8002dd0 <DMA_SetConfig+0x254>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	; (8002dd4 <DMA_SetConfig+0x258>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <DMA_SetConfig+0x25c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <DMA_SetConfig+0x260>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a64      	ldr	r2, [pc, #400]	; (8002de0 <DMA_SetConfig+0x264>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a62      	ldr	r2, [pc, #392]	; (8002de4 <DMA_SetConfig+0x268>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <DMA_SetConfig+0x26c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5f      	ldr	r2, [pc, #380]	; (8002dec <DMA_SetConfig+0x270>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5e      	ldr	r2, [pc, #376]	; (8002df0 <DMA_SetConfig+0x274>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <DMA_SetConfig+0x10a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <DMA_SetConfig+0x278>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <DMA_SetConfig+0x10e>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <DMA_SetConfig+0x110>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002caa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <DMA_SetConfig+0x21c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d04a      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <DMA_SetConfig+0x220>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d045      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <DMA_SetConfig+0x224>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d040      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <DMA_SetConfig+0x228>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d03b      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a33      	ldr	r2, [pc, #204]	; (8002da8 <DMA_SetConfig+0x22c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d036      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <DMA_SetConfig+0x230>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d031      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <DMA_SetConfig+0x234>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02c      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <DMA_SetConfig+0x238>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d027      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <DMA_SetConfig+0x23c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d022      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <DMA_SetConfig+0x240>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d01d      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <DMA_SetConfig+0x244>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <DMA_SetConfig+0x248>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <DMA_SetConfig+0x24c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <DMA_SetConfig+0x250>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <DMA_SetConfig+0x254>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <DMA_SetConfig+0x1d0>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <DMA_SetConfig+0x258>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <DMA_SetConfig+0x1d4>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <DMA_SetConfig+0x1d6>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d059      	beq.n	8002e0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	223f      	movs	r2, #63	; 0x3f
 8002d60:	409a      	lsls	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d138      	bne.n	8002df8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d96:	e086      	b.n	8002ea6 <DMA_SetConfig+0x32a>
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
 8002dd8:	58025408 	.word	0x58025408
 8002ddc:	5802541c 	.word	0x5802541c
 8002de0:	58025430 	.word	0x58025430
 8002de4:	58025444 	.word	0x58025444
 8002de8:	58025458 	.word	0x58025458
 8002dec:	5802546c 	.word	0x5802546c
 8002df0:	58025480 	.word	0x58025480
 8002df4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	e04d      	b.n	8002ea6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <DMA_SetConfig+0x338>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <DMA_SetConfig+0x33c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01d      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <DMA_SetConfig+0x340>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <DMA_SetConfig+0x344>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <DMA_SetConfig+0x348>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <DMA_SetConfig+0x34c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <DMA_SetConfig+0x350>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <DMA_SetConfig+0x2de>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <DMA_SetConfig+0x354>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <DMA_SetConfig+0x2e2>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <DMA_SetConfig+0x2e4>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d108      	bne.n	8002e96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	60da      	str	r2, [r3, #12]
}
 8002e94:	e007      	b.n	8002ea6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	58025408 	.word	0x58025408
 8002eb8:	5802541c 	.word	0x5802541c
 8002ebc:	58025430 	.word	0x58025430
 8002ec0:	58025444 	.word	0x58025444
 8002ec4:	58025458 	.word	0x58025458
 8002ec8:	5802546c 	.word	0x5802546c
 8002ecc:	58025480 	.word	0x58025480
 8002ed0:	58025494 	.word	0x58025494

08002ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	; (8002fec <DMA_CalcBaseAndBitshift+0x118>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04a      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a41      	ldr	r2, [pc, #260]	; (8002ff0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d045      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <DMA_CalcBaseAndBitshift+0x120>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3e      	ldr	r2, [pc, #248]	; (8002ff8 <DMA_CalcBaseAndBitshift+0x124>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03b      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <DMA_CalcBaseAndBitshift+0x128>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d031      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a39      	ldr	r2, [pc, #228]	; (8003004 <DMA_CalcBaseAndBitshift+0x130>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a38      	ldr	r2, [pc, #224]	; (8003008 <DMA_CalcBaseAndBitshift+0x134>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d027      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a36      	ldr	r2, [pc, #216]	; (800300c <DMA_CalcBaseAndBitshift+0x138>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a35      	ldr	r2, [pc, #212]	; (8003010 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01d      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a33      	ldr	r2, [pc, #204]	; (8003014 <DMA_CalcBaseAndBitshift+0x140>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a32      	ldr	r2, [pc, #200]	; (8003018 <DMA_CalcBaseAndBitshift+0x144>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <DMA_CalcBaseAndBitshift+0x148>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <DMA_CalcBaseAndBitshift+0x14c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <DMA_CalcBaseAndBitshift+0x150>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <DMA_CalcBaseAndBitshift+0xa8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <DMA_CalcBaseAndBitshift+0x154>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <DMA_CalcBaseAndBitshift+0xac>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <DMA_CalcBaseAndBitshift+0xae>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d024      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3b10      	subs	r3, #16
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <DMA_CalcBaseAndBitshift+0x158>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <DMA_CalcBaseAndBitshift+0x15c>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d908      	bls.n	8002fc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <DMA_CalcBaseAndBitshift+0x160>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8002fbe:	e00d      	b.n	8002fdc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <DMA_CalcBaseAndBitshift+0x160>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	e005      	b.n	8002fdc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40020010 	.word	0x40020010
 8002ff0:	40020028 	.word	0x40020028
 8002ff4:	40020040 	.word	0x40020040
 8002ff8:	40020058 	.word	0x40020058
 8002ffc:	40020070 	.word	0x40020070
 8003000:	40020088 	.word	0x40020088
 8003004:	400200a0 	.word	0x400200a0
 8003008:	400200b8 	.word	0x400200b8
 800300c:	40020410 	.word	0x40020410
 8003010:	40020428 	.word	0x40020428
 8003014:	40020440 	.word	0x40020440
 8003018:	40020458 	.word	0x40020458
 800301c:	40020470 	.word	0x40020470
 8003020:	40020488 	.word	0x40020488
 8003024:	400204a0 	.word	0x400204a0
 8003028:	400204b8 	.word	0x400204b8
 800302c:	aaaaaaab 	.word	0xaaaaaaab
 8003030:	0800dc00 	.word	0x0800dc00
 8003034:	fffffc00 	.word	0xfffffc00

08003038 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d120      	bne.n	800308e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	2b03      	cmp	r3, #3
 8003052:	d858      	bhi.n	8003106 <DMA_CheckFifoParam+0xce>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <DMA_CheckFifoParam+0x24>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307f 	.word	0x0800307f
 8003064:	0800306d 	.word	0x0800306d
 8003068:	08003107 	.word	0x08003107
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d048      	beq.n	800310a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800307c:	e045      	b.n	800310a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003086:	d142      	bne.n	800310e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800308c:	e03f      	b.n	800310e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	d123      	bne.n	80030e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	2b03      	cmp	r3, #3
 800309e:	d838      	bhi.n	8003112 <DMA_CheckFifoParam+0xda>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <DMA_CheckFifoParam+0x70>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030bf 	.word	0x080030bf
 80030b0:	080030b9 	.word	0x080030b9
 80030b4:	080030d1 	.word	0x080030d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
        break;
 80030bc:	e030      	b.n	8003120 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d025      	beq.n	8003116 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030ce:	e022      	b.n	8003116 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d8:	d11f      	bne.n	800311a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030de:	e01c      	b.n	800311a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d902      	bls.n	80030ee <DMA_CheckFifoParam+0xb6>
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d003      	beq.n	80030f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80030ec:	e018      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
        break;
 80030f2:	e015      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
    break;
 8003104:	e00b      	b.n	800311e <DMA_CheckFifoParam+0xe6>
        break;
 8003106:	bf00      	nop
 8003108:	e00a      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        break;
 800310a:	bf00      	nop
 800310c:	e008      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        break;
 800310e:	bf00      	nop
 8003110:	e006      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        break;
 8003112:	bf00      	nop
 8003114:	e004      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
        break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
    break;
 800311e:	bf00      	nop
    }
  }

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a38      	ldr	r2, [pc, #224]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a36      	ldr	r2, [pc, #216]	; (8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a35      	ldr	r2, [pc, #212]	; (800322c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a33      	ldr	r2, [pc, #204]	; (8003230 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a32      	ldr	r2, [pc, #200]	; (8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a30      	ldr	r2, [pc, #192]	; (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2f      	ldr	r2, [pc, #188]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01a      	beq.n	80031ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3b08      	subs	r3, #8
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80031cc:	e024      	b.n	8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3b10      	subs	r3, #16
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d806      	bhi.n	80031f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d902      	bls.n	80031f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3308      	adds	r3, #8
 80031f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003208:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	58025408 	.word	0x58025408
 8003228:	5802541c 	.word	0x5802541c
 800322c:	58025430 	.word	0x58025430
 8003230:	58025444 	.word	0x58025444
 8003234:	58025458 	.word	0x58025458
 8003238:	5802546c 	.word	0x5802546c
 800323c:	58025480 	.word	0x58025480
 8003240:	58025494 	.word	0x58025494
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	16009600 	.word	0x16009600
 800324c:	58025880 	.word	0x58025880
 8003250:	aaaaaaab 	.word	0xaaaaaaab
 8003254:	400204b8 	.word	0x400204b8
 8003258:	4002040f 	.word	0x4002040f
 800325c:	10008200 	.word	0x10008200
 8003260:	40020880 	.word	0x40020880

08003264 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04a      	beq.n	8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d847      	bhi.n	8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a22      	ldr	r2, [pc, #136]	; (8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80032ec:	671a      	str	r2, [r3, #112]	; 0x70
 80032ee:	e009      	b.n	8003304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003302:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3b01      	subs	r3, #1
 8003308:	2201      	movs	r2, #1
 800330a:	409a      	lsls	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	58025408 	.word	0x58025408
 8003320:	5802541c 	.word	0x5802541c
 8003324:	58025430 	.word	0x58025430
 8003328:	58025444 	.word	0x58025444
 800332c:	58025458 	.word	0x58025458
 8003330:	5802546c 	.word	0x5802546c
 8003334:	58025480 	.word	0x58025480
 8003338:	58025494 	.word	0x58025494
 800333c:	1600963f 	.word	0x1600963f
 8003340:	58025940 	.word	0x58025940
 8003344:	1000823f 	.word	0x1000823f
 8003348:	40020940 	.word	0x40020940

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800335a:	4b89      	ldr	r3, [pc, #548]	; (8003580 <HAL_GPIO_Init+0x234>)
 800335c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800335e:	e194      	b.n	800368a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8186 	beq.w	8003684 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d005      	beq.n	8003390 <HAL_GPIO_Init+0x44>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c6:	2201      	movs	r2, #1
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d017      	beq.n	800342e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d123      	bne.n	8003482 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	69b9      	ldr	r1, [r7, #24]
 800347e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80e0 	beq.w	8003684 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <HAL_GPIO_Init+0x238>)
 80034c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_GPIO_Init+0x238>)
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_GPIO_Init+0x238>)
 80034d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e2:	4a29      	ldr	r2, [pc, #164]	; (8003588 <HAL_GPIO_Init+0x23c>)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	220f      	movs	r2, #15
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <HAL_GPIO_Init+0x240>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d052      	beq.n	80035b4 <HAL_GPIO_Init+0x268>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_GPIO_Init+0x244>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d031      	beq.n	800357a <HAL_GPIO_Init+0x22e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_GPIO_Init+0x248>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d02b      	beq.n	8003576 <HAL_GPIO_Init+0x22a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_GPIO_Init+0x24c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d025      	beq.n	8003572 <HAL_GPIO_Init+0x226>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_GPIO_Init+0x250>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01f      	beq.n	800356e <HAL_GPIO_Init+0x222>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_GPIO_Init+0x254>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x21e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_GPIO_Init+0x258>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x21a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_GPIO_Init+0x25c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x216>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_GPIO_Init+0x260>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x212>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_GPIO_Init+0x264>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x20e>
 8003556:	2309      	movs	r3, #9
 8003558:	e02d      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800355a:	230a      	movs	r3, #10
 800355c:	e02b      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800355e:	2308      	movs	r3, #8
 8003560:	e029      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 8003562:	2307      	movs	r3, #7
 8003564:	e027      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 8003566:	2306      	movs	r3, #6
 8003568:	e025      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800356a:	2305      	movs	r3, #5
 800356c:	e023      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800356e:	2304      	movs	r3, #4
 8003570:	e021      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 8003572:	2303      	movs	r3, #3
 8003574:	e01f      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 8003576:	2302      	movs	r3, #2
 8003578:	e01d      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800357a:	2301      	movs	r3, #1
 800357c:	e01b      	b.n	80035b6 <HAL_GPIO_Init+0x26a>
 800357e:	bf00      	nop
 8003580:	58000080 	.word	0x58000080
 8003584:	58024400 	.word	0x58024400
 8003588:	58000400 	.word	0x58000400
 800358c:	58020000 	.word	0x58020000
 8003590:	58020400 	.word	0x58020400
 8003594:	58020800 	.word	0x58020800
 8003598:	58020c00 	.word	0x58020c00
 800359c:	58021000 	.word	0x58021000
 80035a0:	58021400 	.word	0x58021400
 80035a4:	58021800 	.word	0x58021800
 80035a8:	58021c00 	.word	0x58021c00
 80035ac:	58022000 	.word	0x58022000
 80035b0:	58022400 	.word	0x58022400
 80035b4:	2300      	movs	r3, #0
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	f002 0203 	and.w	r2, r2, #3
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	4093      	lsls	r3, r2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c6:	4938      	ldr	r1, [pc, #224]	; (80036a8 <HAL_GPIO_Init+0x35c>)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f ae63 	bne.w	8003360 <HAL_GPIO_Init+0x14>
  }
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	3724      	adds	r7, #36	; 0x24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58000400 	.word	0x58000400

080036ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_HSEM_FastTake+0x2c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3320      	adds	r3, #32
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_HSEM_FastTake+0x30>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	58026400 	.word	0x58026400
 80036dc:	80000300 	.word	0x80000300

080036e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80036ea:	4906      	ldr	r1, [pc, #24]	; (8003704 <HAL_HSEM_Release+0x24>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	58026400 	.word	0x58026400

08003708 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b08f      	sub	sp, #60	; 0x3c
 800370c:	af0a      	add	r7, sp, #40	; 0x28
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e116      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f009 f9a9 	bl	800ca8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f005 fd92 	bl	8009282 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	687e      	ldr	r6, [r7, #4]
 8003766:	466d      	mov	r5, sp
 8003768:	f106 0410 	add.w	r4, r6, #16
 800376c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003778:	e885 0003 	stmia.w	r5, {r0, r1}
 800377c:	1d33      	adds	r3, r6, #4
 800377e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f005 fc5d 	bl	8009040 <USB_CoreInit>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0d7      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f005 fd80 	bl	80092a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e04a      	b.n	8003840 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	333d      	adds	r3, #61	; 0x3d
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	333c      	adds	r3, #60	; 0x3c
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	b298      	uxth	r0, r3
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3356      	adds	r3, #86	; 0x56
 80037e6:	4602      	mov	r2, r0
 80037e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3340      	adds	r3, #64	; 0x40
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	; 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3348      	adds	r3, #72	; 0x48
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334c      	adds	r3, #76	; 0x4c
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3301      	adds	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3af      	bcc.n	80037aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e044      	b.n	80038da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3b5      	bcc.n	8003850 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	687e      	ldr	r6, [r7, #4]
 80038ec:	466d      	mov	r5, sp
 80038ee:	f106 0410 	add.w	r4, r6, #16
 80038f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003902:	1d33      	adds	r3, r6, #4
 8003904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f005 fd18 	bl	800933c <USB_DevInit>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e014      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f001 f970 	bl	8004c1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f006 fd5a 	bl	800a3fa <USB_DevDisconnect>

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003950 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_PCD_Start+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e022      	b.n	80039b2 <HAL_PCD_Start+0x62>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f005 fc61 	bl	8009260 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f006 fd08 	bl	800a3b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039ba:	b590      	push	{r4, r7, lr}
 80039bc:	b08d      	sub	sp, #52	; 0x34
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f006 fdc6 	bl	800a562 <USB_GetMode>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 84b7 	bne.w	800434c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f006 fd2a 	bl	800a43c <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 84ad 	beq.w	800434a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f006 fd17 	bl	800a43c <USB_ReadInterrupts>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d107      	bne.n	8003a28 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f002 0202 	and.w	r2, r2, #2
 8003a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 fd05 	bl	800a43c <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d161      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0210 	bic.w	r2, r2, #16
 8003a4a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	0c5b      	lsrs	r3, r3, #17
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d124      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d035      	beq.n	8003af0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6a38      	ldr	r0, [r7, #32]
 8003a98:	f006 fb3c 	bl	800a114 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa8:	441a      	add	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aba:	441a      	add	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	e016      	b.n	8003af0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	0c5b      	lsrs	r3, r3, #17
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d110      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6a38      	ldr	r0, [r7, #32]
 8003ada:	f006 fb1b 	bl	800a114 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aea:	441a      	add	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0210 	orr.w	r2, r2, #16
 8003afe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f006 fc99 	bl	800a43c <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b14:	f040 80a7 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 fc9e 	bl	800a462 <USB_ReadDevAllOutEpInterrupt>
 8003b26:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b28:	e099      	b.n	8003c5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 808e 	beq.w	8003c52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f006 fcc2 	bl	800a4ca <USB_ReadDevOutEPInterrupt>
 8003b46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2301      	movs	r3, #1
 8003b62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fed2 	bl	8004910 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b82:	461a      	mov	r2, r3
 8003b84:	2308      	movs	r3, #8
 8003b86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 ffa8 	bl	8004ae0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2310      	movs	r3, #16
 8003baa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d030      	beq.n	8003c18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b80      	cmp	r3, #128	; 0x80
 8003bc0:	d109      	bne.n	8003bd6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	78db      	ldrb	r3, [r3, #3]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d108      	bne.n	8003c06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f009 f869 	bl	800ccd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	2302      	movs	r3, #2
 8003c16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2320      	movs	r3, #32
 8003c32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f af62 	bne.w	8003b2a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f006 fbe6 	bl	800a43c <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7a:	f040 80db 	bne.w	8003e34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f006 fc07 	bl	800a496 <USB_ReadDevAllInEpInterrupt>
 8003c88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c8e:	e0cd      	b.n	8003e2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80c2 	beq.w	8003e20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f006 fc2d 	bl	800a506 <USB_ReadDevInEPInterrupt>
 8003cac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d057      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2301      	movs	r3, #1
 8003cec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d132      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3348      	adds	r3, #72	; 0x48
 8003d06:	6819      	ldr	r1, [r3, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3344      	adds	r3, #68	; 0x44
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4419      	add	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	3348      	adds	r3, #72	; 0x48
 8003d2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d113      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x3a2>
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	334c      	adds	r3, #76	; 0x4c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d54:	461a      	mov	r2, r3
 8003d56:	2101      	movs	r1, #1
 8003d58:	f006 fc36 	bl	800a5c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f008 ff33 	bl	800cbce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2308      	movs	r3, #8
 8003d82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	461a      	mov	r2, r3
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d023      	beq.n	8003e0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc8:	6a38      	ldr	r0, [r7, #32]
 8003dca:	f005 fc15 	bl	80095f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	3338      	adds	r3, #56	; 0x38
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	78db      	ldrb	r3, [r3, #3]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d108      	bne.n	8003dfc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f008 ff80 	bl	800ccfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fcea 	bl	80047f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	3301      	adds	r3, #1
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f47f af2e 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f006 faff 	bl	800a43c <USB_ReadInterrupts>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e48:	d122      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e70:	2100      	movs	r1, #0
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fef6 	bl	8004c64 <HAL_PCDEx_LPM_Callback>
 8003e78:	e002      	b.n	8003e80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f008 ff1e 	bl	800ccbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f006 fad1 	bl	800a43c <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea4:	d112      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d102      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f008 feda 	bl	800cc70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f006 fab3 	bl	800a43c <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee0:	d121      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003ef0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f16:	2101      	movs	r1, #1
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fea3 	bl	8004c64 <HAL_PCDEx_LPM_Callback>
 8003f1e:	e002      	b.n	8003f26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f008 fea5 	bl	800cc70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f006 fa86 	bl	800a43c <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3a:	f040 80b7 	bne.w	80040ac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2110      	movs	r1, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 fb4d 	bl	80095f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f62:	e046      	b.n	8003ff2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	461a      	mov	r2, r3
 8003f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003faa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	3301      	adds	r3, #1
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d3b3      	bcc.n	8003f64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800400e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004028:	f043 030b 	orr.w	r3, r3, #11
 800402c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f043 030b 	orr.w	r3, r3, #11
 8004042:	6453      	str	r3, [r2, #68]	; 0x44
 8004044:	e015      	b.n	8004072 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004054:	4619      	mov	r1, r3
 8004056:	f242 032b 	movw	r3, #8235	; 0x202b
 800405a:	4313      	orrs	r3, r2
 800405c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406c:	f043 030b 	orr.w	r3, r3, #11
 8004070:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004080:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004084:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004096:	461a      	mov	r2, r3
 8004098:	f006 fa96 	bl	800a5c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f006 f9c3 	bl	800a43c <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c0:	d124      	bne.n	800410c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f006 fa5a 	bl	800a580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 fb0e 	bl	80096f2 <USB_GetDevSpeed>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681c      	ldr	r4, [r3, #0]
 80040e2:	f001 fdbf 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 80040e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	4620      	mov	r0, r4
 80040f2:	f005 f813 	bl	800911c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f008 fd91 	bl	800cc1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f006 f993 	bl	800a43c <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d10a      	bne.n	8004136 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f008 fd6e 	bl	800cc02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 0208 	and.w	r2, r2, #8
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f006 f97e 	bl	800a43c <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d122      	bne.n	8004190 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004156:	2301      	movs	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e014      	b.n	8004186 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fb09 	bl	8004792 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	3301      	adds	r3, #1
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	429a      	cmp	r2, r3
 800418e:	d3e5      	bcc.n	800415c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f006 f951 	bl	800a43c <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a4:	d13b      	bne.n	800421e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a6:	2301      	movs	r3, #1
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e02b      	b.n	8004204 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3340      	adds	r3, #64	; 0x40
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d115      	bne.n	80041fe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da12      	bge.n	80041fe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	333f      	adds	r3, #63	; 0x3f
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 faca 	bl	8004792 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	3301      	adds	r3, #1
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	429a      	cmp	r2, r3
 800420c:	d3ce      	bcc.n	80041ac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800421c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f006 f90a 	bl	800a43c <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004232:	d155      	bne.n	80042e0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004234:	2301      	movs	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
 8004238:	e045      	b.n	80042c6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d12e      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004262:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004264:	2b00      	cmp	r3, #0
 8004266:	da2b      	bge.n	80042c0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004274:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004278:	429a      	cmp	r2, r3
 800427a:	d121      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042bc:	6053      	str	r3, [r2, #4]
            break;
 80042be:	e007      	b.n	80042d0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	3301      	adds	r3, #1
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d3b4      	bcc.n	800423a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f006 f8a9 	bl	800a43c <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d10a      	bne.n	800430c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f008 fd12 	bl	800cd20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800430a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f006 f893 	bl	800a43c <USB_ReadInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d115      	bne.n	800434c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f008 fd02 	bl	800cd3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	e000      	b.n	800434c <HAL_PCD_IRQHandler+0x992>
      return;
 800434a:	bf00      	nop
    }
  }
}
 800434c:	3734      	adds	r7, #52	; 0x34
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}

08004352 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_PCD_SetAddress+0x1a>
 8004368:	2302      	movs	r3, #2
 800436a:	e013      	b.n	8004394 <HAL_PCD_SetAddress+0x42>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f005 fff1 	bl	800a36c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	70fb      	strb	r3, [r7, #3]
 80043ae:	460b      	mov	r3, r1
 80043b0:	803b      	strh	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da0f      	bge.n	80043e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	3338      	adds	r3, #56	; 0x38
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	3304      	adds	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	705a      	strb	r2, [r3, #1]
 80043e0:	e00f      	b.n	8004402 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800440e:	883a      	ldrh	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	78ba      	ldrb	r2, [r7, #2]
 8004418:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d102      	bne.n	8004438 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_EP_Open+0xaa>
 8004442:	2302      	movs	r3, #2
 8004444:	e00e      	b.n	8004464 <HAL_PCD_EP_Open+0xc8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f005 f971 	bl	800973c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004462:	7afb      	ldrb	r3, [r7, #11]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	da0f      	bge.n	80044a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	3338      	adds	r3, #56	; 0x38
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	705a      	strb	r2, [r3, #1]
 800449e:	e00f      	b.n	80044c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_PCD_EP_Close+0x6e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e00e      	b.n	80044f8 <HAL_PCD_EP_Close+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f005 f9af 	bl	800984c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	460b      	mov	r3, r1
 800450e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	3304      	adds	r3, #4
 8004528:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	b2da      	uxtb	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d102      	bne.n	800455c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	f005 fa4b 	bl	8009a04 <USB_EPStartXfer>

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	460b      	mov	r3, r1
 80045b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	f003 020f 	and.w	r2, r3, #15
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	3338      	adds	r3, #56	; 0x38
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	3304      	adds	r3, #4
 80045ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2201      	movs	r2, #1
 80045e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	f005 f9f8 	bl	8009a04 <USB_EPStartXfer>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d901      	bls.n	800463c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e050      	b.n	80046de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800463c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	da0f      	bge.n	8004664 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	3338      	adds	r3, #56	; 0x38
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	705a      	strb	r2, [r3, #1]
 8004662:	e00d      	b.n	8004680 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_PCD_EP_SetStall+0x82>
 800469c:	2302      	movs	r3, #2
 800469e:	e01e      	b.n	80046de <HAL_PCD_EP_SetStall+0xc0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f005 fd88 	bl	800a1c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	b2d9      	uxtb	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ce:	461a      	mov	r2, r3
 80046d0:	f005 ff7a 	bl	800a5c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	f003 020f 	and.w	r2, r3, #15
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d901      	bls.n	8004704 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e042      	b.n	800478a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004708:	2b00      	cmp	r3, #0
 800470a:	da0f      	bge.n	800472c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	f003 020f 	and.w	r2, r3, #15
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	3338      	adds	r3, #56	; 0x38
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	3304      	adds	r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	705a      	strb	r2, [r3, #1]
 800472a:	e00f      	b.n	800474c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	3304      	adds	r3, #4
 8004744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_PCD_EP_ClrStall+0x86>
 8004768:	2302      	movs	r3, #2
 800476a:	e00e      	b.n	800478a <HAL_PCD_EP_ClrStall+0xa4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	4618      	mov	r0, r3
 800477c:	f005 fd90 	bl	800a2a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800479e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da0c      	bge.n	80047c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	3338      	adds	r3, #56	; 0x38
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e00c      	b.n	80047da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 020f 	and.w	r2, r3, #15
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	3304      	adds	r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f005 fbaf 	bl	8009f44 <USB_EPStopXfer>
 80047e6:	4603      	mov	r3, r0
 80047e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047ea:	7afb      	ldrb	r3, [r7, #11]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3338      	adds	r3, #56	; 0x38
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	429a      	cmp	r2, r3
 8004826:	d901      	bls.n	800482c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e06c      	b.n	8004906 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3303      	adds	r3, #3
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004850:	e02b      	b.n	80048aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	429a      	cmp	r2, r3
 8004866:	d902      	bls.n	800486e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3303      	adds	r3, #3
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004886:	b2db      	uxtb	r3, r3
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4603      	mov	r3, r0
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f005 fc03 	bl	800a098 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	441a      	add	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d809      	bhi.n	80048d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d203      	bcs.n	80048d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1be      	bne.n	8004852 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d811      	bhi.n	8004904 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	2201      	movs	r2, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004900:	4013      	ands	r3, r2
 8004902:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	333c      	adds	r3, #60	; 0x3c
 8004928:	3304      	adds	r3, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d17b      	bne.n	8004a3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4a61      	ldr	r2, [pc, #388]	; (8004ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	f240 80b9 	bls.w	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80b3 	beq.w	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004978:	6093      	str	r3, [r2, #8]
 800497a:	e0a7      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	461a      	mov	r2, r3
 8004994:	2320      	movs	r3, #32
 8004996:	6093      	str	r3, [r2, #8]
 8004998:	e098      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 8093 	bne.w	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d90f      	bls.n	80049ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	461a      	mov	r2, r3
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	6093      	str	r3, [r2, #8]
 80049cc:	e07e      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	0159      	lsls	r1, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d114      	bne.n	8004a30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	f005 fdd4 	bl	800a5c8 <USB_EP0_OutStart>
 8004a20:	e006      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	441a      	add	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f008 f8ae 	bl	800cb98 <HAL_PCD_DataOutStageCallback>
 8004a3c:	e046      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4a26      	ldr	r2, [pc, #152]	; (8004adc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d124      	bne.n	8004a90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	e032      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2320      	movs	r3, #32
 8004a80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f008 f885 	bl	800cb98 <HAL_PCD_DataOutStageCallback>
 8004a8e:	e01d      	b.n	8004acc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d114      	bne.n	8004ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2100      	movs	r1, #0
 8004abc:	f005 fd84 	bl	800a5c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f008 f866 	bl	800cb98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	4f54300a 	.word	0x4f54300a
 8004adc:	4f54310a 	.word	0x4f54310a

08004ae0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	333c      	adds	r3, #60	; 0x3c
 8004af8:	3304      	adds	r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d90e      	bls.n	8004b34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f008 f81d 	bl	800cb74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d90c      	bls.n	8004b5c <PCD_EP_OutSetupPacket_int+0x7c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d108      	bne.n	8004b5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b54:	461a      	mov	r2, r3
 8004b56:	2101      	movs	r1, #1
 8004b58:	f005 fd36 	bl	800a5c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	4f54300a 	.word	0x4f54300a

08004b6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b8a:	883b      	ldrh	r3, [r7, #0]
 8004b8c:	0419      	lsls	r1, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
 8004b98:	e028      	b.n	8004bec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	e00d      	b.n	8004bca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	3340      	adds	r3, #64	; 0x40
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	7bfa      	ldrb	r2, [r7, #15]
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d3ec      	bcc.n	8004bae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bd4:	883b      	ldrh	r3, [r7, #0]
 8004bd6:	0418      	lsls	r0, r3, #16
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4302      	orrs	r2, r0
 8004be4:	3340      	adds	r3, #64	; 0x40
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	10000003 	.word	0x10000003

08004c64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	2b06      	cmp	r3, #6
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e040      	b.n	8004d24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e03e      	b.n	8004d24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ca6:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004cae:	491f      	ldr	r1, [pc, #124]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cb6:	f7fc f925 	bl	8000f04 <HAL_GetTick>
 8004cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cbc:	e009      	b.n	8004cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cbe:	f7fc f921 	bl	8000f04 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ccc:	d901      	bls.n	8004cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e028      	b.n	8004d24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cd2:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cde:	d1ee      	bne.n	8004cbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b1e      	cmp	r3, #30
 8004ce4:	d008      	beq.n	8004cf8 <HAL_PWREx_ConfigSupply+0x7c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cea:	d005      	beq.n	8004cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b1d      	cmp	r3, #29
 8004cf0:	d002      	beq.n	8004cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8004cf6:	d114      	bne.n	8004d22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004cf8:	f7fc f904 	bl	8000f04 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004cfe:	e009      	b.n	8004d14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d00:	f7fc f900 	bl	8000f04 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d0e:	d901      	bls.n	8004d14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e007      	b.n	8004d24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d1ee      	bne.n	8004d00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	58024800 	.word	0x58024800

08004d30 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	60d3      	str	r3, [r2, #12]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	58024800 	.word	0x58024800

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f000 bc48 	b.w	80055f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8088 	beq.w	8004e82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d72:	4b99      	ldr	r3, [pc, #612]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d7c:	4b96      	ldr	r3, [pc, #600]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d007      	beq.n	8004d98 <HAL_RCC_OscConfig+0x48>
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b18      	cmp	r3, #24
 8004d8c:	d111      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62>
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	4b8f      	ldr	r3, [pc, #572]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d06d      	beq.n	8004e80 <HAL_RCC_OscConfig+0x130>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d169      	bne.n	8004e80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f000 bc21 	b.w	80055f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x7a>
 8004dbc:	4b86      	ldr	r3, [pc, #536]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a85      	ldr	r2, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	e02e      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x9c>
 8004dd2:	4b81      	ldr	r3, [pc, #516]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a80      	ldr	r2, [pc, #512]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b7e      	ldr	r3, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7d      	ldr	r2, [pc, #500]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e01d      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0xc0>
 8004df6:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a74      	ldr	r2, [pc, #464]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004e10:	4b71      	ldr	r3, [pc, #452]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a70      	ldr	r2, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b6e      	ldr	r3, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6d      	ldr	r2, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc f868 	bl	8000f04 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fc f864 	bl	8000f04 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e3d4      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e4a:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0xe8>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc f854 	bl	8000f04 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fc f850 	bl	8000f04 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e3c0      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e72:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x110>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80ca 	beq.w	8005024 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e90:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x166>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2b18      	cmp	r3, #24
 8004eaa:	d156      	bne.n	8004f5a <HAL_RCC_OscConfig+0x20a>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d151      	bne.n	8004f5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb6:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_RCC_OscConfig+0x17e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e392      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ece:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 0219 	bic.w	r2, r3, #25
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	493f      	ldr	r1, [pc, #252]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc f810 	bl	8000f04 <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fc f80c 	bl	8000f04 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e37c      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	f7fc f82d 	bl	8000f64 <HAL_GetREVID>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d817      	bhi.n	8004f44 <HAL_RCC_OscConfig+0x1f4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d108      	bne.n	8004f2e <HAL_RCC_OscConfig+0x1de>
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2c:	e07a      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	031b      	lsls	r3, r3, #12
 8004f3c:	4926      	ldr	r1, [pc, #152]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f42:	e06f      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	4921      	ldr	r1, [pc, #132]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f58:	e064      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d047      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 0219 	bic.w	r2, r3, #25
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	491a      	ldr	r1, [pc, #104]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fb ffc6 	bl	8000f04 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fb ffc2 	bl	8000f04 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e332      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	f7fb ffe3 	bl	8000f64 <HAL_GetREVID>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d819      	bhi.n	8004fdc <HAL_RCC_OscConfig+0x28c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d108      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x272>
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fb8:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fbe:	6053      	str	r3, [r2, #4]
 8004fc0:	e030      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	031b      	lsls	r3, r3, #12
 8004fd0:	4901      	ldr	r1, [pc, #4]	; (8004fd8 <HAL_RCC_OscConfig+0x288>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
 8004fd6:	e025      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	4b9a      	ldr	r3, [pc, #616]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	4997      	ldr	r1, [pc, #604]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	e018      	b.n	8005024 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b95      	ldr	r3, [pc, #596]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a94      	ldr	r2, [pc, #592]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fb ff81 	bl	8000f04 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005006:	f7fb ff7d 	bl	8000f04 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e2ed      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005018:	4b8b      	ldr	r3, [pc, #556]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a9 	beq.w	8005184 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4b85      	ldr	r3, [pc, #532]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800503c:	4b82      	ldr	r3, [pc, #520]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d007      	beq.n	8005058 <HAL_RCC_OscConfig+0x308>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b18      	cmp	r3, #24
 800504c:	d13a      	bne.n	80050c4 <HAL_RCC_OscConfig+0x374>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d135      	bne.n	80050c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005058:	4b7b      	ldr	r3, [pc, #492]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x320>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e2c1      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005070:	f7fb ff78 	bl	8000f64 <HAL_GetREVID>
 8005074:	4603      	mov	r3, r0
 8005076:	f241 0203 	movw	r2, #4099	; 0x1003
 800507a:	4293      	cmp	r3, r2
 800507c:	d817      	bhi.n	80050ae <HAL_RCC_OscConfig+0x35e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	2b20      	cmp	r3, #32
 8005084:	d108      	bne.n	8005098 <HAL_RCC_OscConfig+0x348>
 8005086:	4b70      	ldr	r3, [pc, #448]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800508e:	4a6e      	ldr	r2, [pc, #440]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005094:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005096:	e075      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005098:	4b6b      	ldr	r3, [pc, #428]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	069b      	lsls	r3, r3, #26
 80050a6:	4968      	ldr	r1, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050ac:	e06a      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050ae:	4b66      	ldr	r3, [pc, #408]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	4962      	ldr	r1, [pc, #392]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050c2:	e05f      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d042      	beq.n	8005152 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050cc:	4b5e      	ldr	r3, [pc, #376]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5d      	ldr	r2, [pc, #372]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fb ff14 	bl	8000f04 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050e0:	f7fb ff10 	bl	8000f04 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e280      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050f2:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050fe:	f7fb ff31 	bl	8000f64 <HAL_GetREVID>
 8005102:	4603      	mov	r3, r0
 8005104:	f241 0203 	movw	r2, #4099	; 0x1003
 8005108:	4293      	cmp	r3, r2
 800510a:	d817      	bhi.n	800513c <HAL_RCC_OscConfig+0x3ec>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	2b20      	cmp	r3, #32
 8005112:	d108      	bne.n	8005126 <HAL_RCC_OscConfig+0x3d6>
 8005114:	4b4c      	ldr	r3, [pc, #304]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800511c:	4a4a      	ldr	r2, [pc, #296]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800511e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005122:	6053      	str	r3, [r2, #4]
 8005124:	e02e      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
 8005126:	4b48      	ldr	r3, [pc, #288]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	069b      	lsls	r3, r3, #26
 8005134:	4944      	ldr	r1, [pc, #272]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]
 800513a:	e023      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
 800513c:	4b42      	ldr	r3, [pc, #264]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	493f      	ldr	r1, [pc, #252]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800514c:	4313      	orrs	r3, r2
 800514e:	60cb      	str	r3, [r1, #12]
 8005150:	e018      	b.n	8005184 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005152:	4b3d      	ldr	r3, [pc, #244]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3c      	ldr	r2, [pc, #240]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fb fed1 	bl	8000f04 <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005166:	f7fb fecd 	bl	8000f04 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e23d      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005178:	4b33      	ldr	r3, [pc, #204]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d036      	beq.n	80051fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d019      	beq.n	80051cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005198:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800519a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519c:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fb feae 	bl	8000f04 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ac:	f7fb feaa 	bl	8000f04 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e21a      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x45c>
 80051ca:	e018      	b.n	80051fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fb fe94 	bl	8000f04 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fb fe90 	bl	8000f04 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e200      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d039      	beq.n	800527e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01c      	beq.n	800524c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 8005218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800521c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800521e:	f7fb fe71 	bl	8000f04 <HAL_GetTick>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005226:	f7fb fe6d 	bl	8000f04 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1dd      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCC_OscConfig+0x4f8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x4d6>
 8005244:	e01b      	b.n	800527e <HAL_RCC_OscConfig+0x52e>
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800524c:	4b9b      	ldr	r3, [pc, #620]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a9a      	ldr	r2, [pc, #616]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005256:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005258:	f7fb fe54 	bl	8000f04 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005260:	f7fb fe50 	bl	8000f04 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e1c0      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005272:	4b92      	ldr	r3, [pc, #584]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8081 	beq.w	800538e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800528c:	4b8c      	ldr	r3, [pc, #560]	; (80054c0 <HAL_RCC_OscConfig+0x770>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a8b      	ldr	r2, [pc, #556]	; (80054c0 <HAL_RCC_OscConfig+0x770>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005298:	f7fb fe34 	bl	8000f04 <HAL_GetTick>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a0:	f7fb fe30 	bl	8000f04 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	; 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e1a0      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b2:	4b83      	ldr	r3, [pc, #524]	; (80054c0 <HAL_RCC_OscConfig+0x770>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d106      	bne.n	80052d4 <HAL_RCC_OscConfig+0x584>
 80052c6:	4b7d      	ldr	r3, [pc, #500]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
 80052d2:	e02d      	b.n	8005330 <HAL_RCC_OscConfig+0x5e0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10c      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5a6>
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4a76      	ldr	r2, [pc, #472]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	; 0x70
 80052e8:	4b74      	ldr	r3, [pc, #464]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	4a73      	ldr	r2, [pc, #460]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80052ee:	f023 0304 	bic.w	r3, r3, #4
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
 80052f4:	e01c      	b.n	8005330 <HAL_RCC_OscConfig+0x5e0>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c8>
 80052fe:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a6e      	ldr	r2, [pc, #440]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6713      	str	r3, [r2, #112]	; 0x70
 800530a:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a6b      	ldr	r2, [pc, #428]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0x5e0>
 8005318:	4b68      	ldr	r3, [pc, #416]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531c:	4a67      	ldr	r2, [pc, #412]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	; 0x70
 8005324:	4b65      	ldr	r3, [pc, #404]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	4a64      	ldr	r2, [pc, #400]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fb fde4 	bl	8000f04 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fb fde0 	bl	8000f04 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e14e      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005356:	4b59      	ldr	r3, [pc, #356]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RCC_OscConfig+0x5f0>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fb fdce 	bl	8000f04 <HAL_GetTick>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fb fdca 	bl	8000f04 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e138      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005382:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ee      	bne.n	800536c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 812d 	beq.w	80055f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a0:	2b18      	cmp	r3, #24
 80053a2:	f000 80bd 	beq.w	8005520 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	f040 809e 	bne.w	80054ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a41      	ldr	r2, [pc, #260]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80053b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fb fda2 	bl	8000f04 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fb fd9e 	bl	8000f04 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e10e      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e2:	4b36      	ldr	r3, [pc, #216]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <HAL_RCC_OscConfig+0x774>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	430a      	orrs	r2, r1
 80053f6:	4931      	ldr	r1, [pc, #196]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	628b      	str	r3, [r1, #40]	; 0x28
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	3b01      	subs	r3, #1
 8005402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	3b01      	subs	r3, #1
 800540c:	025b      	lsls	r3, r3, #9
 800540e:	b29b      	uxth	r3, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	3b01      	subs	r3, #1
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	3b01      	subs	r3, #1
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800542c:	4923      	ldr	r1, [pc, #140]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800543e:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <HAL_RCC_OscConfig+0x778>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800544a:	00d2      	lsls	r2, r2, #3
 800544c:	491b      	ldr	r1, [pc, #108]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800544e:	4313      	orrs	r3, r2
 8005450:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005452:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f023 020c 	bic.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	4917      	ldr	r1, [pc, #92]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005464:	4b15      	ldr	r3, [pc, #84]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f023 0202 	bic.w	r2, r3, #2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	4912      	ldr	r1, [pc, #72]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 8005494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800549a:	4b08      	ldr	r3, [pc, #32]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	4a07      	ldr	r2, [pc, #28]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a04      	ldr	r2, [pc, #16]	; (80054bc <HAL_RCC_OscConfig+0x76c>)
 80054ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fb fd27 	bl	8000f04 <HAL_GetTick>
 80054b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b8:	e011      	b.n	80054de <HAL_RCC_OscConfig+0x78e>
 80054ba:	bf00      	nop
 80054bc:	58024400 	.word	0x58024400
 80054c0:	58024800 	.word	0x58024800
 80054c4:	fffffc0c 	.word	0xfffffc0c
 80054c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fb fd1a 	bl	8000f04 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e08a      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x77c>
 80054ea:	e082      	b.n	80055f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80054f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fb fd04 	bl	8000f04 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fb fd00 	bl	8000f04 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e070      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005512:	4b3a      	ldr	r3, [pc, #232]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x7b0>
 800551e:	e068      	b.n	80055f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005526:	4b35      	ldr	r3, [pc, #212]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2b01      	cmp	r3, #1
 8005532:	d031      	beq.n	8005598 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d12a      	bne.n	8005598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d122      	bne.n	8005598 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d11a      	bne.n	8005598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d111      	bne.n	8005598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d108      	bne.n	8005598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	0e1b      	lsrs	r3, r3, #24
 800558a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e02b      	b.n	80055f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d01f      	beq.n	80055f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	4a11      	ldr	r2, [pc, #68]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055be:	f7fb fca1 	bl	8000f04 <HAL_GetTick>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80055c4:	bf00      	nop
 80055c6:	f7fb fc9d 	bl	8000f04 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d0f9      	beq.n	80055c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_RCC_OscConfig+0x8b0>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055de:	00d2      	lsls	r2, r2, #3
 80055e0:	4906      	ldr	r1, [pc, #24]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	4a04      	ldr	r2, [pc, #16]	; (80055fc <HAL_RCC_OscConfig+0x8ac>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3730      	adds	r7, #48	; 0x30
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	58024400 	.word	0x58024400
 8005600:	ffff0007 	.word	0xffff0007

08005604 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e19c      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b8a      	ldr	r3, [pc, #552]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d910      	bls.n	8005648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b87      	ldr	r3, [pc, #540]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 020f 	bic.w	r2, r3, #15
 800562e:	4985      	ldr	r1, [pc, #532]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b83      	ldr	r3, [pc, #524]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e184      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005660:	429a      	cmp	r2, r3
 8005662:	d908      	bls.n	8005676 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005664:	4b78      	ldr	r3, [pc, #480]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4975      	ldr	r1, [pc, #468]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	4b70      	ldr	r3, [pc, #448]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800568e:	429a      	cmp	r2, r3
 8005690:	d908      	bls.n	80056a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005692:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	496a      	ldr	r1, [pc, #424]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	4b64      	ldr	r3, [pc, #400]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056bc:	429a      	cmp	r2, r3
 80056be:	d908      	bls.n	80056d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056c0:	4b61      	ldr	r3, [pc, #388]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	495e      	ldr	r1, [pc, #376]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d908      	bls.n	8005700 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056ee:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4953      	ldr	r1, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	4b4d      	ldr	r3, [pc, #308]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	429a      	cmp	r2, r3
 800571a:	d908      	bls.n	800572e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f023 020f 	bic.w	r2, r3, #15
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4947      	ldr	r1, [pc, #284]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 800572a:	4313      	orrs	r3, r2
 800572c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d055      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800573a:	4b43      	ldr	r3, [pc, #268]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4940      	ldr	r1, [pc, #256]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005748:	4313      	orrs	r3, r2
 800574a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d107      	bne.n	8005764 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005754:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d121      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0f6      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d107      	bne.n	800577c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800576c:	4b36      	ldr	r3, [pc, #216]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d115      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0ea      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d107      	bne.n	8005794 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005784:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0de      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005794:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0d6      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057a4:	4b28      	ldr	r3, [pc, #160]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f023 0207 	bic.w	r2, r3, #7
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4925      	ldr	r1, [pc, #148]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b6:	f7fb fba5 	bl	8000f04 <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057be:	f7fb fba1 	bl	8000f04 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0be      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d4:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d1eb      	bne.n	80057be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	429a      	cmp	r2, r3
 8005800:	d208      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f023 020f 	bic.w	r2, r3, #15
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x244>)
 8005810:	4313      	orrs	r3, r2
 8005812:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d214      	bcs.n	800584c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 020f 	bic.w	r2, r3, #15
 800582a:	4906      	ldr	r1, [pc, #24]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b04      	ldr	r3, [pc, #16]	; (8005844 <HAL_RCC_ClockConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d005      	beq.n	800584c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e086      	b.n	8005952 <HAL_RCC_ClockConfig+0x34e>
 8005844:	52002000 	.word	0x52002000
 8005848:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d010      	beq.n	800587a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	4b3f      	ldr	r3, [pc, #252]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005864:	429a      	cmp	r2, r3
 8005866:	d208      	bcs.n	800587a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005868:	4b3c      	ldr	r3, [pc, #240]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	4939      	ldr	r1, [pc, #228]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 8005876:	4313      	orrs	r3, r2
 8005878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	4b34      	ldr	r3, [pc, #208]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005892:	429a      	cmp	r2, r3
 8005894:	d208      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005896:	4b31      	ldr	r3, [pc, #196]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	492e      	ldr	r1, [pc, #184]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d208      	bcs.n	80058d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	4922      	ldr	r1, [pc, #136]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	4b1d      	ldr	r3, [pc, #116]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d208      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4917      	ldr	r1, [pc, #92]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 8005900:	4313      	orrs	r3, r2
 8005902:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005904:	f000 f834 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4912      	ldr	r1, [pc, #72]	; (8005960 <HAL_RCC_ClockConfig+0x35c>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005922:	4b0e      	ldr	r3, [pc, #56]	; (800595c <HAL_RCC_ClockConfig+0x358>)
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <HAL_RCC_ClockConfig+0x35c>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x360>)
 800593a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800593c:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <HAL_RCC_ClockConfig+0x364>)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_RCC_ClockConfig+0x368>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fb fa92 	bl	8000e70 <HAL_InitTick>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	0800dbf0 	.word	0x0800dbf0
 8005964:	24000004 	.word	0x24000004
 8005968:	24000000 	.word	0x24000000
 800596c:	24000008 	.word	0x24000008

08005970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	; 0x24
 8005974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005976:	4bb3      	ldr	r3, [pc, #716]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597e:	2b18      	cmp	r3, #24
 8005980:	f200 8155 	bhi.w	8005c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059f1 	.word	0x080059f1
 8005990:	08005c2f 	.word	0x08005c2f
 8005994:	08005c2f 	.word	0x08005c2f
 8005998:	08005c2f 	.word	0x08005c2f
 800599c:	08005c2f 	.word	0x08005c2f
 80059a0:	08005c2f 	.word	0x08005c2f
 80059a4:	08005c2f 	.word	0x08005c2f
 80059a8:	08005c2f 	.word	0x08005c2f
 80059ac:	08005a17 	.word	0x08005a17
 80059b0:	08005c2f 	.word	0x08005c2f
 80059b4:	08005c2f 	.word	0x08005c2f
 80059b8:	08005c2f 	.word	0x08005c2f
 80059bc:	08005c2f 	.word	0x08005c2f
 80059c0:	08005c2f 	.word	0x08005c2f
 80059c4:	08005c2f 	.word	0x08005c2f
 80059c8:	08005c2f 	.word	0x08005c2f
 80059cc:	08005a1d 	.word	0x08005a1d
 80059d0:	08005c2f 	.word	0x08005c2f
 80059d4:	08005c2f 	.word	0x08005c2f
 80059d8:	08005c2f 	.word	0x08005c2f
 80059dc:	08005c2f 	.word	0x08005c2f
 80059e0:	08005c2f 	.word	0x08005c2f
 80059e4:	08005c2f 	.word	0x08005c2f
 80059e8:	08005c2f 	.word	0x08005c2f
 80059ec:	08005a23 	.word	0x08005a23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059f0:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059fc:	4b91      	ldr	r3, [pc, #580]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	08db      	lsrs	r3, r3, #3
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a0e:	e111      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a10:	4b8d      	ldr	r3, [pc, #564]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a12:	61bb      	str	r3, [r7, #24]
      break;
 8005a14:	e10e      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a16:	4b8d      	ldr	r3, [pc, #564]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a18:	61bb      	str	r3, [r7, #24]
      break;
 8005a1a:	e10b      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a1c:	4b8c      	ldr	r3, [pc, #560]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a1e:	61bb      	str	r3, [r7, #24]
      break;
 8005a20:	e108      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a22:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a2c:	4b85      	ldr	r3, [pc, #532]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a38:	4b82      	ldr	r3, [pc, #520]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a42:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80e1 	beq.w	8005c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	f000 8083 	beq.w	8005b74 <HAL_RCC_GetSysClockFreq+0x204>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	f200 80a1 	bhi.w	8005bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x114>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d056      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a82:	e099      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a84:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d02d      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a90:	4b6c      	ldr	r3, [pc, #432]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	08db      	lsrs	r3, r3, #3
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	4a6b      	ldr	r2, [pc, #428]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b62      	ldr	r3, [pc, #392]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ace:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005aea:	e087      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b51      	ldr	r3, [pc, #324]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b2e:	e065      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b72:	e043      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bb6:	e021      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bca:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	0a5b      	lsrs	r3, r3, #9
 8005c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c06:	3301      	adds	r3, #1
 8005c08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c20:	ee17 3a90 	vmov	r3, s15
 8005c24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c26:	e005      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
      break;
 8005c2c:	e002      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c30:	61bb      	str	r3, [r7, #24]
      break;
 8005c32:	bf00      	nop
  }

  return sysclockfreq;
 8005c34:	69bb      	ldr	r3, [r7, #24]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	58024400 	.word	0x58024400
 8005c48:	03d09000 	.word	0x03d09000
 8005c4c:	003d0900 	.word	0x003d0900
 8005c50:	017d7840 	.word	0x017d7840
 8005c54:	46000000 	.word	0x46000000
 8005c58:	4c742400 	.word	0x4c742400
 8005c5c:	4a742400 	.word	0x4a742400
 8005c60:	4bbebc20 	.word	0x4bbebc20

08005c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c6a:	f7ff fe81 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	490f      	ldr	r1, [pc, #60]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c7c:	5ccb      	ldrb	r3, [r1, r3]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c92:	5cd3      	ldrb	r3, [r2, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	0800dbf0 	.word	0x0800dbf0
 8005cbc:	24000004 	.word	0x24000004
 8005cc0:	24000000 	.word	0x24000000

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005cc8:	f7ff ffcc 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4904      	ldr	r1, [pc, #16]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	0800dbf0 	.word	0x0800dbf0

08005cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005cf4:	f7ff ffb6 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4904      	ldr	r1, [pc, #16]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	58024400 	.word	0x58024400
 8005d18:	0800dbf0 	.word	0x0800dbf0

08005d1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d20:	b0cc      	sub	sp, #304	; 0x130
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005d40:	2500      	movs	r5, #0
 8005d42:	ea54 0305 	orrs.w	r3, r4, r5
 8005d46:	d049      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d52:	d02f      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d58:	d828      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d5e:	d01a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d64:	d822      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d007      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d70:	e01c      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d72:	4bb8      	ldr	r3, [pc, #736]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	4ab7      	ldr	r2, [pc, #732]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d7e:	e01a      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d84:	3308      	adds	r3, #8
 8005d86:	2102      	movs	r1, #2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 fccf 	bl	800772c <RCCEx_PLL2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d94:	e00f      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d9a:	3328      	adds	r3, #40	; 0x28
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fd76 	bl	8007890 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005dbe:	4ba5      	ldr	r3, [pc, #660]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dcc:	4aa1      	ldr	r2, [pc, #644]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8005dd2:	e003      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005de8:	f04f 0900 	mov.w	r9, #0
 8005dec:	ea58 0309 	orrs.w	r3, r8, r9
 8005df0:	d047      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d82a      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e19 	.word	0x08005e19
 8005e08:	08005e27 	.word	0x08005e27
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e5b 	.word	0x08005e5b
 8005e14:	08005e5b 	.word	0x08005e5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e18:	4b8e      	ldr	r3, [pc, #568]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	4a8d      	ldr	r2, [pc, #564]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e24:	e01a      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 fc7c 	bl	800772c <RCCEx_PLL2_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e3a:	e00f      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e40:	3328      	adds	r3, #40	; 0x28
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fd23 	bl	8007890 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e50:	e004      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e64:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	f023 0107 	bic.w	r1, r3, #7
 8005e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e72:	4a78      	ldr	r2, [pc, #480]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6513      	str	r3, [r2, #80]	; 0x50
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e7e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005e8e:	f04f 0b00 	mov.w	fp, #0
 8005e92:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e96:	d04c      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea2:	d030      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	d829      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8005eac:	d02d      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005eae:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb0:	d825      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005eb2:	2b80      	cmp	r3, #128	; 0x80
 8005eb4:	d018      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d821      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005ec2:	e01c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b63      	ldr	r3, [pc, #396]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a62      	ldr	r2, [pc, #392]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fc26 	bl	800772c <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eec:	3328      	adds	r3, #40	; 0x28
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fccd 	bl	8007890 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f14:	4b4f      	ldr	r3, [pc, #316]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	4a4c      	ldr	r2, [pc, #304]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6513      	str	r3, [r2, #80]	; 0x50
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005f3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f48:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d053      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f5e:	d035      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f64:	d82e      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f6a:	d031      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f70:	d828      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f76:	d01a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f7c:	d822      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f86:	d007      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f88:	e01c      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8a:	4b32      	ldr	r3, [pc, #200]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4a31      	ldr	r2, [pc, #196]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f96:	e01c      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 fbc3 	bl	800772c <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fac:	e011      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fb2:	3328      	adds	r3, #40	; 0x28
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fc6a 	bl	8007890 <RCCEx_PLL3_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fc2:	e006      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005fca:	e002      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fda:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fea:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ff6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006006:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006010:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d056      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800601a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800601e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006026:	d038      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800602c:	d831      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800602e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006032:	d034      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006038:	d82b      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800603a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800603e:	d01d      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006044:	d825      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800604a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800604e:	d00a      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006050:	e01f      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006052:	bf00      	nop
 8006054:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4ba2      	ldr	r3, [pc, #648]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4aa1      	ldr	r2, [pc, #644]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006064:	e01c      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800606a:	3308      	adds	r3, #8
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fb5c 	bl	800772c <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800607a:	e011      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800607c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006080:	3328      	adds	r3, #40	; 0x28
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fc03 	bl	8007890 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800609e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060a8:	4b8e      	ldr	r3, [pc, #568]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80060b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b8:	4a8a      	ldr	r2, [pc, #552]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	6593      	str	r3, [r2, #88]	; 0x58
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80060d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80060e2:	460b      	mov	r3, r1
 80060e4:	4313      	orrs	r3, r2
 80060e6:	d03a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80060e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ee:	2b30      	cmp	r3, #48	; 0x30
 80060f0:	d01f      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d819      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d00c      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d815      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d019      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006102:	2b10      	cmp	r3, #16
 8006104:	d111      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006106:	4b77      	ldr	r3, [pc, #476]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	4a76      	ldr	r2, [pc, #472]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800610c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006112:	e011      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006118:	3308      	adds	r3, #8
 800611a:	2102      	movs	r1, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fb05 	bl	800772c <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006128:	e006      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006130:	e002      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006138:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006140:	4b68      	ldr	r3, [pc, #416]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006144:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	4a65      	ldr	r2, [pc, #404]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006150:	430b      	orrs	r3, r1
 8006152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800615a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800616a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006174:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d051      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006188:	d035      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618e:	d82e      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006194:	d031      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800619a:	d828      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800619c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a0:	d01a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	d822      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d007      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80061b2:	e01c      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4b4b      	ldr	r3, [pc, #300]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4a4a      	ldr	r2, [pc, #296]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061c0:	e01c      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c6:	3308      	adds	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 faae 	bl	800772c <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061d6:	e011      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061dc:	3328      	adds	r3, #40	; 0x28
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fb55 	bl	8007890 <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ec:	e006      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061f4:	e002      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006204:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800620c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006212:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6513      	str	r3, [r2, #80]	; 0x50
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800621e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800622e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006238:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d056      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800624c:	d033      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800624e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006252:	d82c      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006258:	d02f      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800625a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800625e:	d826      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006264:	d02b      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006266:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800626a:	d820      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800626c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006270:	d012      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006276:	d81a      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d022      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d115      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006286:	3308      	adds	r3, #8
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fa4e 	bl	800772c <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006296:	e015      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006298:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800629c:	3328      	adds	r3, #40	; 0x28
 800629e:	2101      	movs	r1, #1
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 faf5 	bl	8007890 <RCCEx_PLL3_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062ac:	e00a      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80062b4:	e006      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062b6:	bf00      	nop
 80062b8:	e004      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062ba:	bf00      	nop
 80062bc:	e002      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062da:	4a02      	ldr	r2, [pc, #8]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	6513      	str	r3, [r2, #80]	; 0x50
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80062fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006306:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	d055      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800631c:	d033      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800631e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006322:	d82c      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d02f      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632e:	d826      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006330:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006334:	d02b      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800633a:	d820      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800633c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006340:	d012      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006346:	d81a      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d022      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800634c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006350:	d115      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006356:	3308      	adds	r3, #8
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f001 f9e6 	bl	800772c <RCCEx_PLL2_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006366:	e015      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800636c:	3328      	adds	r3, #40	; 0x28
 800636e:	2101      	movs	r1, #1
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fa8d 	bl	8007890 <RCCEx_PLL3_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800637c:	e00a      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006384:	e006      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006386:	bf00      	nop
 8006388:	e004      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800638a:	bf00      	nop
 800638c:	e002      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800638e:	bf00      	nop
 8006390:	e000      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006394:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800639c:	4bb6      	ldr	r3, [pc, #728]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80063a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063ac:	4ab2      	ldr	r2, [pc, #712]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80063ae:	430b      	orrs	r3, r1
 80063b0:	6593      	str	r3, [r2, #88]	; 0x58
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80063bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80063c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063cc:	2300      	movs	r3, #0
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4313      	orrs	r3, r2
 80063da:	d02a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80063dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80063e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ea:	d10a      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063f0:	3308      	adds	r3, #8
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 f999 	bl	800772c <RCCEx_PLL2_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006400:	e004      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006408:	e000      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006414:	4b98      	ldr	r3, [pc, #608]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006418:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800641c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	4a95      	ldr	r2, [pc, #596]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006424:	430b      	orrs	r3, r1
 8006426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800642e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800643e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006448:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d037      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645c:	d00e      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800645e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006462:	d816      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d018      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646c:	d111      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646e:	4b82      	ldr	r3, [pc, #520]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	4a81      	ldr	r2, [pc, #516]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800647a:	e00f      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800647c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006480:	3308      	adds	r3, #8
 8006482:	2101      	movs	r1, #1
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f951 	bl	800772c <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006490:	e004      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800649a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064a4:	4b74      	ldr	r3, [pc, #464]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80064ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	4a71      	ldr	r2, [pc, #452]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6513      	str	r3, [r2, #80]	; 0x50
 80064b8:	e003      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80064ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d2:	2300      	movs	r3, #0
 80064d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80064dc:	460b      	mov	r3, r1
 80064de:	4313      	orrs	r3, r2
 80064e0:	d03a      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80064e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d81d      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006505 	.word	0x08006505
 80064fc:	08006513 	.word	0x08006513
 8006500:	08006531 	.word	0x08006531
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b5c      	ldr	r3, [pc, #368]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a5b      	ldr	r2, [pc, #364]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006510:	e00f      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006516:	3308      	adds	r3, #8
 8006518:	2102      	movs	r1, #2
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f906 	bl	800772c <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800653a:	4b4f      	ldr	r3, [pc, #316]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f023 0103 	bic.w	r1, r3, #3
 8006542:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006548:	4a4b      	ldr	r2, [pc, #300]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800654a:	430b      	orrs	r3, r1
 800654c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006554:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800656e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	f000 80a0 	beq.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657a:	4b40      	ldr	r3, [pc, #256]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a3f      	ldr	r2, [pc, #252]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006586:	f7fa fcbd 	bl	8000f04 <HAL_GetTick>
 800658a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800658e:	e00b      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006590:	f7fa fcb8 	bl	8000f04 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b64      	cmp	r3, #100	; 0x64
 800659e:	d903      	bls.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80065a6:	e005      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a8:	4b34      	ldr	r3, [pc, #208]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ed      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80065b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d17a      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065bc:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065c8:	4053      	eors	r3, r2
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d015      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	4a25      	ldr	r2, [pc, #148]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	4a22      	ldr	r2, [pc, #136]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065f6:	4a20      	ldr	r2, [pc, #128]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660a:	d118      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fa fc7a 	bl	8000f04 <HAL_GetTick>
 8006610:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006614:	e00d      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006616:	f7fa fc75 	bl	8000f04 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006620:	1ad2      	subs	r2, r2, r3
 8006622:	f241 3388 	movw	r3, #5000	; 0x1388
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8006630:	e005      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0eb      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800663e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006642:	2b00      	cmp	r3, #0
 8006644:	d130      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800664a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006656:	d115      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006668:	091a      	lsrs	r2, r3, #4
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800666c:	4013      	ands	r3, r2
 800666e:	4a02      	ldr	r2, [pc, #8]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6113      	str	r3, [r2, #16]
 8006674:	e00c      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400
 800667c:	58024800 	.word	0x58024800
 8006680:	00ffffcf 	.word	0x00ffffcf
 8006684:	4bd4      	ldr	r3, [pc, #848]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4ad3      	ldr	r2, [pc, #844]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800668a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800668e:	6113      	str	r3, [r2, #16]
 8006690:	4bd1      	ldr	r3, [pc, #836]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006692:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800669c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a0:	4acd      	ldr	r2, [pc, #820]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6713      	str	r3, [r2, #112]	; 0x70
 80066a6:	e008      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80066b0:	e003      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f002 0301 	and.w	r3, r2, #1
 80066c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ca:	2300      	movs	r3, #0
 80066cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f000 808b 	beq.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80066dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e4:	2b28      	cmp	r3, #40	; 0x28
 80066e6:	d86b      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	080067c9 	.word	0x080067c9
 80066f4:	080067c1 	.word	0x080067c1
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	080067c1 	.word	0x080067c1
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	080067c1 	.word	0x080067c1
 8006710:	08006795 	.word	0x08006795
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067c1 	.word	0x080067c1
 8006730:	080067ab 	.word	0x080067ab
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067c1 	.word	0x080067c1
 8006750:	080067c9 	.word	0x080067c9
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067c9 	.word	0x080067c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006798:	3308      	adds	r3, #8
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f000 ffc5 	bl	800772c <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067a8:	e00f      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067ae:	3328      	adds	r3, #40	; 0x28
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f86c 	bl	8007890 <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067be:	e004      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80067c6:	e000      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067d2:	4b81      	ldr	r3, [pc, #516]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80067da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e2:	4a7d      	ldr	r2, [pc, #500]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6553      	str	r3, [r2, #84]	; 0x54
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f002 0302 	and.w	r3, r2, #2
 80067fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006808:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d042      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006818:	2b05      	cmp	r3, #5
 800681a:	d825      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006871 	.word	0x08006871
 8006828:	0800683d 	.word	0x0800683d
 800682c:	08006853 	.word	0x08006853
 8006830:	08006871 	.word	0x08006871
 8006834:	08006871 	.word	0x08006871
 8006838:	08006871 	.word	0x08006871
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800683c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006840:	3308      	adds	r3, #8
 8006842:	2101      	movs	r1, #1
 8006844:	4618      	mov	r0, r3
 8006846:	f000 ff71 	bl	800772c <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006850:	e00f      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006856:	3328      	adds	r3, #40	; 0x28
 8006858:	2101      	movs	r1, #1
 800685a:	4618      	mov	r0, r3
 800685c:	f001 f818 	bl	8007890 <RCCEx_PLL3_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006866:	e004      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800686e:	e000      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006872:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800687a:	4b57      	ldr	r3, [pc, #348]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f023 0107 	bic.w	r1, r3, #7
 8006882:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006888:	4a53      	ldr	r2, [pc, #332]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800688a:	430b      	orrs	r3, r1
 800688c:	6553      	str	r3, [r2, #84]	; 0x54
 800688e:	e003      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006894:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006898:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f002 0304 	and.w	r3, r2, #4
 80068a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d044      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c0:	2b05      	cmp	r3, #5
 80068c2:	d825      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	08006919 	.word	0x08006919
 80068d0:	080068e5 	.word	0x080068e5
 80068d4:	080068fb 	.word	0x080068fb
 80068d8:	08006919 	.word	0x08006919
 80068dc:	08006919 	.word	0x08006919
 80068e0:	08006919 	.word	0x08006919
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068e8:	3308      	adds	r3, #8
 80068ea:	2101      	movs	r1, #1
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 ff1d 	bl	800772c <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068f8:	e00f      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068fe:	3328      	adds	r3, #40	; 0x28
 8006900:	2101      	movs	r1, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f000 ffc4 	bl	8007890 <RCCEx_PLL3_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006922:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	f023 0107 	bic.w	r1, r3, #7
 800692a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800692e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006932:	4a29      	ldr	r2, [pc, #164]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6593      	str	r3, [r2, #88]	; 0x58
 8006938:	e003      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800693e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f002 0320 	and.w	r3, r2, #32
 800694e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006952:	2300      	movs	r3, #0
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d057      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800696e:	d035      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006974:	d82c      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d031      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d826      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006986:	d02d      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800698c:	d820      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800698e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006998:	d81a      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d024      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800699e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a2:	d115      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069a8:	3308      	adds	r3, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 febd 	bl	800772c <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069b8:	e017      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069be:	3328      	adds	r3, #40	; 0x28
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 ff64 	bl	8007890 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069ce:	e00c      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80069d8:	58024400 	.word	0x58024400
        break;
 80069dc:	bf00      	nop
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069f2:	4bc2      	ldr	r3, [pc, #776]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80069fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a02:	4abe      	ldr	r2, [pc, #760]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6553      	str	r3, [r2, #84]	; 0x54
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	d055      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a3e:	d033      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a44:	d82c      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4a:	d02f      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a50:	d826      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a56:	d02b      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5c:	d820      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a62:	d012      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d81a      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d022      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d115      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a78:	3308      	adds	r3, #8
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fe55 	bl	800772c <RCCEx_PLL2_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a88:	e015      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a8e:	3328      	adds	r3, #40	; 0x28
 8006a90:	2102      	movs	r1, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fefc 	bl	8007890 <RCCEx_PLL3_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006aa6:	e006      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006aa8:	bf00      	nop
 8006aaa:	e004      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006aac:	bf00      	nop
 8006aae:	e002      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006ab0:	bf00      	nop
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006abe:	4b8f      	ldr	r3, [pc, #572]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ace:	4a8b      	ldr	r2, [pc, #556]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ad4:	e003      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ada:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006aea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006af4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006af8:	460b      	mov	r3, r1
 8006afa:	4313      	orrs	r3, r2
 8006afc:	d055      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b0a:	d033      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b10:	d82c      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b16:	d02f      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1c:	d826      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b22:	d02b      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b28:	d820      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b2e:	d012      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b34:	d81a      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d022      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3e:	d115      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b44:	3308      	adds	r3, #8
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fdef 	bl	800772c <RCCEx_PLL2_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b54:	e015      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b5a:	3328      	adds	r3, #40	; 0x28
 8006b5c:	2102      	movs	r1, #2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fe96 	bl	8007890 <RCCEx_PLL3_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006b72:	e006      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006b74:	bf00      	nop
 8006b76:	e004      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006b78:	bf00      	nop
 8006b7a:	e002      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006b7c:	bf00      	nop
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b9a:	4a58      	ldr	r2, [pc, #352]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8006ba0:	e003      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ba6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f002 0308 	and.w	r3, r2, #8
 8006bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bc0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	d01e      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	d10c      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bdc:	3328      	adds	r3, #40	; 0x28
 8006bde:	2102      	movs	r1, #2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fe55 	bl	8007890 <RCCEx_PLL3_Config>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006bf2:	4b42      	ldr	r3, [pc, #264]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	4a3e      	ldr	r2, [pc, #248]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f002 0310 	and.w	r3, r2, #16
 8006c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006c22:	460b      	mov	r3, r1
 8006c24:	4313      	orrs	r3, r2
 8006c26:	d01e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c34:	d10c      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c3a:	3328      	adds	r3, #40	; 0x28
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fe26 	bl	8007890 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c50:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c62:	430b      	orrs	r3, r1
 8006c64:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c76:	2300      	movs	r3, #0
 8006c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006c80:	460b      	mov	r3, r1
 8006c82:	4313      	orrs	r3, r2
 8006c84:	d040      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c92:	d022      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c98:	d81b      	bhi.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca2:	d00b      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006ca4:	e015      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006caa:	3308      	adds	r3, #8
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fd3c 	bl	800772c <RCCEx_PLL2_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cba:	e00f      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cc0:	3328      	adds	r3, #40	; 0x28
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fde3 	bl	8007890 <RCCEx_PLL3_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cd0:	e004      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006cd8:	e000      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10d      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cf4:	4a01      	ldr	r2, [pc, #4]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfa:	e005      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d16:	2300      	movs	r3, #0
 8006d18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d03b      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d30:	d01f      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d36:	d818      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d42:	d007      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006d44:	e011      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d46:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d52:	e00f      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d58:	3328      	adds	r3, #40	; 0x28
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 fd97 	bl	8007890 <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d7c:	4b56      	ldr	r3, [pc, #344]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8c:	4a52      	ldr	r2, [pc, #328]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	6553      	str	r3, [r2, #84]	; 0x54
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006da8:	673b      	str	r3, [r7, #112]	; 0x70
 8006daa:	2300      	movs	r3, #0
 8006dac:	677b      	str	r3, [r7, #116]	; 0x74
 8006dae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d031      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc6:	d007      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006dc8:	e011      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dca:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	4a42      	ldr	r2, [pc, #264]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dd6:	e00e      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ddc:	3308      	adds	r3, #8
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fca3 	bl	800772c <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dec:	e003      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006dfe:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	4a32      	ldr	r2, [pc, #200]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e18:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d00c      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e3c:	3328      	adds	r3, #40	; 0x28
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fd25 	bl	8007890 <RCCEx_PLL3_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e60:	2300      	movs	r3, #0
 8006e62:	667b      	str	r3, [r7, #100]	; 0x64
 8006e64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d03a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e7a:	d018      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e80:	d811      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e86:	d014      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8c:	d80b      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d011      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006eac:	e004      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10d      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed0:	4a01      	ldr	r2, [pc, #4]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ed6:	e005      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ee0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006ef0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ef6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006efa:	460b      	mov	r3, r1
 8006efc:	4313      	orrs	r3, r2
 8006efe:	d009      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f00:	4baa      	ldr	r3, [pc, #680]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0e:	4aa7      	ldr	r2, [pc, #668]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f10:	430b      	orrs	r3, r1
 8006f12:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006f20:	653b      	str	r3, [r7, #80]	; 0x50
 8006f22:	2300      	movs	r3, #0
 8006f24:	657b      	str	r3, [r7, #84]	; 0x54
 8006f26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d00a      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f30:	4b9e      	ldr	r3, [pc, #632]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006f40:	4a9a      	ldr	r2, [pc, #616]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f42:	430b      	orrs	r3, r1
 8006f44:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f54:	2300      	movs	r3, #0
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f62:	4b92      	ldr	r3, [pc, #584]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f66:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	4a8e      	ldr	r2, [pc, #568]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006f82:	643b      	str	r3, [r7, #64]	; 0x40
 8006f84:	2300      	movs	r3, #0
 8006f86:	647b      	str	r3, [r7, #68]	; 0x44
 8006f88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f92:	4b86      	ldr	r3, [pc, #536]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	4a85      	ldr	r2, [pc, #532]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9c:	6113      	str	r3, [r2, #16]
 8006f9e:	4b83      	ldr	r3, [pc, #524]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006fa0:	6919      	ldr	r1, [r3, #16]
 8006fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006faa:	4a80      	ldr	r2, [pc, #512]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006fac:	430b      	orrs	r3, r1
 8006fae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fcc:	4b77      	ldr	r3, [pc, #476]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	4a74      	ldr	r2, [pc, #464]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30
 8006fee:	2300      	movs	r3, #0
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d00a      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ffc:	4b6b      	ldr	r3, [pc, #428]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007004:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700c:	4a67      	ldr	r2, [pc, #412]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	2100      	movs	r1, #0
 800701c:	62b9      	str	r1, [r7, #40]	; 0x28
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d011      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800702e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007032:	3308      	adds	r3, #8
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fb78 	bl	800772c <RCCEx_PLL2_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007042:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800704e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	2100      	movs	r1, #0
 800705c:	6239      	str	r1, [r7, #32]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
 8007064:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007068:	460b      	mov	r3, r1
 800706a:	4313      	orrs	r3, r2
 800706c:	d011      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800706e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007072:	3308      	adds	r3, #8
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fb58 	bl	800772c <RCCEx_PLL2_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007082:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800708e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	2100      	movs	r1, #0
 800709c:	61b9      	str	r1, [r7, #24]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d011      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070b2:	3308      	adds	r3, #8
 80070b4:	2102      	movs	r1, #2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fb38 	bl	800772c <RCCEx_PLL2_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80070c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	2100      	movs	r1, #0
 80070dc:	6139      	str	r1, [r7, #16]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070e8:	460b      	mov	r3, r1
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d011      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070f2:	3328      	adds	r3, #40	; 0x28
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fbca 	bl	8007890 <RCCEx_PLL3_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8007102:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800710e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	2100      	movs	r1, #0
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007128:	460b      	mov	r3, r1
 800712a:	4313      	orrs	r3, r2
 800712c:	d011      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800712e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007132:	3328      	adds	r3, #40	; 0x28
 8007134:	2101      	movs	r1, #1
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fbaa 	bl	8007890 <RCCEx_PLL3_Config>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007142:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800714e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	2100      	movs	r1, #0
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007168:	460b      	mov	r3, r1
 800716a:	4313      	orrs	r3, r2
 800716c:	d011      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800716e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007172:	3328      	adds	r3, #40	; 0x28
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fb8a 	bl	8007890 <RCCEx_PLL3_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007182:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800718e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8007192:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071a6:	46bd      	mov	sp, r7
 80071a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ac:	58024400 	.word	0x58024400

080071b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071b4:	f7fe fd56 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 80071b8:	4602      	mov	r2, r0
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	091b      	lsrs	r3, r3, #4
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	4904      	ldr	r1, [pc, #16]	; (80071d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071c6:	5ccb      	ldrb	r3, [r1, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	58024400 	.word	0x58024400
 80071d8:	0800dbf0 	.word	0x0800dbf0

080071dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	; 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e4:	4ba1      	ldr	r3, [pc, #644]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071ee:	4b9f      	ldr	r3, [pc, #636]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	0b1b      	lsrs	r3, r3, #12
 80071f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071fa:	4b9c      	ldr	r3, [pc, #624]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	091b      	lsrs	r3, r3, #4
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007206:	4b99      	ldr	r3, [pc, #612]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8111 	beq.w	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f000 8083 	beq.w	8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b02      	cmp	r3, #2
 8007236:	f200 80a1 	bhi.w	800737c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d056      	beq.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007246:	e099      	b.n	800737c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007248:	4b88      	ldr	r3, [pc, #544]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d02d      	beq.n	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007254:	4b85      	ldr	r3, [pc, #532]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	08db      	lsrs	r3, r3, #3
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	4a84      	ldr	r2, [pc, #528]	; (8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
 8007264:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b7b      	ldr	r3, [pc, #492]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007292:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072ae:	e087      	b.n	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b6a      	ldr	r3, [pc, #424]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	e065      	b.n	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800747c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b59      	ldr	r3, [pc, #356]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a03 	vldr	s12, [r7, #12]
 800731a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007336:	e043      	b.n	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b48      	ldr	r3, [pc, #288]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a03 	vldr	s12, [r7, #12]
 800735e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737a:	e021      	b.n	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800747c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800738a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738e:	4b37      	ldr	r3, [pc, #220]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739e:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073da:	edd7 6a07 	vldr	s13, [r7, #28]
 80073de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 2a90 	vmov	r2, s15
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073ee:	4b1f      	ldr	r3, [pc, #124]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007436:	edd7 6a07 	vldr	s13, [r7, #28]
 800743a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007442:	ee17 2a90 	vmov	r2, s15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800744a:	e008      	b.n	800745e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	; 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	58024400 	.word	0x58024400
 8007470:	03d09000 	.word	0x03d09000
 8007474:	46000000 	.word	0x46000000
 8007478:	4c742400 	.word	0x4c742400
 800747c:	4a742400 	.word	0x4a742400
 8007480:	4bbebc20 	.word	0x4bbebc20

08007484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007484:	b480      	push	{r7}
 8007486:	b089      	sub	sp, #36	; 0x24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800748c:	4ba1      	ldr	r3, [pc, #644]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007496:	4b9f      	ldr	r3, [pc, #636]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	0d1b      	lsrs	r3, r3, #20
 800749c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074a2:	4b9c      	ldr	r3, [pc, #624]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80074ae:	4b99      	ldr	r3, [pc, #612]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	08db      	lsrs	r3, r3, #3
 80074b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8111 	beq.w	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	f000 8083 	beq.w	80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f200 80a1 	bhi.w	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d056      	beq.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074ee:	e099      	b.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074f0:	4b88      	ldr	r3, [pc, #544]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02d      	beq.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074fc:	4b85      	ldr	r3, [pc, #532]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	08db      	lsrs	r3, r3, #3
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	4a84      	ldr	r2, [pc, #528]	; (8007718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007526:	4b7b      	ldr	r3, [pc, #492]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007536:	ed97 6a03 	vldr	s12, [r7, #12]
 800753a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800754a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007552:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007556:	e087      	b.n	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756a:	4b6a      	ldr	r3, [pc, #424]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757a:	ed97 6a03 	vldr	s12, [r7, #12]
 800757e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800759a:	e065      	b.n	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ae:	4b59      	ldr	r3, [pc, #356]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075be:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075de:	e043      	b.n	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f2:	4b48      	ldr	r3, [pc, #288]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007602:	ed97 6a03 	vldr	s12, [r7, #12]
 8007606:	eddf 5a45 	vldr	s11, [pc, #276]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007622:	e021      	b.n	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007636:	4b37      	ldr	r3, [pc, #220]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	ed97 6a03 	vldr	s12, [r7, #12]
 800764a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007668:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	0a5b      	lsrs	r3, r3, #9
 800766e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800767e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007682:	edd7 6a07 	vldr	s13, [r7, #28]
 8007686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	ee17 2a90 	vmov	r2, s15
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007696:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076bc:	ee17 2a90 	vmov	r2, s15
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	0e1b      	lsrs	r3, r3, #24
 80076ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076de:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ea:	ee17 2a90 	vmov	r2, s15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076f2:	e008      	b.n	8007706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	609a      	str	r2, [r3, #8]
}
 8007706:	bf00      	nop
 8007708:	3724      	adds	r7, #36	; 0x24
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	58024400 	.word	0x58024400
 8007718:	03d09000 	.word	0x03d09000
 800771c:	46000000 	.word	0x46000000
 8007720:	4c742400 	.word	0x4c742400
 8007724:	4a742400 	.word	0x4a742400
 8007728:	4bbebc20 	.word	0x4bbebc20

0800772c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773a:	4b53      	ldr	r3, [pc, #332]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d101      	bne.n	800774a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e099      	b.n	800787e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800774a:	4b4f      	ldr	r3, [pc, #316]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4e      	ldr	r2, [pc, #312]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007750:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007756:	f7f9 fbd5 	bl	8000f04 <HAL_GetTick>
 800775a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800775c:	e008      	b.n	8007770 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800775e:	f7f9 fbd1 	bl	8000f04 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e086      	b.n	800787e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007770:	4b45      	ldr	r3, [pc, #276]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f0      	bne.n	800775e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800777c:	4b42      	ldr	r3, [pc, #264]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	031b      	lsls	r3, r3, #12
 800778a:	493f      	ldr	r1, [pc, #252]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800778c:	4313      	orrs	r3, r2
 800778e:	628b      	str	r3, [r1, #40]	; 0x28
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	3b01      	subs	r3, #1
 8007796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	3b01      	subs	r3, #1
 80077a0:	025b      	lsls	r3, r3, #9
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	061b      	lsls	r3, r3, #24
 80077bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077c0:	4931      	ldr	r1, [pc, #196]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077c6:	4b30      	ldr	r3, [pc, #192]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	492d      	ldr	r1, [pc, #180]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077d8:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f023 0220 	bic.w	r2, r3, #32
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	4928      	ldr	r1, [pc, #160]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ea:	4b27      	ldr	r3, [pc, #156]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a26      	ldr	r2, [pc, #152]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077f6:	4b24      	ldr	r3, [pc, #144]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <RCCEx_PLL2_Config+0x160>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	69d2      	ldr	r2, [r2, #28]
 8007802:	00d2      	lsls	r2, r2, #3
 8007804:	4920      	ldr	r1, [pc, #128]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007806:	4313      	orrs	r3, r2
 8007808:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800780a:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007810:	f043 0310 	orr.w	r3, r3, #16
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007828:	e00f      	b.n	800784a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d106      	bne.n	800783e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800783c:	e005      	b.n	800784a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	4a11      	ldr	r2, [pc, #68]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a0e      	ldr	r2, [pc, #56]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007856:	f7f9 fb55 	bl	8000f04 <HAL_GetTick>
 800785a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800785c:	e008      	b.n	8007870 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800785e:	f7f9 fb51 	bl	8000f04 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e006      	b.n	800787e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <RCCEx_PLL2_Config+0x15c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0f0      	beq.n	800785e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	58024400 	.word	0x58024400
 800788c:	ffff0007 	.word	0xffff0007

08007890 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800789e:	4b53      	ldr	r3, [pc, #332]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d101      	bne.n	80078ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e099      	b.n	80079e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078ae:	4b4f      	ldr	r3, [pc, #316]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a4e      	ldr	r2, [pc, #312]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ba:	f7f9 fb23 	bl	8000f04 <HAL_GetTick>
 80078be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c0:	e008      	b.n	80078d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078c2:	f7f9 fb1f 	bl	8000f04 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e086      	b.n	80079e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078d4:	4b45      	ldr	r3, [pc, #276]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f0      	bne.n	80078c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078e0:	4b42      	ldr	r3, [pc, #264]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	051b      	lsls	r3, r3, #20
 80078ee:	493f      	ldr	r1, [pc, #252]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	628b      	str	r3, [r1, #40]	; 0x28
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	3b01      	subs	r3, #1
 8007904:	025b      	lsls	r3, r3, #9
 8007906:	b29b      	uxth	r3, r3
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	3b01      	subs	r3, #1
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	3b01      	subs	r3, #1
 800791e:	061b      	lsls	r3, r3, #24
 8007920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007924:	4931      	ldr	r1, [pc, #196]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007926:	4313      	orrs	r3, r2
 8007928:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800792a:	4b30      	ldr	r3, [pc, #192]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	492d      	ldr	r1, [pc, #180]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007938:	4313      	orrs	r3, r2
 800793a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800793c:	4b2b      	ldr	r3, [pc, #172]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	4928      	ldr	r1, [pc, #160]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800794a:	4313      	orrs	r3, r2
 800794c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800794e:	4b27      	ldr	r3, [pc, #156]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	4a26      	ldr	r2, [pc, #152]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800795c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795e:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <RCCEx_PLL3_Config+0x160>)
 8007960:	4013      	ands	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	69d2      	ldr	r2, [r2, #28]
 8007966:	00d2      	lsls	r2, r2, #3
 8007968:	4920      	ldr	r1, [pc, #128]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800796a:	4313      	orrs	r3, r2
 800796c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800796e:	4b1f      	ldr	r3, [pc, #124]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007980:	4b1a      	ldr	r3, [pc, #104]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a19      	ldr	r2, [pc, #100]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800798a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800798c:	e00f      	b.n	80079ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d106      	bne.n	80079a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	4a14      	ldr	r2, [pc, #80]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 800799a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800799e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a0:	e005      	b.n	80079ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	4a11      	ldr	r2, [pc, #68]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80079a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079ae:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a0e      	ldr	r2, [pc, #56]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80079b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ba:	f7f9 faa3 	bl	8000f04 <HAL_GetTick>
 80079be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c0:	e008      	b.n	80079d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079c2:	f7f9 fa9f 	bl	8000f04 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d901      	bls.n	80079d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e006      	b.n	80079e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <RCCEx_PLL3_Config+0x15c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0f0      	beq.n	80079c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	58024400 	.word	0x58024400
 80079f0:	ffff0007 	.word	0xffff0007

080079f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e042      	b.n	8007a8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 f8b3 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2224      	movs	r2, #36	; 0x24
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0201 	bic.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8a2 	bl	8007b80 <UART_SetConfig>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e022      	b.n	8007a8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fdfe 	bl	8008650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fe85 	bl	8008794 <UART_CheckIdleState>
 8007a8a:	4603      	mov	r3, r0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d137      	bne.n	8007b1c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_UART_Receive_DMA+0x24>
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e030      	b.n	8007b1e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <HAL_UART_Receive_DMA+0x94>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d01f      	beq.n	8007b0c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	623b      	str	r3, [r7, #32]
 8007afa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	69f9      	ldr	r1, [r7, #28]
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 ff50 	bl	80089b8 <UART_Start_Receive_DMA>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	e000      	b.n	8007b1e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3728      	adds	r7, #40	; 0x28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	58000c00 	.word	0x58000c00

08007b2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b84:	b092      	sub	sp, #72	; 0x48
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4bbe      	ldr	r3, [pc, #760]	; (8007ea8 <UART_SetConfig+0x328>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4ab3      	ldr	r2, [pc, #716]	; (8007eac <UART_SetConfig+0x32c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be8:	4313      	orrs	r3, r2
 8007bea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	4baf      	ldr	r3, [pc, #700]	; (8007eb0 <UART_SetConfig+0x330>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	f023 010f 	bic.w	r1, r3, #15
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4aa6      	ldr	r2, [pc, #664]	; (8007eb4 <UART_SetConfig+0x334>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d177      	bne.n	8007d10 <UART_SetConfig+0x190>
 8007c20:	4ba5      	ldr	r3, [pc, #660]	; (8007eb8 <UART_SetConfig+0x338>)
 8007c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c28:	2b28      	cmp	r3, #40	; 0x28
 8007c2a:	d86d      	bhi.n	8007d08 <UART_SetConfig+0x188>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <UART_SetConfig+0xb4>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007d09 	.word	0x08007d09
 8007c3c:	08007d09 	.word	0x08007d09
 8007c40:	08007d09 	.word	0x08007d09
 8007c44:	08007d09 	.word	0x08007d09
 8007c48:	08007d09 	.word	0x08007d09
 8007c4c:	08007d09 	.word	0x08007d09
 8007c50:	08007d09 	.word	0x08007d09
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007d09 	.word	0x08007d09
 8007c5c:	08007d09 	.word	0x08007d09
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d09 	.word	0x08007d09
 8007c68:	08007d09 	.word	0x08007d09
 8007c6c:	08007d09 	.word	0x08007d09
 8007c70:	08007d09 	.word	0x08007d09
 8007c74:	08007ce9 	.word	0x08007ce9
 8007c78:	08007d09 	.word	0x08007d09
 8007c7c:	08007d09 	.word	0x08007d09
 8007c80:	08007d09 	.word	0x08007d09
 8007c84:	08007d09 	.word	0x08007d09
 8007c88:	08007d09 	.word	0x08007d09
 8007c8c:	08007d09 	.word	0x08007d09
 8007c90:	08007d09 	.word	0x08007d09
 8007c94:	08007cf1 	.word	0x08007cf1
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007d09 	.word	0x08007d09
 8007cc8:	08007d09 	.word	0x08007d09
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cde:	e222      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce6:	e21e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cee:	e21a      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf6:	e216      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfe:	e212      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d00:	2340      	movs	r3, #64	; 0x40
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d06:	e20e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0e:	e20a      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a69      	ldr	r2, [pc, #420]	; (8007ebc <UART_SetConfig+0x33c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d130      	bne.n	8007d7c <UART_SetConfig+0x1fc>
 8007d1a:	4b67      	ldr	r3, [pc, #412]	; (8007eb8 <UART_SetConfig+0x338>)
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	d826      	bhi.n	8007d74 <UART_SetConfig+0x1f4>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <UART_SetConfig+0x1ac>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d45 	.word	0x08007d45
 8007d30:	08007d4d 	.word	0x08007d4d
 8007d34:	08007d55 	.word	0x08007d55
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d65 	.word	0x08007d65
 8007d40:	08007d6d 	.word	0x08007d6d
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4a:	e1ec      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d4c:	2304      	movs	r3, #4
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d52:	e1e8      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d54:	2308      	movs	r3, #8
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5a:	e1e4      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d62:	e1e0      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d64:	2320      	movs	r3, #32
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e1dc      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e1d8      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d74:	2380      	movs	r3, #128	; 0x80
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e1d4      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a4f      	ldr	r2, [pc, #316]	; (8007ec0 <UART_SetConfig+0x340>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d130      	bne.n	8007de8 <UART_SetConfig+0x268>
 8007d86:	4b4c      	ldr	r3, [pc, #304]	; (8007eb8 <UART_SetConfig+0x338>)
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d826      	bhi.n	8007de0 <UART_SetConfig+0x260>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <UART_SetConfig+0x218>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	08007dc1 	.word	0x08007dc1
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db6:	e1b6      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007db8:	2304      	movs	r3, #4
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e1b2      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc6:	e1ae      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e1aa      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e1a6      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e1a2      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e19e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a35      	ldr	r2, [pc, #212]	; (8007ec4 <UART_SetConfig+0x344>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d130      	bne.n	8007e54 <UART_SetConfig+0x2d4>
 8007df2:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <UART_SetConfig+0x338>)
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	d826      	bhi.n	8007e4c <UART_SetConfig+0x2cc>
 8007dfe:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0x284>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007e1d 	.word	0x08007e1d
 8007e08:	08007e25 	.word	0x08007e25
 8007e0c:	08007e2d 	.word	0x08007e2d
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e3d 	.word	0x08007e3d
 8007e18:	08007e45 	.word	0x08007e45
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e180      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e24:	2304      	movs	r3, #4
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e17c      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e32:	e178      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e34:	2310      	movs	r3, #16
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e174      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e170      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e44:	2340      	movs	r3, #64	; 0x40
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e16c      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e4c:	2380      	movs	r3, #128	; 0x80
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e168      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1b      	ldr	r2, [pc, #108]	; (8007ec8 <UART_SetConfig+0x348>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d142      	bne.n	8007ee4 <UART_SetConfig+0x364>
 8007e5e:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <UART_SetConfig+0x338>)
 8007e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d838      	bhi.n	8007edc <UART_SetConfig+0x35c>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x2f0>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007e91 	.word	0x08007e91
 8007e78:	08007e99 	.word	0x08007e99
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007ed5 	.word	0x08007ed5
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8e:	e14a      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e90:	2304      	movs	r3, #4
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e96:	e146      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e9e:	e142      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea6:	e13e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ea8:	cfff69f3 	.word	0xcfff69f3
 8007eac:	58000c00 	.word	0x58000c00
 8007eb0:	11fff4ff 	.word	0x11fff4ff
 8007eb4:	40011000 	.word	0x40011000
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	40004400 	.word	0x40004400
 8007ec0:	40004800 	.word	0x40004800
 8007ec4:	40004c00 	.word	0x40004c00
 8007ec8:	40005000 	.word	0x40005000
 8007ecc:	2320      	movs	r3, #32
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e128      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ed4:	2340      	movs	r3, #64	; 0x40
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eda:	e124      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007edc:	2380      	movs	r3, #128	; 0x80
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee2:	e120      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4acb      	ldr	r2, [pc, #812]	; (8008218 <UART_SetConfig+0x698>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d176      	bne.n	8007fdc <UART_SetConfig+0x45c>
 8007eee:	4bcb      	ldr	r3, [pc, #812]	; (800821c <UART_SetConfig+0x69c>)
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef6:	2b28      	cmp	r3, #40	; 0x28
 8007ef8:	d86c      	bhi.n	8007fd4 <UART_SetConfig+0x454>
 8007efa:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <UART_SetConfig+0x380>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fd5 	.word	0x08007fd5
 8007f08:	08007fd5 	.word	0x08007fd5
 8007f0c:	08007fd5 	.word	0x08007fd5
 8007f10:	08007fd5 	.word	0x08007fd5
 8007f14:	08007fd5 	.word	0x08007fd5
 8007f18:	08007fd5 	.word	0x08007fd5
 8007f1c:	08007fd5 	.word	0x08007fd5
 8007f20:	08007fad 	.word	0x08007fad
 8007f24:	08007fd5 	.word	0x08007fd5
 8007f28:	08007fd5 	.word	0x08007fd5
 8007f2c:	08007fd5 	.word	0x08007fd5
 8007f30:	08007fd5 	.word	0x08007fd5
 8007f34:	08007fd5 	.word	0x08007fd5
 8007f38:	08007fd5 	.word	0x08007fd5
 8007f3c:	08007fd5 	.word	0x08007fd5
 8007f40:	08007fb5 	.word	0x08007fb5
 8007f44:	08007fd5 	.word	0x08007fd5
 8007f48:	08007fd5 	.word	0x08007fd5
 8007f4c:	08007fd5 	.word	0x08007fd5
 8007f50:	08007fd5 	.word	0x08007fd5
 8007f54:	08007fd5 	.word	0x08007fd5
 8007f58:	08007fd5 	.word	0x08007fd5
 8007f5c:	08007fd5 	.word	0x08007fd5
 8007f60:	08007fbd 	.word	0x08007fbd
 8007f64:	08007fd5 	.word	0x08007fd5
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	08007fd5 	.word	0x08007fd5
 8007f70:	08007fd5 	.word	0x08007fd5
 8007f74:	08007fd5 	.word	0x08007fd5
 8007f78:	08007fd5 	.word	0x08007fd5
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fd5 	.word	0x08007fd5
 8007f88:	08007fd5 	.word	0x08007fd5
 8007f8c:	08007fd5 	.word	0x08007fd5
 8007f90:	08007fd5 	.word	0x08007fd5
 8007f94:	08007fd5 	.word	0x08007fd5
 8007f98:	08007fd5 	.word	0x08007fd5
 8007f9c:	08007fd5 	.word	0x08007fd5
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e0bc      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fac:	2304      	movs	r3, #4
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e0b8      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fb4:	2308      	movs	r3, #8
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e0b4      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e0b0      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e0ac      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e0a8      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fda:	e0a4      	b.n	8008126 <UART_SetConfig+0x5a6>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a8f      	ldr	r2, [pc, #572]	; (8008220 <UART_SetConfig+0x6a0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d130      	bne.n	8008048 <UART_SetConfig+0x4c8>
 8007fe6:	4b8d      	ldr	r3, [pc, #564]	; (800821c <UART_SetConfig+0x69c>)
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	d826      	bhi.n	8008040 <UART_SetConfig+0x4c0>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0x478>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008011 	.word	0x08008011
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008021 	.word	0x08008021
 8008004:	08008029 	.word	0x08008029
 8008008:	08008031 	.word	0x08008031
 800800c:	08008039 	.word	0x08008039
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e086      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e082      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e07e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e07a      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008030:	2320      	movs	r3, #32
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e076      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e072      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008046:	e06e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a75      	ldr	r2, [pc, #468]	; (8008224 <UART_SetConfig+0x6a4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d130      	bne.n	80080b4 <UART_SetConfig+0x534>
 8008052:	4b72      	ldr	r3, [pc, #456]	; (800821c <UART_SetConfig+0x69c>)
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b05      	cmp	r3, #5
 800805c:	d826      	bhi.n	80080ac <UART_SetConfig+0x52c>
 800805e:	a201      	add	r2, pc, #4	; (adr r2, 8008064 <UART_SetConfig+0x4e4>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	0800807d 	.word	0x0800807d
 8008068:	08008085 	.word	0x08008085
 800806c:	0800808d 	.word	0x0800808d
 8008070:	08008095 	.word	0x08008095
 8008074:	0800809d 	.word	0x0800809d
 8008078:	080080a5 	.word	0x080080a5
 800807c:	2300      	movs	r3, #0
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e050      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008084:	2304      	movs	r3, #4
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e04c      	b.n	8008126 <UART_SetConfig+0x5a6>
 800808c:	2308      	movs	r3, #8
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e048      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008094:	2310      	movs	r3, #16
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e044      	b.n	8008126 <UART_SetConfig+0x5a6>
 800809c:	2320      	movs	r3, #32
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e040      	b.n	8008126 <UART_SetConfig+0x5a6>
 80080a4:	2340      	movs	r3, #64	; 0x40
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e03c      	b.n	8008126 <UART_SetConfig+0x5a6>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e038      	b.n	8008126 <UART_SetConfig+0x5a6>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a5b      	ldr	r2, [pc, #364]	; (8008228 <UART_SetConfig+0x6a8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d130      	bne.n	8008120 <UART_SetConfig+0x5a0>
 80080be:	4b57      	ldr	r3, [pc, #348]	; (800821c <UART_SetConfig+0x69c>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d826      	bhi.n	8008118 <UART_SetConfig+0x598>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <UART_SetConfig+0x550>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080e9 	.word	0x080080e9
 80080d4:	080080f1 	.word	0x080080f1
 80080d8:	080080f9 	.word	0x080080f9
 80080dc:	08008101 	.word	0x08008101
 80080e0:	08008109 	.word	0x08008109
 80080e4:	08008111 	.word	0x08008111
 80080e8:	2302      	movs	r3, #2
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e01a      	b.n	8008126 <UART_SetConfig+0x5a6>
 80080f0:	2304      	movs	r3, #4
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e016      	b.n	8008126 <UART_SetConfig+0x5a6>
 80080f8:	2308      	movs	r3, #8
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e012      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008100:	2310      	movs	r3, #16
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e00e      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008108:	2320      	movs	r3, #32
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e00a      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008110:	2340      	movs	r3, #64	; 0x40
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e006      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008118:	2380      	movs	r3, #128	; 0x80
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e002      	b.n	8008126 <UART_SetConfig+0x5a6>
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a3f      	ldr	r2, [pc, #252]	; (8008228 <UART_SetConfig+0x6a8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	f040 80f8 	bne.w	8008322 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008136:	2b20      	cmp	r3, #32
 8008138:	dc46      	bgt.n	80081c8 <UART_SetConfig+0x648>
 800813a:	2b02      	cmp	r3, #2
 800813c:	f2c0 8082 	blt.w	8008244 <UART_SetConfig+0x6c4>
 8008140:	3b02      	subs	r3, #2
 8008142:	2b1e      	cmp	r3, #30
 8008144:	d87e      	bhi.n	8008244 <UART_SetConfig+0x6c4>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x5cc>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	080081cf 	.word	0x080081cf
 8008150:	08008245 	.word	0x08008245
 8008154:	080081d7 	.word	0x080081d7
 8008158:	08008245 	.word	0x08008245
 800815c:	08008245 	.word	0x08008245
 8008160:	08008245 	.word	0x08008245
 8008164:	080081e7 	.word	0x080081e7
 8008168:	08008245 	.word	0x08008245
 800816c:	08008245 	.word	0x08008245
 8008170:	08008245 	.word	0x08008245
 8008174:	08008245 	.word	0x08008245
 8008178:	08008245 	.word	0x08008245
 800817c:	08008245 	.word	0x08008245
 8008180:	08008245 	.word	0x08008245
 8008184:	080081f7 	.word	0x080081f7
 8008188:	08008245 	.word	0x08008245
 800818c:	08008245 	.word	0x08008245
 8008190:	08008245 	.word	0x08008245
 8008194:	08008245 	.word	0x08008245
 8008198:	08008245 	.word	0x08008245
 800819c:	08008245 	.word	0x08008245
 80081a0:	08008245 	.word	0x08008245
 80081a4:	08008245 	.word	0x08008245
 80081a8:	08008245 	.word	0x08008245
 80081ac:	08008245 	.word	0x08008245
 80081b0:	08008245 	.word	0x08008245
 80081b4:	08008245 	.word	0x08008245
 80081b8:	08008245 	.word	0x08008245
 80081bc:	08008245 	.word	0x08008245
 80081c0:	08008245 	.word	0x08008245
 80081c4:	08008237 	.word	0x08008237
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	d037      	beq.n	800823c <UART_SetConfig+0x6bc>
 80081cc:	e03a      	b.n	8008244 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081ce:	f7fe ffef 	bl	80071b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80081d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081d4:	e03c      	b.n	8008250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fffe 	bl	80071dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	e034      	b.n	8008250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e6:	f107 0318 	add.w	r3, r7, #24
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff f94a 	bl	8007484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f4:	e02c      	b.n	8008250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <UART_SetConfig+0x69c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <UART_SetConfig+0x69c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	08db      	lsrs	r3, r3, #3
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	4a07      	ldr	r2, [pc, #28]	; (800822c <UART_SetConfig+0x6ac>)
 800820e:	fa22 f303 	lsr.w	r3, r2, r3
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008214:	e01c      	b.n	8008250 <UART_SetConfig+0x6d0>
 8008216:	bf00      	nop
 8008218:	40011400 	.word	0x40011400
 800821c:	58024400 	.word	0x58024400
 8008220:	40007800 	.word	0x40007800
 8008224:	40007c00 	.word	0x40007c00
 8008228:	58000c00 	.word	0x58000c00
 800822c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008230:	4b9d      	ldr	r3, [pc, #628]	; (80084a8 <UART_SetConfig+0x928>)
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008234:	e00c      	b.n	8008250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008236:	4b9d      	ldr	r3, [pc, #628]	; (80084ac <UART_SetConfig+0x92c>)
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800823a:	e009      	b.n	8008250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008242:	e005      	b.n	8008250 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800824e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 81de 	beq.w	8008614 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	4a94      	ldr	r2, [pc, #592]	; (80084b0 <UART_SetConfig+0x930>)
 800825e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008262:	461a      	mov	r2, r3
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	fbb3 f3f2 	udiv	r3, r3, r2
 800826a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008278:	429a      	cmp	r2, r3
 800827a:	d305      	bcc.n	8008288 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008284:	429a      	cmp	r2, r3
 8008286:	d903      	bls.n	8008290 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800828e:	e1c1      	b.n	8008614 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008292:	2200      	movs	r2, #0
 8008294:	60bb      	str	r3, [r7, #8]
 8008296:	60fa      	str	r2, [r7, #12]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	4a84      	ldr	r2, [pc, #528]	; (80084b0 <UART_SetConfig+0x930>)
 800829e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2200      	movs	r2, #0
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082b2:	f7f8 f865 	bl	8000380 <__aeabi_uldivmod>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	020b      	lsls	r3, r1, #8
 80082c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082cc:	0202      	lsls	r2, r0, #8
 80082ce:	6979      	ldr	r1, [r7, #20]
 80082d0:	6849      	ldr	r1, [r1, #4]
 80082d2:	0849      	lsrs	r1, r1, #1
 80082d4:	2000      	movs	r0, #0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4605      	mov	r5, r0
 80082da:	eb12 0804 	adds.w	r8, r2, r4
 80082de:	eb43 0905 	adc.w	r9, r3, r5
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	469a      	mov	sl, r3
 80082ea:	4693      	mov	fp, r2
 80082ec:	4652      	mov	r2, sl
 80082ee:	465b      	mov	r3, fp
 80082f0:	4640      	mov	r0, r8
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f8 f844 	bl	8000380 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4613      	mov	r3, r2
 80082fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008306:	d308      	bcc.n	800831a <UART_SetConfig+0x79a>
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830e:	d204      	bcs.n	800831a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008316:	60da      	str	r2, [r3, #12]
 8008318:	e17c      	b.n	8008614 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008320:	e178      	b.n	8008614 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832a:	f040 80c5 	bne.w	80084b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800832e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008332:	2b20      	cmp	r3, #32
 8008334:	dc48      	bgt.n	80083c8 <UART_SetConfig+0x848>
 8008336:	2b00      	cmp	r3, #0
 8008338:	db7b      	blt.n	8008432 <UART_SetConfig+0x8b2>
 800833a:	2b20      	cmp	r3, #32
 800833c:	d879      	bhi.n	8008432 <UART_SetConfig+0x8b2>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <UART_SetConfig+0x7c4>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	080083cf 	.word	0x080083cf
 8008348:	080083d7 	.word	0x080083d7
 800834c:	08008433 	.word	0x08008433
 8008350:	08008433 	.word	0x08008433
 8008354:	080083df 	.word	0x080083df
 8008358:	08008433 	.word	0x08008433
 800835c:	08008433 	.word	0x08008433
 8008360:	08008433 	.word	0x08008433
 8008364:	080083ef 	.word	0x080083ef
 8008368:	08008433 	.word	0x08008433
 800836c:	08008433 	.word	0x08008433
 8008370:	08008433 	.word	0x08008433
 8008374:	08008433 	.word	0x08008433
 8008378:	08008433 	.word	0x08008433
 800837c:	08008433 	.word	0x08008433
 8008380:	08008433 	.word	0x08008433
 8008384:	080083ff 	.word	0x080083ff
 8008388:	08008433 	.word	0x08008433
 800838c:	08008433 	.word	0x08008433
 8008390:	08008433 	.word	0x08008433
 8008394:	08008433 	.word	0x08008433
 8008398:	08008433 	.word	0x08008433
 800839c:	08008433 	.word	0x08008433
 80083a0:	08008433 	.word	0x08008433
 80083a4:	08008433 	.word	0x08008433
 80083a8:	08008433 	.word	0x08008433
 80083ac:	08008433 	.word	0x08008433
 80083b0:	08008433 	.word	0x08008433
 80083b4:	08008433 	.word	0x08008433
 80083b8:	08008433 	.word	0x08008433
 80083bc:	08008433 	.word	0x08008433
 80083c0:	08008433 	.word	0x08008433
 80083c4:	08008425 	.word	0x08008425
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d02e      	beq.n	800842a <UART_SetConfig+0x8aa>
 80083cc:	e031      	b.n	8008432 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ce:	f7fd fc79 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80083d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083d4:	e033      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d6:	f7fd fc8b 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 80083da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083dc:	e02f      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fefa 	bl	80071dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ec:	e027      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ee:	f107 0318 	add.w	r3, r7, #24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f846 	bl	8007484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e01f      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083fe:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <UART_SetConfig+0x934>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840a:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <UART_SetConfig+0x934>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	08db      	lsrs	r3, r3, #3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <UART_SetConfig+0x928>)
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800841c:	e00f      	b.n	800843e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800841e:	4b22      	ldr	r3, [pc, #136]	; (80084a8 <UART_SetConfig+0x928>)
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008422:	e00c      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008424:	4b21      	ldr	r3, [pc, #132]	; (80084ac <UART_SetConfig+0x92c>)
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008428:	e009      	b.n	800843e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800842e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008430:	e005      	b.n	800843e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800843c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800843e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80e7 	beq.w	8008614 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <UART_SetConfig+0x930>)
 800844c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008450:	461a      	mov	r2, r3
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	fbb3 f3f2 	udiv	r3, r3, r2
 8008458:	005a      	lsls	r2, r3, #1
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	441a      	add	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	fbb2 f3f3 	udiv	r3, r2, r3
 800846a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	2b0f      	cmp	r3, #15
 8008470:	d916      	bls.n	80084a0 <UART_SetConfig+0x920>
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008478:	d212      	bcs.n	80084a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	b29b      	uxth	r3, r3
 800847e:	f023 030f 	bic.w	r3, r3, #15
 8008482:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	b29b      	uxth	r3, r3
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	b29a      	uxth	r2, r3
 8008490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008492:	4313      	orrs	r3, r2
 8008494:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800849c:	60da      	str	r2, [r3, #12]
 800849e:	e0b9      	b.n	8008614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084a6:	e0b5      	b.n	8008614 <UART_SetConfig+0xa94>
 80084a8:	03d09000 	.word	0x03d09000
 80084ac:	003d0900 	.word	0x003d0900
 80084b0:	0800dc08 	.word	0x0800dc08
 80084b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80084b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084bc:	2b20      	cmp	r3, #32
 80084be:	dc49      	bgt.n	8008554 <UART_SetConfig+0x9d4>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	db7c      	blt.n	80085be <UART_SetConfig+0xa3e>
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d87a      	bhi.n	80085be <UART_SetConfig+0xa3e>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <UART_SetConfig+0x950>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	0800855b 	.word	0x0800855b
 80084d4:	08008563 	.word	0x08008563
 80084d8:	080085bf 	.word	0x080085bf
 80084dc:	080085bf 	.word	0x080085bf
 80084e0:	0800856b 	.word	0x0800856b
 80084e4:	080085bf 	.word	0x080085bf
 80084e8:	080085bf 	.word	0x080085bf
 80084ec:	080085bf 	.word	0x080085bf
 80084f0:	0800857b 	.word	0x0800857b
 80084f4:	080085bf 	.word	0x080085bf
 80084f8:	080085bf 	.word	0x080085bf
 80084fc:	080085bf 	.word	0x080085bf
 8008500:	080085bf 	.word	0x080085bf
 8008504:	080085bf 	.word	0x080085bf
 8008508:	080085bf 	.word	0x080085bf
 800850c:	080085bf 	.word	0x080085bf
 8008510:	0800858b 	.word	0x0800858b
 8008514:	080085bf 	.word	0x080085bf
 8008518:	080085bf 	.word	0x080085bf
 800851c:	080085bf 	.word	0x080085bf
 8008520:	080085bf 	.word	0x080085bf
 8008524:	080085bf 	.word	0x080085bf
 8008528:	080085bf 	.word	0x080085bf
 800852c:	080085bf 	.word	0x080085bf
 8008530:	080085bf 	.word	0x080085bf
 8008534:	080085bf 	.word	0x080085bf
 8008538:	080085bf 	.word	0x080085bf
 800853c:	080085bf 	.word	0x080085bf
 8008540:	080085bf 	.word	0x080085bf
 8008544:	080085bf 	.word	0x080085bf
 8008548:	080085bf 	.word	0x080085bf
 800854c:	080085bf 	.word	0x080085bf
 8008550:	080085b1 	.word	0x080085b1
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d02e      	beq.n	80085b6 <UART_SetConfig+0xa36>
 8008558:	e031      	b.n	80085be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855a:	f7fd fbb3 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 800855e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008560:	e033      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008562:	f7fd fbc5 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 8008566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008568:	e02f      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800856a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fe34 	bl	80071dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008578:	e027      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857a:	f107 0318 	add.w	r3, r7, #24
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe ff80 	bl	8007484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008588:	e01f      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800858a:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <UART_SetConfig+0xac0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008596:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <UART_SetConfig+0xac0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a28      	ldr	r2, [pc, #160]	; (8008644 <UART_SetConfig+0xac4>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085a8:	e00f      	b.n	80085ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80085aa:	4b26      	ldr	r3, [pc, #152]	; (8008644 <UART_SetConfig+0xac4>)
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ae:	e00c      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <UART_SetConfig+0xac8>)
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	e009      	b.n	80085ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e005      	b.n	80085ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085c8:	bf00      	nop
    }

    if (pclk != 0U)
 80085ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d021      	beq.n	8008614 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	4a1d      	ldr	r2, [pc, #116]	; (800864c <UART_SetConfig+0xacc>)
 80085d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085da:	461a      	mov	r2, r3
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	fbb3 f2f2 	udiv	r2, r3, r2
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	441a      	add	r2, r3
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d909      	bls.n	800860e <UART_SetConfig+0xa8e>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008600:	d205      	bcs.n	800860e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	b29a      	uxth	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	e002      	b.n	8008614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2201      	movs	r2, #1
 8008618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2201      	movs	r2, #1
 8008620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2200      	movs	r2, #0
 8008628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008630:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008634:	4618      	mov	r0, r3
 8008636:	3748      	adds	r7, #72	; 0x48
 8008638:	46bd      	mov	sp, r7
 800863a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	03d09000 	.word	0x03d09000
 8008648:	003d0900 	.word	0x003d0900
 800864c:	0800dc08 	.word	0x0800dc08

08008650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01a      	beq.n	8008766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800874e:	d10a      	bne.n	8008766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
  }
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b098      	sub	sp, #96	; 0x60
 8008798:	af02      	add	r7, sp, #8
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087a4:	f7f8 fbae 	bl	8000f04 <HAL_GetTick>
 80087a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d12f      	bne.n	8008818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c0:	2200      	movs	r2, #0
 80087c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f88e 	bl	80088e8 <UART_WaitOnFlagUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d022      	beq.n	8008818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e6:	653b      	str	r3, [r7, #80]	; 0x50
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f0:	647b      	str	r3, [r7, #68]	; 0x44
 80087f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e6      	bne.n	80087d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e063      	b.n	80088e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d149      	bne.n	80088ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800882e:	2200      	movs	r2, #0
 8008830:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f857 	bl	80088e8 <UART_WaitOnFlagUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d03c      	beq.n	80088ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	623b      	str	r3, [r7, #32]
   return(result);
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
 8008860:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	60fb      	str	r3, [r7, #12]
   return(result);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f023 0301 	bic.w	r3, r3, #1
 8008888:	64bb      	str	r3, [r7, #72]	; 0x48
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008892:	61fa      	str	r2, [r7, #28]
 8008894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	69b9      	ldr	r1, [r7, #24]
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	617b      	str	r3, [r7, #20]
   return(result);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e5      	bne.n	8008872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e012      	b.n	80088e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3758      	adds	r7, #88	; 0x58
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f8:	e049      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d045      	beq.n	800898e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008902:	f7f8 faff 	bl	8000f04 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <UART_WaitOnFlagUntilTimeout+0x30>
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e048      	b.n	80089ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d031      	beq.n	800898e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b08      	cmp	r3, #8
 8008936:	d110      	bne.n	800895a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2208      	movs	r2, #8
 800893e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f921 	bl	8008b88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2208      	movs	r2, #8
 800894a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e029      	b.n	80089ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008968:	d111      	bne.n	800898e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f907 	bl	8008b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e00f      	b.n	80089ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4013      	ands	r3, r2
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	429a      	cmp	r2, r3
 800899c:	bf0c      	ite	eq
 800899e:	2301      	moveq	r3, #1
 80089a0:	2300      	movne	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d0a6      	beq.n	80088fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b096      	sub	sp, #88	; 0x58
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2222      	movs	r2, #34	; 0x22
 80089e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d02d      	beq.n	8008a4a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f4:	4a40      	ldr	r2, [pc, #256]	; (8008af8 <UART_Start_Receive_DMA+0x140>)
 80089f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089fe:	4a3f      	ldr	r2, [pc, #252]	; (8008afc <UART_Start_Receive_DMA+0x144>)
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a08:	4a3d      	ldr	r2, [pc, #244]	; (8008b00 <UART_Start_Receive_DMA+0x148>)
 8008a0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a12:	2200      	movs	r2, #0
 8008a14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3324      	adds	r3, #36	; 0x24
 8008a22:	4619      	mov	r1, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a28:	461a      	mov	r2, r3
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	f7f8 ff12 	bl	8001854 <HAL_DMA_Start_IT>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2210      	movs	r2, #16
 8008a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e051      	b.n	8008aee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d018      	beq.n	8008a84 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a66:	657b      	str	r3, [r7, #84]	; 0x54
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a72:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa4:	637a      	str	r2, [r7, #52]	; 0x34
 8008aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e5      	bne.n	8008a84 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3308      	adds	r3, #8
 8008abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ad8:	623a      	str	r2, [r7, #32]
 8008ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	69f9      	ldr	r1, [r7, #28]
 8008ade:	6a3a      	ldr	r2, [r7, #32]
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e5      	bne.n	8008ab8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3758      	adds	r7, #88	; 0x58
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	08008c55 	.word	0x08008c55
 8008afc:	08008d7d 	.word	0x08008d7d
 8008b00:	08008dbb 	.word	0x08008dbb

08008b04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b08f      	sub	sp, #60	; 0x3c
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e6      	bne.n	8008b0c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	61ba      	str	r2, [r7, #24]
 8008b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6979      	ldr	r1, [r7, #20]
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008b7a:	bf00      	nop
 8008b7c:	373c      	adds	r7, #60	; 0x3c
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
	...

08008b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b095      	sub	sp, #84	; 0x54
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <UART_EndRxTransfer+0xc8>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d118      	bne.n	8008c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	6979      	ldr	r1, [r7, #20]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e6      	bne.n	8008bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c44:	bf00      	nop
 8008c46:	3754      	adds	r7, #84	; 0x54
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	effffffe 	.word	0xeffffffe

08008c54 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b09c      	sub	sp, #112	; 0x70
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c6a:	d071      	beq.n	8008d50 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e6      	bne.n	8008c74 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3308      	adds	r3, #8
 8008cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8008cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e5      	bne.n	8008ca6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d118      	bne.n	8008d50 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0310 	bic.w	r3, r3, #16
 8008d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	617b      	str	r3, [r7, #20]
   return(result);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d52:	2200      	movs	r2, #0
 8008d54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d107      	bne.n	8008d6e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d64:	4619      	mov	r1, r3
 8008d66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d68:	f7fe fefe 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d6c:	e002      	b.n	8008d74 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008d6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d70:	f7fe fedc 	bl	8007b2c <HAL_UART_RxCpltCallback>
}
 8008d74:	bf00      	nop
 8008d76:	3770      	adds	r7, #112	; 0x70
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d109      	bne.n	8008dac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7fe fedf 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008daa:	e002      	b.n	8008db2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7fe fec7 	bl	8007b40 <HAL_UART_RxHalfCpltCallback>
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d109      	bne.n	8008dfa <UART_DMAError+0x40>
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b21      	cmp	r3, #33	; 0x21
 8008dea:	d106      	bne.n	8008dfa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008df4:	6978      	ldr	r0, [r7, #20]
 8008df6:	f7ff fe85 	bl	8008b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d109      	bne.n	8008e1c <UART_DMAError+0x62>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b22      	cmp	r3, #34	; 0x22
 8008e0c:	d106      	bne.n	8008e1c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008e16:	6978      	ldr	r0, [r7, #20]
 8008e18:	f7ff feb6 	bl	8008b88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e22:	f043 0210 	orr.w	r2, r3, #16
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e2c:	6978      	ldr	r0, [r7, #20]
 8008e2e:	f7fe fe91 	bl	8007b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e32:	bf00      	nop
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e027      	b.n	8008ea0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2224      	movs	r2, #36	; 0x24
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0201 	bic.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e02d      	b.n	8008f20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2224      	movs	r2, #36	; 0x24
 8008ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0201 	bic.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f84f 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e02d      	b.n	8008f9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2224      	movs	r2, #36	; 0x24
 8008f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0201 	bic.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f811 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fc4:	e031      	b.n	800902a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fca:	2310      	movs	r3, #16
 8008fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	0e5b      	lsrs	r3, r3, #25
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	0f5b      	lsrs	r3, r3, #29
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	7b3a      	ldrb	r2, [r7, #12]
 8008ff2:	4911      	ldr	r1, [pc, #68]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8008ff4:	5c8a      	ldrb	r2, [r1, r2]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ffa:	7b3a      	ldrb	r2, [r7, #12]
 8008ffc:	490f      	ldr	r1, [pc, #60]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009000:	fb93 f3f2 	sdiv	r3, r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	4909      	ldr	r1, [pc, #36]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8009012:	5c8a      	ldrb	r2, [r1, r2]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009018:	7b7a      	ldrb	r2, [r7, #13]
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 800901c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	0800dc20 	.word	0x0800dc20
 800903c:	0800dc28 	.word	0x0800dc28

08009040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009040:	b084      	sub	sp, #16
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	f107 001c 	add.w	r0, r7, #28
 800904e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	2b01      	cmp	r3, #1
 8009056:	d120      	bne.n	800909a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <USB_CoreInit+0xd4>)
 800906a:	4013      	ands	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800907c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d105      	bne.n	800908e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 faf8 	bl	800a684 <USB_CoreReset>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
 8009098:	e01a      	b.n	80090d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 faec 	bl	800a684 <USB_CoreReset>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
 80090c2:	e005      	b.n	80090d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d116      	bne.n	8009104 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090da:	b29a      	uxth	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <USB_CoreInit+0xd8>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f043 0206 	orr.w	r2, r3, #6
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f043 0220 	orr.w	r2, r3, #32
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009110:	b004      	add	sp, #16
 8009112:	4770      	bx	lr
 8009114:	ffbdffbf 	.word	0xffbdffbf
 8009118:	03ee0000 	.word	0x03ee0000

0800911c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d165      	bne.n	80091fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4a41      	ldr	r2, [pc, #260]	; (8009238 <USB_SetTurnaroundTime+0x11c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d906      	bls.n	8009146 <USB_SetTurnaroundTime+0x2a>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a40      	ldr	r2, [pc, #256]	; (800923c <USB_SetTurnaroundTime+0x120>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d202      	bcs.n	8009146 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009140:	230f      	movs	r3, #15
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e062      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a3c      	ldr	r2, [pc, #240]	; (800923c <USB_SetTurnaroundTime+0x120>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d306      	bcc.n	800915c <USB_SetTurnaroundTime+0x40>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4a3b      	ldr	r2, [pc, #236]	; (8009240 <USB_SetTurnaroundTime+0x124>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d202      	bcs.n	800915c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009156:	230e      	movs	r3, #14
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e057      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4a38      	ldr	r2, [pc, #224]	; (8009240 <USB_SetTurnaroundTime+0x124>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d306      	bcc.n	8009172 <USB_SetTurnaroundTime+0x56>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a37      	ldr	r2, [pc, #220]	; (8009244 <USB_SetTurnaroundTime+0x128>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d202      	bcs.n	8009172 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800916c:	230d      	movs	r3, #13
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e04c      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4a33      	ldr	r2, [pc, #204]	; (8009244 <USB_SetTurnaroundTime+0x128>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d306      	bcc.n	8009188 <USB_SetTurnaroundTime+0x6c>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	4a32      	ldr	r2, [pc, #200]	; (8009248 <USB_SetTurnaroundTime+0x12c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d802      	bhi.n	8009188 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009182:	230c      	movs	r3, #12
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e041      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a2f      	ldr	r2, [pc, #188]	; (8009248 <USB_SetTurnaroundTime+0x12c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d906      	bls.n	800919e <USB_SetTurnaroundTime+0x82>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4a2e      	ldr	r2, [pc, #184]	; (800924c <USB_SetTurnaroundTime+0x130>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d802      	bhi.n	800919e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009198:	230b      	movs	r3, #11
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e036      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4a2a      	ldr	r2, [pc, #168]	; (800924c <USB_SetTurnaroundTime+0x130>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d906      	bls.n	80091b4 <USB_SetTurnaroundTime+0x98>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4a29      	ldr	r2, [pc, #164]	; (8009250 <USB_SetTurnaroundTime+0x134>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d802      	bhi.n	80091b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80091ae:	230a      	movs	r3, #10
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e02b      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4a26      	ldr	r2, [pc, #152]	; (8009250 <USB_SetTurnaroundTime+0x134>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d906      	bls.n	80091ca <USB_SetTurnaroundTime+0xae>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4a25      	ldr	r2, [pc, #148]	; (8009254 <USB_SetTurnaroundTime+0x138>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d202      	bcs.n	80091ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80091c4:	2309      	movs	r3, #9
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e020      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4a21      	ldr	r2, [pc, #132]	; (8009254 <USB_SetTurnaroundTime+0x138>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d306      	bcc.n	80091e0 <USB_SetTurnaroundTime+0xc4>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4a20      	ldr	r2, [pc, #128]	; (8009258 <USB_SetTurnaroundTime+0x13c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d802      	bhi.n	80091e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091da:	2308      	movs	r3, #8
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e015      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <USB_SetTurnaroundTime+0x13c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d906      	bls.n	80091f6 <USB_SetTurnaroundTime+0xda>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4a1c      	ldr	r2, [pc, #112]	; (800925c <USB_SetTurnaroundTime+0x140>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d202      	bcs.n	80091f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091f0:	2307      	movs	r3, #7
 80091f2:	617b      	str	r3, [r7, #20]
 80091f4:	e00a      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091f6:	2306      	movs	r3, #6
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e007      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d102      	bne.n	8009208 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009202:	2309      	movs	r3, #9
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e001      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009208:	2309      	movs	r3, #9
 800920a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	029b      	lsls	r3, r3, #10
 8009220:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009224:	431a      	orrs	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	00d8acbf 	.word	0x00d8acbf
 800923c:	00e4e1c0 	.word	0x00e4e1c0
 8009240:	00f42400 	.word	0x00f42400
 8009244:	01067380 	.word	0x01067380
 8009248:	011a499f 	.word	0x011a499f
 800924c:	01312cff 	.word	0x01312cff
 8009250:	014ca43f 	.word	0x014ca43f
 8009254:	016e3600 	.word	0x016e3600
 8009258:	01a6ab1f 	.word	0x01a6ab1f
 800925c:	01e84800 	.word	0x01e84800

08009260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f043 0201 	orr.w	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f023 0201 	bic.w	r2, r3, #1
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d115      	bne.n	80092f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7f7 fe22 	bl	8000f1c <HAL_Delay>
      ms++;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3301      	adds	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f93f 	bl	800a562 <USB_GetMode>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d01e      	beq.n	8009328 <USB_SetCurrentMode+0x84>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b31      	cmp	r3, #49	; 0x31
 80092ee:	d9f0      	bls.n	80092d2 <USB_SetCurrentMode+0x2e>
 80092f0:	e01a      	b.n	8009328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d115      	bne.n	8009324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009304:	2001      	movs	r0, #1
 8009306:	f7f7 fe09 	bl	8000f1c <HAL_Delay>
      ms++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f926 	bl	800a562 <USB_GetMode>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <USB_SetCurrentMode+0x84>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b31      	cmp	r3, #49	; 0x31
 8009320:	d9f0      	bls.n	8009304 <USB_SetCurrentMode+0x60>
 8009322:	e001      	b.n	8009328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e005      	b.n	8009334 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b32      	cmp	r3, #50	; 0x32
 800932c:	d101      	bne.n	8009332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800933c:	b084      	sub	sp, #16
 800933e:	b580      	push	{r7, lr}
 8009340:	b086      	sub	sp, #24
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800934a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009356:	2300      	movs	r3, #0
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	e009      	b.n	8009370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3340      	adds	r3, #64	; 0x40
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	2200      	movs	r2, #0
 8009368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	3301      	adds	r3, #1
 800936e:	613b      	str	r3, [r7, #16]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b0e      	cmp	r3, #14
 8009374:	d9f2      	bls.n	800935c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d11c      	bne.n	80093b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800938a:	f043 0302 	orr.w	r3, r3, #2
 800938e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e005      	b.n	80093c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c8:	461a      	mov	r2, r3
 80093ca:	2300      	movs	r3, #0
 80093cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d4:	4619      	mov	r1, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093dc:	461a      	mov	r2, r3
 80093de:	680b      	ldr	r3, [r1, #0]
 80093e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d10c      	bne.n	8009402 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093ee:	2100      	movs	r1, #0
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f965 	bl	80096c0 <USB_SetDevSpeed>
 80093f6:	e008      	b.n	800940a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093f8:	2101      	movs	r1, #1
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f960 	bl	80096c0 <USB_SetDevSpeed>
 8009400:	e003      	b.n	800940a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009402:	2103      	movs	r1, #3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f95b 	bl	80096c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800940a:	2110      	movs	r1, #16
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8f3 	bl	80095f8 <USB_FlushTxFifo>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f91f 	bl	8009660 <USB_FlushRxFifo>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	461a      	mov	r2, r3
 8009434:	2300      	movs	r3, #0
 8009436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943e:	461a      	mov	r2, r3
 8009440:	2300      	movs	r3, #0
 8009442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	461a      	mov	r2, r3
 800944c:	2300      	movs	r3, #0
 800944e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009450:	2300      	movs	r3, #0
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	e043      	b.n	80094de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800946c:	d118      	bne.n	80094a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	461a      	mov	r2, r3
 8009482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	e013      	b.n	80094b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009496:	461a      	mov	r2, r3
 8009498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e008      	b.n	80094b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	461a      	mov	r2, r3
 80094ae:	2300      	movs	r3, #0
 80094b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094be:	461a      	mov	r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	461a      	mov	r2, r3
 80094d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	3301      	adds	r3, #1
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d3b7      	bcc.n	8009456 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094e6:	2300      	movs	r3, #0
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	e043      	b.n	8009574 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009502:	d118      	bne.n	8009536 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009516:	461a      	mov	r2, r3
 8009518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	e013      	b.n	8009548 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952c:	461a      	mov	r2, r3
 800952e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	e008      	b.n	8009548 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009542:	461a      	mov	r2, r3
 8009544:	2300      	movs	r3, #0
 8009546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009554:	461a      	mov	r2, r3
 8009556:	2300      	movs	r3, #0
 8009558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	461a      	mov	r2, r3
 8009568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800956c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3301      	adds	r3, #1
 8009572:	613b      	str	r3, [r7, #16]
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	429a      	cmp	r2, r3
 800957a:	d3b7      	bcc.n	80094ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800958a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800958e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800959c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d105      	bne.n	80095b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	f043 0210 	orr.w	r2, r3, #16
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <USB_DevInit+0x2b4>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d005      	beq.n	80095ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f043 0208 	orr.w	r2, r3, #8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d105      	bne.n	80095e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <USB_DevInit+0x2b8>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ec:	b004      	add	sp, #16
 80095ee:	4770      	bx	lr
 80095f0:	803c3800 	.word	0x803c3800
 80095f4:	40000004 	.word	0x40000004

080095f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3301      	adds	r3, #1
 800960a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a13      	ldr	r2, [pc, #76]	; (800965c <USB_FlushTxFifo+0x64>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d901      	bls.n	8009618 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e01b      	b.n	8009650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	daf2      	bge.n	8009606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	019b      	lsls	r3, r3, #6
 8009628:	f043 0220 	orr.w	r2, r3, #32
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <USB_FlushTxFifo+0x64>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d901      	bls.n	8009642 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e006      	b.n	8009650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b20      	cmp	r3, #32
 800964c:	d0f0      	beq.n	8009630 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	00030d40 	.word	0x00030d40

08009660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4a11      	ldr	r2, [pc, #68]	; (80096bc <USB_FlushRxFifo+0x5c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d901      	bls.n	800967e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e018      	b.n	80096b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	daf2      	bge.n	800966c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2210      	movs	r2, #16
 800968e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <USB_FlushRxFifo+0x5c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d901      	bls.n	80096a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e006      	b.n	80096b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0310 	and.w	r3, r3, #16
 80096aa:	2b10      	cmp	r3, #16
 80096ac:	d0f0      	beq.n	8009690 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	00030d40 	.word	0x00030d40

080096c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	68f9      	ldr	r1, [r7, #12]
 80096dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e0:	4313      	orrs	r3, r2
 80096e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f003 0306 	and.w	r3, r3, #6
 800970a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d102      	bne.n	8009718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]
 8009716:	e00a      	b.n	800972e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d002      	beq.n	8009724 <USB_GetDevSpeed+0x32>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b06      	cmp	r3, #6
 8009722:	d102      	bne.n	800972a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009724:	2302      	movs	r3, #2
 8009726:	75fb      	strb	r3, [r7, #23]
 8009728:	e001      	b.n	800972e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800972a:	230f      	movs	r3, #15
 800972c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	785b      	ldrb	r3, [r3, #1]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d139      	bne.n	80097cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975e:	69da      	ldr	r2, [r3, #28]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	2101      	movs	r1, #1
 800976a:	fa01 f303 	lsl.w	r3, r1, r3
 800976e:	b29b      	uxth	r3, r3
 8009770:	68f9      	ldr	r1, [r7, #12]
 8009772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009776:	4313      	orrs	r3, r2
 8009778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d153      	bne.n	8009838 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	791b      	ldrb	r3, [r3, #4]
 80097aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	059b      	lsls	r3, r3, #22
 80097b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	0159      	lsls	r1, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	440b      	add	r3, r1
 80097be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c2:	4619      	mov	r1, r3
 80097c4:	4b20      	ldr	r3, [pc, #128]	; (8009848 <USB_ActivateEndpoint+0x10c>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	600b      	str	r3, [r1, #0]
 80097ca:	e035      	b.n	8009838 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	69da      	ldr	r2, [r3, #28]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	2101      	movs	r1, #1
 80097de:	fa01 f303 	lsl.w	r3, r1, r3
 80097e2:	041b      	lsls	r3, r3, #16
 80097e4:	68f9      	ldr	r1, [r7, #12]
 80097e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ea:	4313      	orrs	r3, r2
 80097ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d119      	bne.n	8009838 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	791b      	ldrb	r3, [r3, #4]
 800981e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009820:	430b      	orrs	r3, r1
 8009822:	431a      	orrs	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	0159      	lsls	r1, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	440b      	add	r3, r1
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	4619      	mov	r1, r3
 8009832:	4b05      	ldr	r3, [pc, #20]	; (8009848 <USB_ActivateEndpoint+0x10c>)
 8009834:	4313      	orrs	r3, r2
 8009836:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	10008000 	.word	0x10008000

0800984c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d161      	bne.n	800992c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800987a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987e:	d11f      	bne.n	80098c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800989e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	2101      	movs	r1, #1
 80098d2:	fa01 f303 	lsl.w	r3, r1, r3
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	43db      	mvns	r3, r3
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098e0:	4013      	ands	r3, r2
 80098e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	2101      	movs	r1, #1
 80098f6:	fa01 f303 	lsl.w	r3, r1, r3
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	43db      	mvns	r3, r3
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009904:	4013      	ands	r3, r2
 8009906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	0159      	lsls	r1, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	440b      	add	r3, r1
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	4619      	mov	r1, r3
 8009924:	4b35      	ldr	r3, [pc, #212]	; (80099fc <USB_DeactivateEndpoint+0x1b0>)
 8009926:	4013      	ands	r3, r2
 8009928:	600b      	str	r3, [r1, #0]
 800992a:	e060      	b.n	80099ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800993e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009942:	d11f      	bne.n	8009984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	440a      	add	r2, r1
 800997a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	2101      	movs	r1, #1
 8009996:	fa01 f303 	lsl.w	r3, r1, r3
 800999a:	041b      	lsls	r3, r3, #16
 800999c:	43db      	mvns	r3, r3
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a4:	4013      	ands	r3, r2
 80099a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	69da      	ldr	r2, [r3, #28]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	2101      	movs	r1, #1
 80099ba:	fa01 f303 	lsl.w	r3, r1, r3
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	43db      	mvns	r3, r3
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099c8:	4013      	ands	r3, r2
 80099ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	0159      	lsls	r1, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	440b      	add	r3, r1
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	4619      	mov	r1, r3
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <USB_DeactivateEndpoint+0x1b4>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	ec337800 	.word	0xec337800
 8009a00:	eff37800 	.word	0xeff37800

08009a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	f040 8181 	bne.w	8009d28 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d132      	bne.n	8009a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	0159      	lsls	r1, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	440b      	add	r3, r1
 8009a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4ba5      	ldr	r3, [pc, #660]	; (8009ce0 <USB_EPStartXfer+0x2dc>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	0159      	lsls	r1, r3, #5
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4b95      	ldr	r3, [pc, #596]	; (8009ce4 <USB_EPStartXfer+0x2e0>)
 8009a8e:	4013      	ands	r3, r2
 8009a90:	610b      	str	r3, [r1, #16]
 8009a92:	e092      	b.n	8009bba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	691a      	ldr	r2, [r3, #16]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	0159      	lsls	r1, r3, #5
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aae:	4619      	mov	r1, r3
 8009ab0:	4b8c      	ldr	r3, [pc, #560]	; (8009ce4 <USB_EPStartXfer+0x2e0>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	0159      	lsls	r1, r3, #5
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	440b      	add	r3, r1
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4b83      	ldr	r3, [pc, #524]	; (8009ce0 <USB_EPStartXfer+0x2dc>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d11a      	bne.n	8009b14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	691a      	ldr	r2, [r3, #16]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b10:	6113      	str	r3, [r2, #16]
 8009b12:	e01b      	b.n	8009b4c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b20:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6919      	ldr	r1, [r3, #16]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	440b      	add	r3, r1
 8009b2c:	1e59      	subs	r1, r3, #1
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b36:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009b38:	4b6b      	ldr	r3, [pc, #428]	; (8009ce8 <USB_EPStartXfer+0x2e4>)
 8009b3a:	400b      	ands	r3, r1
 8009b3c:	69b9      	ldr	r1, [r7, #24]
 8009b3e:	0148      	lsls	r0, r1, #5
 8009b40:	69f9      	ldr	r1, [r7, #28]
 8009b42:	4401      	add	r1, r0
 8009b44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b62:	69b9      	ldr	r1, [r7, #24]
 8009b64:	0148      	lsls	r0, r1, #5
 8009b66:	69f9      	ldr	r1, [r7, #28]
 8009b68:	4401      	add	r1, r0
 8009b6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	791b      	ldrb	r3, [r3, #4]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d11f      	bne.n	8009bba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009b98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d14b      	bne.n	8009c58 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	791b      	ldrb	r3, [r3, #4]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d128      	bne.n	8009c36 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d110      	bne.n	8009c16 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e00f      	b.n	8009c36 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	0151      	lsls	r1, r2, #5
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	0151      	lsls	r1, r2, #5
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	440a      	add	r2, r1
 8009c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	e16a      	b.n	8009f2e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	791b      	ldrb	r3, [r3, #4]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d015      	beq.n	8009cac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8152 	beq.w	8009f2e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca0:	69f9      	ldr	r1, [r7, #28]
 8009ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	634b      	str	r3, [r1, #52]	; 0x34
 8009caa:	e140      	b.n	8009f2e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d117      	bne.n	8009cec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	0151      	lsls	r1, r2, #5
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	440a      	add	r2, r1
 8009cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	e016      	b.n	8009d0c <USB_EPStartXfer+0x308>
 8009cde:	bf00      	nop
 8009ce0:	e007ffff 	.word	0xe007ffff
 8009ce4:	fff80000 	.word	0xfff80000
 8009ce8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	0151      	lsls	r1, r2, #5
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	440a      	add	r2, r1
 8009d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	68d9      	ldr	r1, [r3, #12]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	b298      	uxth	r0, r3
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4603      	mov	r3, r0
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 f9b9 	bl	800a098 <USB_WritePacket>
 8009d26:	e102      	b.n	8009f2e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d34:	691a      	ldr	r2, [r3, #16]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	0159      	lsls	r1, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	440b      	add	r3, r1
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d42:	4619      	mov	r1, r3
 8009d44:	4b7c      	ldr	r3, [pc, #496]	; (8009f38 <USB_EPStartXfer+0x534>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	691a      	ldr	r2, [r3, #16]
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	0159      	lsls	r1, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	440b      	add	r3, r1
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	4619      	mov	r1, r3
 8009d66:	4b75      	ldr	r3, [pc, #468]	; (8009f3c <USB_EPStartXfer+0x538>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d12f      	bne.n	8009dd2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009da0:	69b9      	ldr	r1, [r7, #24]
 8009da2:	0148      	lsls	r0, r1, #5
 8009da4:	69f9      	ldr	r1, [r7, #28]
 8009da6:	4401      	add	r1, r0
 8009da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dac:	4313      	orrs	r3, r2
 8009dae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dce:	6113      	str	r3, [r2, #16]
 8009dd0:	e05f      	b.n	8009e92 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d123      	bne.n	8009e22 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	0148      	lsls	r0, r1, #5
 8009df4:	69f9      	ldr	r1, [r7, #28]
 8009df6:	4401      	add	r1, r0
 8009df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e1e:	6113      	str	r3, [r2, #16]
 8009e20:	e037      	b.n	8009e92 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	691a      	ldr	r2, [r3, #16]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	1e5a      	subs	r2, r3, #1
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	8afa      	ldrh	r2, [r7, #22]
 8009e3e:	fb03 f202 	mul.w	r2, r3, r2
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	8afb      	ldrh	r3, [r7, #22]
 8009e56:	04d9      	lsls	r1, r3, #19
 8009e58:	4b39      	ldr	r3, [pc, #228]	; (8009f40 <USB_EPStartXfer+0x53c>)
 8009e5a:	400b      	ands	r3, r1
 8009e5c:	69b9      	ldr	r1, [r7, #24]
 8009e5e:	0148      	lsls	r0, r1, #5
 8009e60:	69f9      	ldr	r1, [r7, #28]
 8009e62:	4401      	add	r1, r0
 8009e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e82:	69b9      	ldr	r1, [r7, #24]
 8009e84:	0148      	lsls	r0, r1, #5
 8009e86:	69f9      	ldr	r1, [r7, #28]
 8009e88:	4401      	add	r1, r0
 8009e8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10d      	bne.n	8009eb4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	68d9      	ldr	r1, [r3, #12]
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb0:	460a      	mov	r2, r1
 8009eb2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	791b      	ldrb	r3, [r3, #4]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d128      	bne.n	8009f0e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d110      	bne.n	8009eee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	e00f      	b.n	8009f0e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	fff80000 	.word	0xfff80000
 8009f3c:	e007ffff 	.word	0xe007ffff
 8009f40:	1ff80000 	.word	0x1ff80000

08009f44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d14a      	bne.n	8009ff8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f7a:	f040 8086 	bne.w	800a08a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	7812      	ldrb	r2, [r2, #0]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	7812      	ldrb	r2, [r2, #0]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d902      	bls.n	8009fdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009fda:	e056      	b.n	800a08a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ff4:	d0e7      	beq.n	8009fc6 <USB_EPStopXfer+0x82>
 8009ff6:	e048      	b.n	800a08a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a010:	d13b      	bne.n	800a08a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a034:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	7812      	ldrb	r2, [r2, #0]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a058:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f242 7210 	movw	r2, #10000	; 0x2710
 800a066:	4293      	cmp	r3, r2
 800a068:	d902      	bls.n	800a070 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	75fb      	strb	r3, [r7, #23]
          break;
 800a06e:	e00c      	b.n	800a08a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a088:	d0e7      	beq.n	800a05a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a098:	b480      	push	{r7}
 800a09a:	b089      	sub	sp, #36	; 0x24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	71fb      	strb	r3, [r7, #7]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d123      	bne.n	800a106 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0be:	88bb      	ldrh	r3, [r7, #4]
 800a0c0:	3303      	adds	r3, #3
 800a0c2:	089b      	lsrs	r3, r3, #2
 800a0c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e018      	b.n	800a0fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	031a      	lsls	r2, r3, #12
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d8:	461a      	mov	r2, r3
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	61bb      	str	r3, [r7, #24]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	429a      	cmp	r2, r3
 800a104:	d3e2      	bcc.n	800a0cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3724      	adds	r7, #36	; 0x24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a114:	b480      	push	{r7}
 800a116:	b08b      	sub	sp, #44	; 0x2c
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	b29b      	uxth	r3, r3
 800a130:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a132:	88fb      	ldrh	r3, [r7, #6]
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	e014      	b.n	800a16a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	3301      	adds	r3, #1
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	3301      	adds	r3, #1
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	3301      	adds	r3, #1
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	3301      	adds	r3, #1
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	3301      	adds	r3, #1
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	6a3a      	ldr	r2, [r7, #32]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d3e6      	bcc.n	800a140 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a172:	8bfb      	ldrh	r3, [r7, #30]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01e      	beq.n	800a1b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a182:	461a      	mov	r2, r3
 800a184:	f107 0310 	add.w	r3, r7, #16
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	fa22 f303 	lsr.w	r3, r2, r3
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	701a      	strb	r2, [r3, #0]
      i++;
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1aa:	8bfb      	ldrh	r3, [r7, #30]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1b0:	8bfb      	ldrh	r3, [r7, #30]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1ea      	bne.n	800a18c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	372c      	adds	r7, #44	; 0x2c
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d12c      	bne.n	800a23a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	db12      	blt.n	800a218 <USB_EPSetStall+0x54>
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00f      	beq.n	800a218 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a216:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	0151      	lsls	r1, r2, #5
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	440a      	add	r2, r1
 800a22e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e02b      	b.n	800a292 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	db12      	blt.n	800a272 <USB_EPSetStall+0xae>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00f      	beq.n	800a272 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	0151      	lsls	r1, r2, #5
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	440a      	add	r2, r1
 800a268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a26c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a270:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	0151      	lsls	r1, r2, #5
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	440a      	add	r2, r1
 800a288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a28c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a290:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d128      	bne.n	800a30e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	791b      	ldrb	r3, [r3, #4]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d003      	beq.n	800a2ec <USB_EPClearStall+0x4c>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	791b      	ldrb	r3, [r3, #4]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d138      	bne.n	800a35e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	0151      	lsls	r1, r2, #5
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	440a      	add	r2, r1
 800a302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	e027      	b.n	800a35e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	0151      	lsls	r1, r2, #5
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	440a      	add	r2, r1
 800a324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a32c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	791b      	ldrb	r3, [r3, #4]
 800a332:	2b03      	cmp	r3, #3
 800a334:	d003      	beq.n	800a33e <USB_EPClearStall+0x9e>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	791b      	ldrb	r3, [r3, #4]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d10f      	bne.n	800a35e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	440a      	add	r2, r1
 800a354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a35c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a38a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a38e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a3a0:	68f9      	ldr	r1, [r7, #12]
 800a3a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3e6:	f023 0302 	bic.w	r3, r3, #2
 800a3ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a414:	f023 0303 	bic.w	r3, r3, #3
 800a418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a428:	f043 0302 	orr.w	r3, r3, #2
 800a42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4013      	ands	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a454:	68fb      	ldr	r3, [r7, #12]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	4013      	ands	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	0c1b      	lsrs	r3, r3, #16
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	b29b      	uxth	r3, r3
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a506:	b480      	push	{r7}
 800a508:	b087      	sub	sp, #28
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	460b      	mov	r3, r1
 800a510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a528:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	fa22 f303 	lsr.w	r3, r2, r3
 800a536:	01db      	lsls	r3, r3, #7
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4013      	ands	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a554:	68bb      	ldr	r3, [r7, #8]
}
 800a556:	4618      	mov	r0, r3
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	f003 0301 	and.w	r3, r3, #1
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59a:	4619      	mov	r1, r3
 800a59c:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <USB_ActivateSetup+0x44>)
 800a59e:	4013      	ands	r3, r2
 800a5a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	fffff800 	.word	0xfffff800

0800a5c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	333c      	adds	r3, #60	; 0x3c
 800a5de:	3304      	adds	r3, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	4a26      	ldr	r2, [pc, #152]	; (800a680 <USB_EP0_OutStart+0xb8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d90a      	bls.n	800a602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5fc:	d101      	bne.n	800a602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e037      	b.n	800a672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a608:	461a      	mov	r2, r3
 800a60a:	2300      	movs	r3, #0
 800a60c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a630:	f043 0318 	orr.w	r3, r3, #24
 800a634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a644:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a64a:	7afb      	ldrb	r3, [r7, #11]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d10f      	bne.n	800a670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a656:	461a      	mov	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a66a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a66e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	4f54300a 	.word	0x4f54300a

0800a684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3301      	adds	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4a13      	ldr	r2, [pc, #76]	; (800a6e8 <USB_CoreReset+0x64>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d901      	bls.n	800a6a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e01b      	b.n	800a6da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	daf2      	bge.n	800a690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f043 0201 	orr.w	r2, r3, #1
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4a09      	ldr	r2, [pc, #36]	; (800a6e8 <USB_CoreReset+0x64>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d901      	bls.n	800a6cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e006      	b.n	800a6da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d0f0      	beq.n	800a6ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	00030d40 	.word	0x00030d40

0800a6ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6fc:	f002 fcba 	bl	800d074 <USBD_static_malloc>
 800a700:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32b0      	adds	r2, #176	; 0xb0
 800a712:	2100      	movs	r1, #0
 800a714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a718:	2302      	movs	r3, #2
 800a71a:	e0d4      	b.n	800a8c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a71c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f002 fda2 	bl	800d26c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	32b0      	adds	r2, #176	; 0xb0
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	32b0      	adds	r2, #176	; 0xb0
 800a742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7c1b      	ldrb	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d138      	bne.n	800a7c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a754:	4b5e      	ldr	r3, [pc, #376]	; (800a8d0 <USBD_CDC_Init+0x1e4>)
 800a756:	7819      	ldrb	r1, [r3, #0]
 800a758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a75c:	2202      	movs	r2, #2
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f002 fb65 	bl	800ce2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a764:	4b5a      	ldr	r3, [pc, #360]	; (800a8d0 <USBD_CDC_Init+0x1e4>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3324      	adds	r3, #36	; 0x24
 800a77a:	2201      	movs	r2, #1
 800a77c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a77e:	4b55      	ldr	r3, [pc, #340]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a780:	7819      	ldrb	r1, [r3, #0]
 800a782:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a786:	2202      	movs	r2, #2
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f002 fb50 	bl	800ce2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a78e:	4b51      	ldr	r3, [pc, #324]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	f003 020f 	and.w	r2, r3, #15
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a7aa:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <USBD_CDC_Init+0x1ec>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f003 020f 	and.w	r2, r3, #15
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	3326      	adds	r3, #38	; 0x26
 800a7c0:	2210      	movs	r2, #16
 800a7c2:	801a      	strh	r2, [r3, #0]
 800a7c4:	e035      	b.n	800a832 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7c6:	4b42      	ldr	r3, [pc, #264]	; (800a8d0 <USBD_CDC_Init+0x1e4>)
 800a7c8:	7819      	ldrb	r1, [r3, #0]
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f002 fb2d 	bl	800ce2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7d4:	4b3e      	ldr	r3, [pc, #248]	; (800a8d0 <USBD_CDC_Init+0x1e4>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	f003 020f 	and.w	r2, r3, #15
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	3324      	adds	r3, #36	; 0x24
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7ee:	4b39      	ldr	r3, [pc, #228]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a7f0:	7819      	ldrb	r1, [r3, #0]
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 fb19 	bl	800ce2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7fc:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f003 020f 	and.w	r2, r3, #15
 800a804:	6879      	ldr	r1, [r7, #4]
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	440b      	add	r3, r1
 800a810:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a814:	2201      	movs	r2, #1
 800a816:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a818:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <USBD_CDC_Init+0x1ec>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 020f 	and.w	r2, r3, #15
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	3326      	adds	r3, #38	; 0x26
 800a82e:	2210      	movs	r2, #16
 800a830:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a832:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <USBD_CDC_Init+0x1ec>)
 800a834:	7819      	ldrb	r1, [r3, #0]
 800a836:	2308      	movs	r3, #8
 800a838:	2203      	movs	r2, #3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f002 faf7 	bl	800ce2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <USBD_CDC_Init+0x1ec>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 020f 	and.w	r2, r3, #15
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	3324      	adds	r3, #36	; 0x24
 800a856:	2201      	movs	r2, #1
 800a858:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	33b0      	adds	r3, #176	; 0xb0
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a890:	2302      	movs	r3, #2
 800a892:	e018      	b.n	800a8c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7c1b      	ldrb	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a89e:	7819      	ldrb	r1, [r3, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f002 fbae 	bl	800d00c <USBD_LL_PrepareReceive>
 800a8b0:	e008      	b.n	800a8c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <USBD_CDC_Init+0x1e8>)
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f002 fba4 	bl	800d00c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	24000097 	.word	0x24000097
 800a8d4:	24000098 	.word	0x24000098
 800a8d8:	24000099 	.word	0x24000099

0800a8dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8e8:	4b3a      	ldr	r3, [pc, #232]	; (800a9d4 <USBD_CDC_DeInit+0xf8>)
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f002 fac3 	bl	800ce7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8f4:	4b37      	ldr	r3, [pc, #220]	; (800a9d4 <USBD_CDC_DeInit+0xf8>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	f003 020f 	and.w	r2, r3, #15
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	440b      	add	r3, r1
 800a908:	3324      	adds	r3, #36	; 0x24
 800a90a:	2200      	movs	r2, #0
 800a90c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a90e:	4b32      	ldr	r3, [pc, #200]	; (800a9d8 <USBD_CDC_DeInit+0xfc>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f002 fab0 	bl	800ce7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a91a:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <USBD_CDC_DeInit+0xfc>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f003 020f 	and.w	r2, r3, #15
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a932:	2200      	movs	r2, #0
 800a934:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a936:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <USBD_CDC_DeInit+0x100>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f002 fa9c 	bl	800ce7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a942:	4b26      	ldr	r3, [pc, #152]	; (800a9dc <USBD_CDC_DeInit+0x100>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f003 020f 	and.w	r2, r3, #15
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	3324      	adds	r3, #36	; 0x24
 800a958:	2200      	movs	r2, #0
 800a95a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a95c:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <USBD_CDC_DeInit+0x100>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 020f 	and.w	r2, r3, #15
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	3326      	adds	r3, #38	; 0x26
 800a972:	2200      	movs	r2, #0
 800a974:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	32b0      	adds	r2, #176	; 0xb0
 800a980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d01f      	beq.n	800a9c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	33b0      	adds	r3, #176	; 0xb0
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	32b0      	adds	r2, #176	; 0xb0
 800a9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f002 fb70 	bl	800d090 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	32b0      	adds	r2, #176	; 0xb0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	24000097 	.word	0x24000097
 800a9d8:	24000098 	.word	0x24000098
 800a9dc:	24000099 	.word	0x24000099

0800a9e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	32b0      	adds	r2, #176	; 0xb0
 800a9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e0bf      	b.n	800ab90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d050      	beq.n	800aabe <USBD_CDC_Setup+0xde>
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	f040 80af 	bne.w	800ab80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	88db      	ldrh	r3, [r3, #6]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d03a      	beq.n	800aaa0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	b25b      	sxtb	r3, r3
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	da1b      	bge.n	800aa6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	33b0      	adds	r3, #176	; 0xb0
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	88d2      	ldrh	r2, [r2, #6]
 800aa50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	2b07      	cmp	r3, #7
 800aa58:	bf28      	it	cs
 800aa5a:	2307      	movcs	r3, #7
 800aa5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	89fa      	ldrh	r2, [r7, #14]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 fd89 	bl	800c57c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa6a:	e090      	b.n	800ab8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	785a      	ldrb	r2, [r3, #1]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	88db      	ldrh	r3, [r3, #6]
 800aa7a:	2b3f      	cmp	r3, #63	; 0x3f
 800aa7c:	d803      	bhi.n	800aa86 <USBD_CDC_Setup+0xa6>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	88db      	ldrh	r3, [r3, #6]
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	e000      	b.n	800aa88 <USBD_CDC_Setup+0xa8>
 800aa86:	2240      	movs	r2, #64	; 0x40
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa8e:	6939      	ldr	r1, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa96:	461a      	mov	r2, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 fd9b 	bl	800c5d4 <USBD_CtlPrepareRx>
      break;
 800aa9e:	e076      	b.n	800ab8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	33b0      	adds	r3, #176	; 0xb0
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	7850      	ldrb	r0, [r2, #1]
 800aab6:	2200      	movs	r2, #0
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	4798      	blx	r3
      break;
 800aabc:	e067      	b.n	800ab8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	2b0b      	cmp	r3, #11
 800aac4:	d851      	bhi.n	800ab6a <USBD_CDC_Setup+0x18a>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <USBD_CDC_Setup+0xec>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800aafd 	.word	0x0800aafd
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800ab6b 	.word	0x0800ab6b
 800aad8:	0800ab6b 	.word	0x0800ab6b
 800aadc:	0800ab6b 	.word	0x0800ab6b
 800aae0:	0800ab6b 	.word	0x0800ab6b
 800aae4:	0800ab6b 	.word	0x0800ab6b
 800aae8:	0800ab6b 	.word	0x0800ab6b
 800aaec:	0800ab6b 	.word	0x0800ab6b
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800ab27 	.word	0x0800ab27
 800aaf8:	0800ab51 	.word	0x0800ab51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d107      	bne.n	800ab18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab08:	f107 030a 	add.w	r3, r7, #10
 800ab0c:	2202      	movs	r2, #2
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f001 fd33 	bl	800c57c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab16:	e032      	b.n	800ab7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 fcbd 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	75fb      	strb	r3, [r7, #23]
          break;
 800ab24:	e02b      	b.n	800ab7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d107      	bne.n	800ab42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab32:	f107 030d 	add.w	r3, r7, #13
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 fd1e 	bl	800c57c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab40:	e01d      	b.n	800ab7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 fca8 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab4e:	e016      	b.n	800ab7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d00f      	beq.n	800ab7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fc9b 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab68:	e008      	b.n	800ab7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f001 fc94 	bl	800c49a <USBD_CtlError>
          ret = USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	75fb      	strb	r3, [r7, #23]
          break;
 800ab76:	e002      	b.n	800ab7e <USBD_CDC_Setup+0x19e>
          break;
 800ab78:	bf00      	nop
 800ab7a:	e008      	b.n	800ab8e <USBD_CDC_Setup+0x1ae>
          break;
 800ab7c:	bf00      	nop
      }
      break;
 800ab7e:	e006      	b.n	800ab8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fc89 	bl	800c49a <USBD_CtlError>
      ret = USBD_FAIL;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	32b0      	adds	r2, #176	; 0xb0
 800abb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e065      	b.n	800ac8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	32b0      	adds	r2, #176	; 0xb0
 800abcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	f003 020f 	and.w	r2, r3, #15
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	3318      	adds	r3, #24
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d02f      	beq.n	800ac4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	f003 020f 	and.w	r2, r3, #15
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	3318      	adds	r3, #24
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	f003 010f 	and.w	r1, r3, #15
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4403      	add	r3, r0
 800ac14:	3344      	adds	r3, #68	; 0x44
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac1c:	fb01 f303 	mul.w	r3, r1, r3
 800ac20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d112      	bne.n	800ac4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac26:	78fb      	ldrb	r3, [r7, #3]
 800ac28:	f003 020f 	and.w	r2, r3, #15
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	3318      	adds	r3, #24
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac3e:	78f9      	ldrb	r1, [r7, #3]
 800ac40:	2300      	movs	r3, #0
 800ac42:	2200      	movs	r2, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f002 f9c0 	bl	800cfca <USBD_LL_Transmit>
 800ac4a:	e01f      	b.n	800ac8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	33b0      	adds	r3, #176	; 0xb0
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d010      	beq.n	800ac8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	33b0      	adds	r3, #176	; 0xb0
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	32b0      	adds	r2, #176	; 0xb0
 800acac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	32b0      	adds	r2, #176	; 0xb0
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e01a      	b.n	800acfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f002 f9be 	bl	800d04e <USBD_LL_GetRxDataSize>
 800acd2:	4602      	mov	r2, r0
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	33b0      	adds	r3, #176	; 0xb0
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800acf8:	4611      	mov	r1, r2
 800acfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	32b0      	adds	r2, #176	; 0xb0
 800ad18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e025      	b.n	800ad74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	33b0      	adds	r3, #176	; 0xb0
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01a      	beq.n	800ad72 <USBD_CDC_EP0_RxReady+0x6c>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad42:	2bff      	cmp	r3, #255	; 0xff
 800ad44:	d015      	beq.n	800ad72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	33b0      	adds	r3, #176	; 0xb0
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad66:	b292      	uxth	r2, r2
 800ad68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	22ff      	movs	r2, #255	; 0xff
 800ad6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad84:	2182      	movs	r1, #130	; 0x82
 800ad86:	4818      	ldr	r0, [pc, #96]	; (800ade8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad88:	f000 fd4f 	bl	800b82a <USBD_GetEpDesc>
 800ad8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad8e:	2101      	movs	r1, #1
 800ad90:	4815      	ldr	r0, [pc, #84]	; (800ade8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad92:	f000 fd4a 	bl	800b82a <USBD_GetEpDesc>
 800ad96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad98:	2181      	movs	r1, #129	; 0x81
 800ad9a:	4813      	ldr	r0, [pc, #76]	; (800ade8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad9c:	f000 fd45 	bl	800b82a <USBD_GetEpDesc>
 800ada0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2210      	movs	r2, #16
 800adac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adbc:	711a      	strb	r2, [r3, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d006      	beq.n	800add6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800add0:	711a      	strb	r2, [r3, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2243      	movs	r2, #67	; 0x43
 800adda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800addc:	4b02      	ldr	r3, [pc, #8]	; (800ade8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	24000054 	.word	0x24000054

0800adec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adf4:	2182      	movs	r1, #130	; 0x82
 800adf6:	4818      	ldr	r0, [pc, #96]	; (800ae58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adf8:	f000 fd17 	bl	800b82a <USBD_GetEpDesc>
 800adfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adfe:	2101      	movs	r1, #1
 800ae00:	4815      	ldr	r0, [pc, #84]	; (800ae58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae02:	f000 fd12 	bl	800b82a <USBD_GetEpDesc>
 800ae06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae08:	2181      	movs	r1, #129	; 0x81
 800ae0a:	4813      	ldr	r0, [pc, #76]	; (800ae58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae0c:	f000 fd0d 	bl	800b82a <USBD_GetEpDesc>
 800ae10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2210      	movs	r2, #16
 800ae1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2200      	movs	r2, #0
 800ae28:	711a      	strb	r2, [r3, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f042 0202 	orr.w	r2, r2, #2
 800ae30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	711a      	strb	r2, [r3, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f042 0202 	orr.w	r2, r2, #2
 800ae44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2243      	movs	r2, #67	; 0x43
 800ae4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	24000054 	.word	0x24000054

0800ae5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae64:	2182      	movs	r1, #130	; 0x82
 800ae66:	4818      	ldr	r0, [pc, #96]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae68:	f000 fcdf 	bl	800b82a <USBD_GetEpDesc>
 800ae6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae6e:	2101      	movs	r1, #1
 800ae70:	4815      	ldr	r0, [pc, #84]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae72:	f000 fcda 	bl	800b82a <USBD_GetEpDesc>
 800ae76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae78:	2181      	movs	r1, #129	; 0x81
 800ae7a:	4813      	ldr	r0, [pc, #76]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae7c:	f000 fcd5 	bl	800b82a <USBD_GetEpDesc>
 800ae80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2210      	movs	r2, #16
 800ae8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae9c:	711a      	strb	r2, [r3, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb0:	711a      	strb	r2, [r3, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2243      	movs	r2, #67	; 0x43
 800aeba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	24000054 	.word	0x24000054

0800aecc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	220a      	movs	r2, #10
 800aed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aeda:	4b03      	ldr	r3, [pc, #12]	; (800aee8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	24000010 	.word	0x24000010

0800aeec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e009      	b.n	800af14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	33b0      	adds	r3, #176	; 0xb0
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	32b0      	adds	r2, #176	; 0xb0
 800af36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af42:	2303      	movs	r3, #3
 800af44:	e008      	b.n	800af58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	32b0      	adds	r2, #176	; 0xb0
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af84:	2303      	movs	r3, #3
 800af86:	e004      	b.n	800af92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32b0      	adds	r2, #176	; 0xb0
 800afb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800afb8:	2301      	movs	r3, #1
 800afba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e025      	b.n	800b012 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11f      	bne.n	800b010 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800afd8:	4b10      	ldr	r3, [pc, #64]	; (800b01c <USBD_CDC_TransmitPacket+0x7c>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 020f 	and.w	r2, r3, #15
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4403      	add	r3, r0
 800aff2:	3318      	adds	r3, #24
 800aff4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <USBD_CDC_TransmitPacket+0x7c>)
 800aff8:	7819      	ldrb	r1, [r3, #0]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 ffdf 	bl	800cfca <USBD_LL_Transmit>

    ret = USBD_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	24000097 	.word	0x24000097

0800b020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32b0      	adds	r2, #176	; 0xb0
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	; 0xb0
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e018      	b.n	800b080 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	7c1b      	ldrb	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <USBD_CDC_ReceivePacket+0x68>)
 800b058:	7819      	ldrb	r1, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 ffd1 	bl	800d00c <USBD_LL_PrepareReceive>
 800b06a:	e008      	b.n	800b07e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <USBD_CDC_ReceivePacket+0x68>)
 800b06e:	7819      	ldrb	r1, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b076:	2340      	movs	r3, #64	; 0x40
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 ffc7 	bl	800d00c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	24000098 	.word	0x24000098

0800b08c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e01f      	b.n	800b0e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	79fa      	ldrb	r2, [r7, #7]
 800b0d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f001 fe3d 	bl	800cd58 <USBD_LL_Init>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	e025      	b.n	800b150 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	32ae      	adds	r2, #174	; 0xae
 800b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00f      	beq.n	800b140 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	32ae      	adds	r2, #174	; 0xae
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	f107 020e 	add.w	r2, r7, #14
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	4602      	mov	r2, r0
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f001 fe49 	bl	800cdf8 <USBD_LL_Start>
 800b166:	4603      	mov	r3, r0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b178:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	78fa      	ldrb	r2, [r7, #3]
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	4798      	blx	r3
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	78fa      	ldrb	r2, [r7, #3]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f001 f90e 	bl	800c426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b226:	f003 031f 	and.w	r3, r3, #31
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d01a      	beq.n	800b264 <USBD_LL_SetupStage+0x72>
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d822      	bhi.n	800b278 <USBD_LL_SetupStage+0x86>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <USBD_LL_SetupStage+0x4a>
 800b236:	2b01      	cmp	r3, #1
 800b238:	d00a      	beq.n	800b250 <USBD_LL_SetupStage+0x5e>
 800b23a:	e01d      	b.n	800b278 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fb65 	bl	800b914 <USBD_StdDevReq>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
      break;
 800b24e:	e020      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fbcd 	bl	800b9f8 <USBD_StdItfReq>
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]
      break;
 800b262:	e016      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fc2f 	bl	800bad0 <USBD_StdEPReq>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]
      break;
 800b276:	e00c      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b282:	b2db      	uxtb	r3, r3
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f001 fe16 	bl	800ceb8 <USBD_LL_StallEP>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
      break;
 800b290:	bf00      	nop
  }

  return ret;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d16e      	bne.n	800b392 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	f040 8098 	bne.w	800b3f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	689a      	ldr	r2, [r3, #8]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d913      	bls.n	800b2fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	1ad2      	subs	r2, r2, r3
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	bf28      	it	cs
 800b2ee:	4613      	movcs	r3, r2
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f001 f98a 	bl	800c60e <USBD_CtlContinueRx>
 800b2fa:	e07d      	b.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b302:	f003 031f 	and.w	r3, r3, #31
 800b306:	2b02      	cmp	r3, #2
 800b308:	d014      	beq.n	800b334 <USBD_LL_DataOutStage+0x98>
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d81d      	bhi.n	800b34a <USBD_LL_DataOutStage+0xae>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <USBD_LL_DataOutStage+0x7c>
 800b312:	2b01      	cmp	r3, #1
 800b314:	d003      	beq.n	800b31e <USBD_LL_DataOutStage+0x82>
 800b316:	e018      	b.n	800b34a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	75bb      	strb	r3, [r7, #22]
            break;
 800b31c:	e018      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b324:	b2db      	uxtb	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 fa64 	bl	800b7f6 <USBD_CoreFindIF>
 800b32e:	4603      	mov	r3, r0
 800b330:	75bb      	strb	r3, [r7, #22]
            break;
 800b332:	e00d      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	4619      	mov	r1, r3
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fa66 	bl	800b810 <USBD_CoreFindEP>
 800b344:	4603      	mov	r3, r0
 800b346:	75bb      	strb	r3, [r7, #22]
            break;
 800b348:	e002      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	75bb      	strb	r3, [r7, #22]
            break;
 800b34e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b350:	7dbb      	ldrb	r3, [r7, #22]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d119      	bne.n	800b38a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d113      	bne.n	800b38a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b362:	7dba      	ldrb	r2, [r7, #22]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	32ae      	adds	r2, #174	; 0xae
 800b368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b372:	7dba      	ldrb	r2, [r7, #22]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b37a:	7dba      	ldrb	r2, [r7, #22]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	32ae      	adds	r2, #174	; 0xae
 800b380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f001 f950 	bl	800c630 <USBD_CtlSendStatus>
 800b390:	e032      	b.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fa37 	bl	800b810 <USBD_CoreFindEP>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a6:	7dbb      	ldrb	r3, [r7, #22]
 800b3a8:	2bff      	cmp	r3, #255	; 0xff
 800b3aa:	d025      	beq.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
 800b3ac:	7dbb      	ldrb	r3, [r7, #22]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d122      	bne.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d117      	bne.n	800b3ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3be:	7dba      	ldrb	r2, [r7, #22]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	32ae      	adds	r2, #174	; 0xae
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00f      	beq.n	800b3ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3ce:	7dba      	ldrb	r2, [r7, #22]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3d6:	7dba      	ldrb	r2, [r7, #22]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	32ae      	adds	r2, #174	; 0xae
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	7afa      	ldrb	r2, [r7, #11]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	4798      	blx	r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	e000      	b.n	800b3fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	460b      	mov	r3, r1
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d16f      	bne.n	800b4f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3314      	adds	r3, #20
 800b41a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b422:	2b02      	cmp	r3, #2
 800b424:	d15a      	bne.n	800b4dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d914      	bls.n	800b45c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	689a      	ldr	r2, [r3, #8]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	461a      	mov	r2, r3
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f001 f8b2 	bl	800c5b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b44e:	2300      	movs	r3, #0
 800b450:	2200      	movs	r2, #0
 800b452:	2100      	movs	r1, #0
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f001 fdd9 	bl	800d00c <USBD_LL_PrepareReceive>
 800b45a:	e03f      	b.n	800b4dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	429a      	cmp	r2, r3
 800b466:	d11c      	bne.n	800b4a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b470:	429a      	cmp	r2, r3
 800b472:	d316      	bcc.n	800b4a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b47e:	429a      	cmp	r2, r3
 800b480:	d20f      	bcs.n	800b4a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f001 f893 	bl	800c5b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b494:	2300      	movs	r3, #0
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f001 fdb6 	bl	800d00c <USBD_LL_PrepareReceive>
 800b4a0:	e01c      	b.n	800b4dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d10f      	bne.n	800b4ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ce:	2180      	movs	r1, #128	; 0x80
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f001 fcf1 	bl	800ceb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 f8bd 	bl	800c656 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d03a      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fe42 	bl	800b170 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4f4:	e032      	b.n	800b55c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	4619      	mov	r1, r3
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f985 	bl	800b810 <USBD_CoreFindEP>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	2bff      	cmp	r3, #255	; 0xff
 800b50e:	d025      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d122      	bne.n	800b55c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d11c      	bne.n	800b55c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b522:	7dfa      	ldrb	r2, [r7, #23]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	32ae      	adds	r2, #174	; 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d014      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b532:	7dfa      	ldrb	r2, [r7, #23]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b53a:	7dfa      	ldrb	r2, [r7, #23]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	32ae      	adds	r2, #174	; 0xae
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	7afa      	ldrb	r2, [r7, #11]
 800b548:	4611      	mov	r1, r2
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	4798      	blx	r3
 800b54e:	4603      	mov	r3, r0
 800b550:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b552:	7dbb      	ldrb	r3, [r7, #22]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b558:	7dbb      	ldrb	r3, [r7, #22]
 800b55a:	e000      	b.n	800b55e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00e      	beq.n	800b5cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6852      	ldr	r2, [r2, #4]
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	4611      	mov	r1, r2
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 fc2b 	bl	800ce2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	; 0x40
 800b5e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5e8:	2340      	movs	r3, #64	; 0x40
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2180      	movs	r1, #128	; 0x80
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 fc1d 	bl	800ce2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2240      	movs	r2, #64	; 0x40
 800b5fe:	621a      	str	r2, [r3, #32]

  return ret;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	78fa      	ldrb	r2, [r7, #3]
 800b61a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d006      	beq.n	800b64c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2204      	movs	r2, #4
 800b650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b04      	cmp	r3, #4
 800b674:	d106      	bne.n	800b684 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d110      	bne.n	800b6c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00b      	beq.n	800b6c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b6:	69db      	ldr	r3, [r3, #28]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	32ae      	adds	r2, #174	; 0xae
 800b6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e01c      	b.n	800b72e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d115      	bne.n	800b72c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	32ae      	adds	r2, #174	; 0xae
 800b70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	32ae      	adds	r2, #174	; 0xae
 800b71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	78fa      	ldrb	r2, [r7, #3]
 800b726:	4611      	mov	r1, r2
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	32ae      	adds	r2, #174	; 0xae
 800b74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	e01c      	b.n	800b792 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b03      	cmp	r3, #3
 800b762:	d115      	bne.n	800b790 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	32ae      	adds	r2, #174	; 0xae
 800b76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	32ae      	adds	r2, #174	; 0xae
 800b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	78fa      	ldrb	r2, [r7, #3]
 800b78a:	4611      	mov	r1, r2
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00e      	beq.n	800b7ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	6852      	ldr	r2, [r2, #4]
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	4611      	mov	r1, r2
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b802:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b81c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b086      	sub	sp, #24
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	885b      	ldrh	r3, [r3, #2]
 800b846:	b29a      	uxth	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	429a      	cmp	r2, r3
 800b850:	d920      	bls.n	800b894 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b85a:	e013      	b.n	800b884 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b85c:	f107 030a 	add.w	r3, r7, #10
 800b860:	4619      	mov	r1, r3
 800b862:	6978      	ldr	r0, [r7, #20]
 800b864:	f000 f81b 	bl	800b89e <USBD_GetNextDesc>
 800b868:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d108      	bne.n	800b884 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	789b      	ldrb	r3, [r3, #2]
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d008      	beq.n	800b892 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	885b      	ldrh	r3, [r3, #2]
 800b888:	b29a      	uxth	r2, r3
 800b88a:	897b      	ldrh	r3, [r7, #10]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d8e5      	bhi.n	800b85c <USBD_GetEpDesc+0x32>
 800b890:	e000      	b.n	800b894 <USBD_GetEpDesc+0x6a>
          break;
 800b892:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b894:	693b      	ldr	r3, [r7, #16]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	881a      	ldrh	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8f6:	8a3b      	ldrh	r3, [r7, #16]
 800b8f8:	021b      	lsls	r3, r3, #8
 800b8fa:	b21a      	sxth	r2, r3
 800b8fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b900:	4313      	orrs	r3, r2
 800b902:	b21b      	sxth	r3, r3
 800b904:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b906:	89fb      	ldrh	r3, [r7, #14]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b92a:	2b40      	cmp	r3, #64	; 0x40
 800b92c:	d005      	beq.n	800b93a <USBD_StdDevReq+0x26>
 800b92e:	2b40      	cmp	r3, #64	; 0x40
 800b930:	d857      	bhi.n	800b9e2 <USBD_StdDevReq+0xce>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00f      	beq.n	800b956 <USBD_StdDevReq+0x42>
 800b936:	2b20      	cmp	r3, #32
 800b938:	d153      	bne.n	800b9e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	32ae      	adds	r2, #174	; 0xae
 800b944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
      break;
 800b954:	e04a      	b.n	800b9ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d83b      	bhi.n	800b9d6 <USBD_StdDevReq+0xc2>
 800b95e:	a201      	add	r2, pc, #4	; (adr r2, 800b964 <USBD_StdDevReq+0x50>)
 800b960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b9cd 	.word	0x0800b9cd
 800b96c:	0800b9d7 	.word	0x0800b9d7
 800b970:	0800b9c3 	.word	0x0800b9c3
 800b974:	0800b9d7 	.word	0x0800b9d7
 800b978:	0800b997 	.word	0x0800b997
 800b97c:	0800b98d 	.word	0x0800b98d
 800b980:	0800b9d7 	.word	0x0800b9d7
 800b984:	0800b9af 	.word	0x0800b9af
 800b988:	0800b9a1 	.word	0x0800b9a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa3c 	bl	800be0c <USBD_GetDescriptor>
          break;
 800b994:	e024      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fba1 	bl	800c0e0 <USBD_SetAddress>
          break;
 800b99e:	e01f      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fbe0 	bl	800c168 <USBD_SetConfig>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
          break;
 800b9ac:	e018      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fc83 	bl	800c2bc <USBD_GetConfig>
          break;
 800b9b6:	e013      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fcb4 	bl	800c328 <USBD_GetStatus>
          break;
 800b9c0:	e00e      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fce3 	bl	800c390 <USBD_SetFeature>
          break;
 800b9ca:	e009      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fd07 	bl	800c3e2 <USBD_ClrFeature>
          break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fd5e 	bl	800c49a <USBD_CtlError>
          break;
 800b9de:	bf00      	nop
      }
      break;
 800b9e0:	e004      	b.n	800b9ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fd58 	bl	800c49a <USBD_CtlError>
      break;
 800b9ea:	bf00      	nop
  }

  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop

0800b9f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba0e:	2b40      	cmp	r3, #64	; 0x40
 800ba10:	d005      	beq.n	800ba1e <USBD_StdItfReq+0x26>
 800ba12:	2b40      	cmp	r3, #64	; 0x40
 800ba14:	d852      	bhi.n	800babc <USBD_StdItfReq+0xc4>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USBD_StdItfReq+0x26>
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	d14e      	bne.n	800babc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d840      	bhi.n	800baae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	889b      	ldrh	r3, [r3, #4]
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d836      	bhi.n	800baa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	889b      	ldrh	r3, [r3, #4]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fed9 	bl	800b7f6 <USBD_CoreFindIF>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	2bff      	cmp	r3, #255	; 0xff
 800ba4c:	d01d      	beq.n	800ba8a <USBD_StdItfReq+0x92>
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11a      	bne.n	800ba8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba54:	7bba      	ldrb	r2, [r7, #14]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32ae      	adds	r2, #174	; 0xae
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00f      	beq.n	800ba84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba64:	7bba      	ldrb	r2, [r7, #14]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba6c:	7bba      	ldrb	r2, [r7, #14]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	32ae      	adds	r2, #174	; 0xae
 800ba72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba82:	e004      	b.n	800ba8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba88:	e001      	b.n	800ba8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88db      	ldrh	r3, [r3, #6]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d110      	bne.n	800bab8 <USBD_StdItfReq+0xc0>
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10d      	bne.n	800bab8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fdc7 	bl	800c630 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800baa2:	e009      	b.n	800bab8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fcf7 	bl	800c49a <USBD_CtlError>
          break;
 800baac:	e004      	b.n	800bab8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fcf2 	bl	800c49a <USBD_CtlError>
          break;
 800bab6:	e000      	b.n	800baba <USBD_StdItfReq+0xc2>
          break;
 800bab8:	bf00      	nop
      }
      break;
 800baba:	e004      	b.n	800bac6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fceb 	bl	800c49a <USBD_CtlError>
      break;
 800bac4:	bf00      	nop
  }

  return ret;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	889b      	ldrh	r3, [r3, #4]
 800bae2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baec:	2b40      	cmp	r3, #64	; 0x40
 800baee:	d007      	beq.n	800bb00 <USBD_StdEPReq+0x30>
 800baf0:	2b40      	cmp	r3, #64	; 0x40
 800baf2:	f200 817f 	bhi.w	800bdf4 <USBD_StdEPReq+0x324>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d02a      	beq.n	800bb50 <USBD_StdEPReq+0x80>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	f040 817a 	bne.w	800bdf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff fe83 	bl	800b810 <USBD_CoreFindEP>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb0e:	7b7b      	ldrb	r3, [r7, #13]
 800bb10:	2bff      	cmp	r3, #255	; 0xff
 800bb12:	f000 8174 	beq.w	800bdfe <USBD_StdEPReq+0x32e>
 800bb16:	7b7b      	ldrb	r3, [r7, #13]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f040 8170 	bne.w	800bdfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb1e:	7b7a      	ldrb	r2, [r7, #13]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb26:	7b7a      	ldrb	r2, [r7, #13]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	32ae      	adds	r2, #174	; 0xae
 800bb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8163 	beq.w	800bdfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb38:	7b7a      	ldrb	r2, [r7, #13]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	32ae      	adds	r2, #174	; 0xae
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	4798      	blx	r3
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb4e:	e156      	b.n	800bdfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d008      	beq.n	800bb6a <USBD_StdEPReq+0x9a>
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	f300 8145 	bgt.w	800bde8 <USBD_StdEPReq+0x318>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 809b 	beq.w	800bc9a <USBD_StdEPReq+0x1ca>
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d03c      	beq.n	800bbe2 <USBD_StdEPReq+0x112>
 800bb68:	e13e      	b.n	800bde8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d002      	beq.n	800bb7c <USBD_StdEPReq+0xac>
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d016      	beq.n	800bba8 <USBD_StdEPReq+0xd8>
 800bb7a:	e02c      	b.n	800bbd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00d      	beq.n	800bb9e <USBD_StdEPReq+0xce>
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	2b80      	cmp	r3, #128	; 0x80
 800bb86:	d00a      	beq.n	800bb9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f001 f993 	bl	800ceb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb92:	2180      	movs	r1, #128	; 0x80
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 f98f 	bl	800ceb8 <USBD_LL_StallEP>
 800bb9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb9c:	e020      	b.n	800bbe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fc7a 	bl	800c49a <USBD_CtlError>
              break;
 800bba6:	e01b      	b.n	800bbe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	885b      	ldrh	r3, [r3, #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10e      	bne.n	800bbce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00b      	beq.n	800bbce <USBD_StdEPReq+0xfe>
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	2b80      	cmp	r3, #128	; 0x80
 800bbba:	d008      	beq.n	800bbce <USBD_StdEPReq+0xfe>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	88db      	ldrh	r3, [r3, #6]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 f975 	bl	800ceb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fd2e 	bl	800c630 <USBD_CtlSendStatus>

              break;
 800bbd4:	e004      	b.n	800bbe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fc5e 	bl	800c49a <USBD_CtlError>
              break;
 800bbde:	bf00      	nop
          }
          break;
 800bbe0:	e107      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d002      	beq.n	800bbf4 <USBD_StdEPReq+0x124>
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d016      	beq.n	800bc20 <USBD_StdEPReq+0x150>
 800bbf2:	e04b      	b.n	800bc8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00d      	beq.n	800bc16 <USBD_StdEPReq+0x146>
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b80      	cmp	r3, #128	; 0x80
 800bbfe:	d00a      	beq.n	800bc16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 f957 	bl	800ceb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc0a:	2180      	movs	r1, #128	; 0x80
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 f953 	bl	800ceb8 <USBD_LL_StallEP>
 800bc12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc14:	e040      	b.n	800bc98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fc3e 	bl	800c49a <USBD_CtlError>
              break;
 800bc1e:	e03b      	b.n	800bc98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	885b      	ldrh	r3, [r3, #2]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d136      	bne.n	800bc96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d004      	beq.n	800bc3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f001 f95d 	bl	800cef6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fcf7 	bl	800c630 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff fde2 	bl	800b810 <USBD_CoreFindEP>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc50:	7b7b      	ldrb	r3, [r7, #13]
 800bc52:	2bff      	cmp	r3, #255	; 0xff
 800bc54:	d01f      	beq.n	800bc96 <USBD_StdEPReq+0x1c6>
 800bc56:	7b7b      	ldrb	r3, [r7, #13]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d11c      	bne.n	800bc96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc5c:	7b7a      	ldrb	r2, [r7, #13]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc64:	7b7a      	ldrb	r2, [r7, #13]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	32ae      	adds	r2, #174	; 0xae
 800bc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d010      	beq.n	800bc96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc74:	7b7a      	ldrb	r2, [r7, #13]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	32ae      	adds	r2, #174	; 0xae
 800bc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc8a:	e004      	b.n	800bc96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fc03 	bl	800c49a <USBD_CtlError>
              break;
 800bc94:	e000      	b.n	800bc98 <USBD_StdEPReq+0x1c8>
              break;
 800bc96:	bf00      	nop
          }
          break;
 800bc98:	e0ab      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USBD_StdEPReq+0x1dc>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d032      	beq.n	800bd10 <USBD_StdEPReq+0x240>
 800bcaa:	e097      	b.n	800bddc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d007      	beq.n	800bcc2 <USBD_StdEPReq+0x1f2>
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b80      	cmp	r3, #128	; 0x80
 800bcb6:	d004      	beq.n	800bcc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fbed 	bl	800c49a <USBD_CtlError>
                break;
 800bcc0:	e091      	b.n	800bde6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da0b      	bge.n	800bce2 <USBD_StdEPReq+0x212>
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	3310      	adds	r3, #16
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4413      	add	r3, r2
 800bcde:	3304      	adds	r3, #4
 800bce0:	e00b      	b.n	800bcfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2202      	movs	r2, #2
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fc37 	bl	800c57c <USBD_CtlSendData>
              break;
 800bd0e:	e06a      	b.n	800bde6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da11      	bge.n	800bd3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	f003 020f 	and.w	r2, r3, #15
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	3324      	adds	r3, #36	; 0x24
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d117      	bne.n	800bd62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fbb0 	bl	800c49a <USBD_CtlError>
                  break;
 800bd3a:	e054      	b.n	800bde6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	f003 020f 	and.w	r2, r3, #15
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d104      	bne.n	800bd62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fb9d 	bl	800c49a <USBD_CtlError>
                  break;
 800bd60:	e041      	b.n	800bde6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	da0b      	bge.n	800bd82 <USBD_StdEPReq+0x2b2>
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	3310      	adds	r3, #16
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	3304      	adds	r3, #4
 800bd80:	e00b      	b.n	800bd9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	4413      	add	r3, r2
 800bd98:	3304      	adds	r3, #4
 800bd9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <USBD_StdEPReq+0x2d8>
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	2b80      	cmp	r3, #128	; 0x80
 800bda6:	d103      	bne.n	800bdb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	e00e      	b.n	800bdce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 f8bd 	bl	800cf34 <USBD_LL_IsStallEP>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fbd1 	bl	800c57c <USBD_CtlSendData>
              break;
 800bdda:	e004      	b.n	800bde6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fb5b 	bl	800c49a <USBD_CtlError>
              break;
 800bde4:	bf00      	nop
          }
          break;
 800bde6:	e004      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fb55 	bl	800c49a <USBD_CtlError>
          break;
 800bdf0:	bf00      	nop
      }
      break;
 800bdf2:	e005      	b.n	800be00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fb4f 	bl	800c49a <USBD_CtlError>
      break;
 800bdfc:	e000      	b.n	800be00 <USBD_StdEPReq+0x330>
      break;
 800bdfe:	bf00      	nop
  }

  return ret;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be16:	2300      	movs	r3, #0
 800be18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	885b      	ldrh	r3, [r3, #2]
 800be26:	0a1b      	lsrs	r3, r3, #8
 800be28:	b29b      	uxth	r3, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	2b06      	cmp	r3, #6
 800be2e:	f200 8128 	bhi.w	800c082 <USBD_GetDescriptor+0x276>
 800be32:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <USBD_GetDescriptor+0x2c>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be55 	.word	0x0800be55
 800be3c:	0800be6d 	.word	0x0800be6d
 800be40:	0800bead 	.word	0x0800bead
 800be44:	0800c083 	.word	0x0800c083
 800be48:	0800c083 	.word	0x0800c083
 800be4c:	0800c023 	.word	0x0800c023
 800be50:	0800c04f 	.word	0x0800c04f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	7c12      	ldrb	r2, [r2, #16]
 800be60:	f107 0108 	add.w	r1, r7, #8
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	60f8      	str	r0, [r7, #12]
      break;
 800be6a:	e112      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7c1b      	ldrb	r3, [r3, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10d      	bne.n	800be90 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7c:	f107 0208 	add.w	r2, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	2202      	movs	r2, #2
 800be8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be8e:	e100      	b.n	800c092 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be98:	f107 0208 	add.w	r2, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	2202      	movs	r2, #2
 800bea8:	701a      	strb	r2, [r3, #0]
      break;
 800beaa:	e0f2      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	885b      	ldrh	r3, [r3, #2]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	f200 80ac 	bhi.w	800c010 <USBD_GetDescriptor+0x204>
 800beb8:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <USBD_GetDescriptor+0xb4>)
 800beba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebe:	bf00      	nop
 800bec0:	0800bed9 	.word	0x0800bed9
 800bec4:	0800bf0d 	.word	0x0800bf0d
 800bec8:	0800bf41 	.word	0x0800bf41
 800becc:	0800bf75 	.word	0x0800bf75
 800bed0:	0800bfa9 	.word	0x0800bfa9
 800bed4:	0800bfdd 	.word	0x0800bfdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e091      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 facb 	bl	800c49a <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e089      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e077      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fab1 	bl	800c49a <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e06f      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e05d      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa97 	bl	800c49a <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e055      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e043      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa7d 	bl	800c49a <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e03b      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	7c12      	ldrb	r2, [r2, #16]
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfca:	e029      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa63 	bl	800c49a <USBD_CtlError>
            err++;
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfda:	e021      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	7c12      	ldrb	r2, [r2, #16]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
 800bffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffe:	e00f      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa49 	bl	800c49a <USBD_CtlError>
            err++;
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	3301      	adds	r3, #1
 800c00c:	72fb      	strb	r3, [r7, #11]
          break;
 800c00e:	e007      	b.n	800c020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fa41 	bl	800c49a <USBD_CtlError>
          err++;
 800c018:	7afb      	ldrb	r3, [r7, #11]
 800c01a:	3301      	adds	r3, #1
 800c01c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c01e:	bf00      	nop
      }
      break;
 800c020:	e037      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7c1b      	ldrb	r3, [r3, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c032:	f107 0208 	add.w	r2, r7, #8
 800c036:	4610      	mov	r0, r2
 800c038:	4798      	blx	r3
 800c03a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c03c:	e029      	b.n	800c092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fa2a 	bl	800c49a <USBD_CtlError>
        err++;
 800c046:	7afb      	ldrb	r3, [r7, #11]
 800c048:	3301      	adds	r3, #1
 800c04a:	72fb      	strb	r3, [r7, #11]
      break;
 800c04c:	e021      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	7c1b      	ldrb	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10d      	bne.n	800c072 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	f107 0208 	add.w	r2, r7, #8
 800c062:	4610      	mov	r0, r2
 800c064:	4798      	blx	r3
 800c066:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	2207      	movs	r2, #7
 800c06e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c070:	e00f      	b.n	800c092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fa10 	bl	800c49a <USBD_CtlError>
        err++;
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	3301      	adds	r3, #1
 800c07e:	72fb      	strb	r3, [r7, #11]
      break;
 800c080:	e007      	b.n	800c092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fa08 	bl	800c49a <USBD_CtlError>
      err++;
 800c08a:	7afb      	ldrb	r3, [r7, #11]
 800c08c:	3301      	adds	r3, #1
 800c08e:	72fb      	strb	r3, [r7, #11]
      break;
 800c090:	bf00      	nop
  }

  if (err != 0U)
 800c092:	7afb      	ldrb	r3, [r7, #11]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d11e      	bne.n	800c0d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d016      	beq.n	800c0ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0a0:	893b      	ldrh	r3, [r7, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	88da      	ldrh	r2, [r3, #6]
 800c0aa:	893b      	ldrh	r3, [r7, #8]
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	bf28      	it	cs
 800c0b0:	4613      	movcs	r3, r2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0b6:	893b      	ldrh	r3, [r7, #8]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	68f9      	ldr	r1, [r7, #12]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fa5d 	bl	800c57c <USBD_CtlSendData>
 800c0c2:	e009      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f9e7 	bl	800c49a <USBD_CtlError>
 800c0cc:	e004      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 faae 	bl	800c630 <USBD_CtlSendStatus>
 800c0d4:	e000      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    return;
 800c0d6:	bf00      	nop
  }
}
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop

0800c0e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	889b      	ldrh	r3, [r3, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d131      	bne.n	800c156 <USBD_SetAddress+0x76>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	88db      	ldrh	r3, [r3, #6]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d12d      	bne.n	800c156 <USBD_SetAddress+0x76>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	885b      	ldrh	r3, [r3, #2]
 800c0fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c100:	d829      	bhi.n	800c156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	885b      	ldrh	r3, [r3, #2]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c10c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b03      	cmp	r3, #3
 800c118:	d104      	bne.n	800c124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f9bc 	bl	800c49a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c122:	e01d      	b.n	800c160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7bfa      	ldrb	r2, [r7, #15]
 800c128:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 ff2b 	bl	800cf8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa7a 	bl	800c630 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d004      	beq.n	800c14c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2202      	movs	r2, #2
 800c146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14a:	e009      	b.n	800c160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c154:	e004      	b.n	800c160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f99e 	bl	800c49a <USBD_CtlError>
  }
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	885b      	ldrh	r3, [r3, #2]
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	4b4e      	ldr	r3, [pc, #312]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c180:	4b4d      	ldr	r3, [pc, #308]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d905      	bls.n	800c194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f985 	bl	800c49a <USBD_CtlError>
    return USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	e08c      	b.n	800c2ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d002      	beq.n	800c1a6 <USBD_SetConfig+0x3e>
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d029      	beq.n	800c1f8 <USBD_SetConfig+0x90>
 800c1a4:	e075      	b.n	800c292 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1a6:	4b44      	ldr	r3, [pc, #272]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d020      	beq.n	800c1f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c1ae:	4b42      	ldr	r3, [pc, #264]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1b8:	4b3f      	ldr	r3, [pc, #252]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7fe ffe1 	bl	800b186 <USBD_SetClassConfig>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d008      	beq.n	800c1e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f962 	bl	800c49a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1de:	e065      	b.n	800c2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fa25 	bl	800c630 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2203      	movs	r2, #3
 800c1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1ee:	e05d      	b.n	800c2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa1d 	bl	800c630 <USBD_CtlSendStatus>
      break;
 800c1f6:	e059      	b.n	800c2ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1f8:	4b2f      	ldr	r3, [pc, #188]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d112      	bne.n	800c226 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c208:	4b2b      	ldr	r3, [pc, #172]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c212:	4b29      	ldr	r3, [pc, #164]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe ffd0 	bl	800b1be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa06 	bl	800c630 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c224:	e042      	b.n	800c2ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c226:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d02a      	beq.n	800c28a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7fe ffbe 	bl	800b1be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c242:	4b1d      	ldr	r3, [pc, #116]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7fe ff97 	bl	800b186 <USBD_SetClassConfig>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00f      	beq.n	800c282 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f918 	bl	800c49a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7fe ffa3 	bl	800b1be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c280:	e014      	b.n	800c2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f9d4 	bl	800c630 <USBD_CtlSendStatus>
      break;
 800c288:	e010      	b.n	800c2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f9d0 	bl	800c630 <USBD_CtlSendStatus>
      break;
 800c290:	e00c      	b.n	800c2ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f900 	bl	800c49a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c29a:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <USBD_SetConfig+0x150>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fe ff8c 	bl	800b1be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c2aa:	bf00      	nop
  }

  return ret;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	24000294 	.word	0x24000294

0800c2bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	88db      	ldrh	r3, [r3, #6]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d004      	beq.n	800c2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f8e2 	bl	800c49a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2d6:	e023      	b.n	800c320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	dc02      	bgt.n	800c2ea <USBD_GetConfig+0x2e>
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc03      	bgt.n	800c2f0 <USBD_GetConfig+0x34>
 800c2e8:	e015      	b.n	800c316 <USBD_GetConfig+0x5a>
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d00b      	beq.n	800c306 <USBD_GetConfig+0x4a>
 800c2ee:	e012      	b.n	800c316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f93c 	bl	800c57c <USBD_CtlSendData>
        break;
 800c304:	e00c      	b.n	800c320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3304      	adds	r3, #4
 800c30a:	2201      	movs	r2, #1
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f934 	bl	800c57c <USBD_CtlSendData>
        break;
 800c314:	e004      	b.n	800c320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f8be 	bl	800c49a <USBD_CtlError>
        break;
 800c31e:	bf00      	nop
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	3b01      	subs	r3, #1
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d81e      	bhi.n	800c37e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	88db      	ldrh	r3, [r3, #6]
 800c344:	2b02      	cmp	r3, #2
 800c346:	d004      	beq.n	800c352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f8a5 	bl	800c49a <USBD_CtlError>
        break;
 800c350:	e01a      	b.n	800c388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f043 0202 	orr.w	r2, r3, #2
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	330c      	adds	r3, #12
 800c372:	2202      	movs	r2, #2
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f900 	bl	800c57c <USBD_CtlSendData>
      break;
 800c37c:	e004      	b.n	800c388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f88a 	bl	800c49a <USBD_CtlError>
      break;
 800c386:	bf00      	nop
  }
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	885b      	ldrh	r3, [r3, #2]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d107      	bne.n	800c3b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f940 	bl	800c630 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c3b0:	e013      	b.n	800c3da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d10b      	bne.n	800c3d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	889b      	ldrh	r3, [r3, #4]
 800c3be:	0a1b      	lsrs	r3, r3, #8
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f930 	bl	800c630 <USBD_CtlSendStatus>
}
 800c3d0:	e003      	b.n	800c3da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f860 	bl	800c49a <USBD_CtlError>
}
 800c3da:	bf00      	nop
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d80b      	bhi.n	800c412 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	885b      	ldrh	r3, [r3, #2]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d10c      	bne.n	800c41c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f910 	bl	800c630 <USBD_CtlSendStatus>
      }
      break;
 800c410:	e004      	b.n	800c41c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f840 	bl	800c49a <USBD_CtlError>
      break;
 800c41a:	e000      	b.n	800c41e <USBD_ClrFeature+0x3c>
      break;
 800c41c:	bf00      	nop
  }
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	781a      	ldrb	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	781a      	ldrb	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff fa41 	bl	800b8d8 <SWAPBYTE>
 800c456:	4603      	mov	r3, r0
 800c458:	461a      	mov	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3301      	adds	r3, #1
 800c468:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff fa34 	bl	800b8d8 <SWAPBYTE>
 800c470:	4603      	mov	r3, r0
 800c472:	461a      	mov	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3301      	adds	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff fa27 	bl	800b8d8 <SWAPBYTE>
 800c48a:	4603      	mov	r3, r0
 800c48c:	461a      	mov	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	80da      	strh	r2, [r3, #6]
}
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a4:	2180      	movs	r1, #128	; 0x80
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fd06 	bl	800ceb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fd02 	bl	800ceb8 <USBD_LL_StallEP>
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d036      	beq.n	800c540 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f000 f836 	bl	800c548 <USBD_GetLen>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	3301      	adds	r3, #1
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7812      	ldrb	r2, [r2, #0]
 800c4f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	2203      	movs	r2, #3
 800c504:	701a      	strb	r2, [r3, #0]
  idx++;
 800c506:	7dfb      	ldrb	r3, [r7, #23]
 800c508:	3301      	adds	r3, #1
 800c50a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c50c:	e013      	b.n	800c536 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	4413      	add	r3, r2
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	7812      	ldrb	r2, [r2, #0]
 800c518:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	3301      	adds	r3, #1
 800c51e:	613b      	str	r3, [r7, #16]
    idx++;
 800c520:	7dfb      	ldrb	r3, [r7, #23]
 800c522:	3301      	adds	r3, #1
 800c524:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	4413      	add	r3, r2
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c530:	7dfb      	ldrb	r3, [r7, #23]
 800c532:	3301      	adds	r3, #1
 800c534:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1e7      	bne.n	800c50e <USBD_GetString+0x52>
 800c53e:	e000      	b.n	800c542 <USBD_GetString+0x86>
    return;
 800c540:	bf00      	nop
  }
}
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c558:	e005      	b.n	800c566 <USBD_GetLen+0x1e>
  {
    len++;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	3301      	adds	r3, #1
 800c55e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	3301      	adds	r3, #1
 800c564:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1f5      	bne.n	800c55a <USBD_GetLen+0x12>
  }

  return len;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f000 fd11 	bl	800cfca <USBD_LL_Transmit>

  return USBD_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 fd00 	bl	800cfca <USBD_LL_Transmit>

  return USBD_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 fd04 	bl	800d00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	2100      	movs	r1, #0
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fcf3 	bl	800d00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2204      	movs	r2, #4
 800c63c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c640:	2300      	movs	r3, #0
 800c642:	2200      	movs	r2, #0
 800c644:	2100      	movs	r1, #0
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fcbf 	bl	800cfca <USBD_LL_Transmit>

  return USBD_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2205      	movs	r2, #5
 800c662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c666:	2300      	movs	r3, #0
 800c668:	2200      	movs	r2, #0
 800c66a:	2100      	movs	r1, #0
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fccd 	bl	800d00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c680:	2200      	movs	r2, #0
 800c682:	4913      	ldr	r1, [pc, #76]	; (800c6d0 <MX_USB_DEVICE_Init+0x54>)
 800c684:	4813      	ldr	r0, [pc, #76]	; (800c6d4 <MX_USB_DEVICE_Init+0x58>)
 800c686:	f7fe fd01 	bl	800b08c <USBD_Init>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c690:	f7f4 fa58 	bl	8000b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c694:	4910      	ldr	r1, [pc, #64]	; (800c6d8 <MX_USB_DEVICE_Init+0x5c>)
 800c696:	480f      	ldr	r0, [pc, #60]	; (800c6d4 <MX_USB_DEVICE_Init+0x58>)
 800c698:	f7fe fd28 	bl	800b0ec <USBD_RegisterClass>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6a2:	f7f4 fa4f 	bl	8000b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6a6:	490d      	ldr	r1, [pc, #52]	; (800c6dc <MX_USB_DEVICE_Init+0x60>)
 800c6a8:	480a      	ldr	r0, [pc, #40]	; (800c6d4 <MX_USB_DEVICE_Init+0x58>)
 800c6aa:	f7fe fc1f 	bl	800aeec <USBD_CDC_RegisterInterface>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6b4:	f7f4 fa46 	bl	8000b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6b8:	4806      	ldr	r0, [pc, #24]	; (800c6d4 <MX_USB_DEVICE_Init+0x58>)
 800c6ba:	f7fe fd4d 	bl	800b158 <USBD_Start>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6c4:	f7f4 fa3e 	bl	8000b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c6c8:	f7f8 fb32 	bl	8004d30 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6cc:	bf00      	nop
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	240000b0 	.word	0x240000b0
 800c6d4:	24000298 	.word	0x24000298
 800c6d8:	2400001c 	.word	0x2400001c
 800c6dc:	2400009c 	.word	0x2400009c

0800c6e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4905      	ldr	r1, [pc, #20]	; (800c6fc <CDC_Init_FS+0x1c>)
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <CDC_Init_FS+0x20>)
 800c6ea:	f7fe fc19 	bl	800af20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6ee:	4905      	ldr	r1, [pc, #20]	; (800c704 <CDC_Init_FS+0x24>)
 800c6f0:	4803      	ldr	r0, [pc, #12]	; (800c700 <CDC_Init_FS+0x20>)
 800c6f2:	f7fe fc37 	bl	800af64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	24000d74 	.word	0x24000d74
 800c700:	24000298 	.word	0x24000298
 800c704:	24000574 	.word	0x24000574

0800c708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c708:	b480      	push	{r7}
 800c70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c70c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	71fb      	strb	r3, [r7, #7]
 800c724:	4613      	mov	r3, r2
 800c726:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c728:	79fb      	ldrb	r3, [r7, #7]
 800c72a:	2b23      	cmp	r3, #35	; 0x23
 800c72c:	d84a      	bhi.n	800c7c4 <CDC_Control_FS+0xac>
 800c72e:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <CDC_Control_FS+0x1c>)
 800c730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c734:	0800c7c5 	.word	0x0800c7c5
 800c738:	0800c7c5 	.word	0x0800c7c5
 800c73c:	0800c7c5 	.word	0x0800c7c5
 800c740:	0800c7c5 	.word	0x0800c7c5
 800c744:	0800c7c5 	.word	0x0800c7c5
 800c748:	0800c7c5 	.word	0x0800c7c5
 800c74c:	0800c7c5 	.word	0x0800c7c5
 800c750:	0800c7c5 	.word	0x0800c7c5
 800c754:	0800c7c5 	.word	0x0800c7c5
 800c758:	0800c7c5 	.word	0x0800c7c5
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c7c5 	.word	0x0800c7c5
 800c764:	0800c7c5 	.word	0x0800c7c5
 800c768:	0800c7c5 	.word	0x0800c7c5
 800c76c:	0800c7c5 	.word	0x0800c7c5
 800c770:	0800c7c5 	.word	0x0800c7c5
 800c774:	0800c7c5 	.word	0x0800c7c5
 800c778:	0800c7c5 	.word	0x0800c7c5
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7c5 	.word	0x0800c7c5
 800c788:	0800c7c5 	.word	0x0800c7c5
 800c78c:	0800c7c5 	.word	0x0800c7c5
 800c790:	0800c7c5 	.word	0x0800c7c5
 800c794:	0800c7c5 	.word	0x0800c7c5
 800c798:	0800c7c5 	.word	0x0800c7c5
 800c79c:	0800c7c5 	.word	0x0800c7c5
 800c7a0:	0800c7c5 	.word	0x0800c7c5
 800c7a4:	0800c7c5 	.word	0x0800c7c5
 800c7a8:	0800c7c5 	.word	0x0800c7c5
 800c7ac:	0800c7c5 	.word	0x0800c7c5
 800c7b0:	0800c7c5 	.word	0x0800c7c5
 800c7b4:	0800c7c5 	.word	0x0800c7c5
 800c7b8:	0800c7c5 	.word	0x0800c7c5
 800c7bc:	0800c7c5 	.word	0x0800c7c5
 800c7c0:	0800c7c5 	.word	0x0800c7c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7c4:	bf00      	nop
  }

  return (USBD_OK);
 800c7c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4805      	ldr	r0, [pc, #20]	; (800c7f8 <CDC_Receive_FS+0x24>)
 800c7e2:	f7fe fbbf 	bl	800af64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7e6:	4804      	ldr	r0, [pc, #16]	; (800c7f8 <CDC_Receive_FS+0x24>)
 800c7e8:	f7fe fc1a 	bl	800b020 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	24000298 	.word	0x24000298

0800c7fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <CDC_Transmit_FS+0x48>)
 800c80e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c812:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c81e:	2301      	movs	r3, #1
 800c820:	e00b      	b.n	800c83a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c822:	887b      	ldrh	r3, [r7, #2]
 800c824:	461a      	mov	r2, r3
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	4806      	ldr	r0, [pc, #24]	; (800c844 <CDC_Transmit_FS+0x48>)
 800c82a:	f7fe fb79 	bl	800af20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c82e:	4805      	ldr	r0, [pc, #20]	; (800c844 <CDC_Transmit_FS+0x48>)
 800c830:	f7fe fbb6 	bl	800afa0 <USBD_CDC_TransmitPacket>
 800c834:	4603      	mov	r3, r0
 800c836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	24000298 	.word	0x24000298

0800c848 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c848:	b480      	push	{r7}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c85a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2212      	movs	r2, #18
 800c87c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	240000cc 	.word	0x240000cc

0800c890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2204      	movs	r2, #4
 800c8a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8a2:	4b03      	ldr	r3, [pc, #12]	; (800c8b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	240000e0 	.word	0x240000e0

0800c8b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8c0:	79fb      	ldrb	r3, [r7, #7]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d105      	bne.n	800c8d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	4907      	ldr	r1, [pc, #28]	; (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8ca:	4808      	ldr	r0, [pc, #32]	; (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8cc:	f7ff fdf6 	bl	800c4bc <USBD_GetString>
 800c8d0:	e004      	b.n	800c8dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4904      	ldr	r1, [pc, #16]	; (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8d6:	4805      	ldr	r0, [pc, #20]	; (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8d8:	f7ff fdf0 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8dc:	4b02      	ldr	r3, [pc, #8]	; (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	24001574 	.word	0x24001574
 800c8ec:	0800dba8 	.word	0x0800dba8

0800c8f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6039      	str	r1, [r7, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	4904      	ldr	r1, [pc, #16]	; (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c900:	4804      	ldr	r0, [pc, #16]	; (800c914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c902:	f7ff fddb 	bl	800c4bc <USBD_GetString>
  return USBD_StrDesc;
 800c906:	4b02      	ldr	r3, [pc, #8]	; (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	24001574 	.word	0x24001574
 800c914:	0800dbc0 	.word	0x0800dbc0

0800c918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	221a      	movs	r2, #26
 800c928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c92a:	f000 f843 	bl	800c9b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c92e:	4b02      	ldr	r3, [pc, #8]	; (800c938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	240000e4 	.word	0x240000e4

0800c93c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	4907      	ldr	r1, [pc, #28]	; (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c952:	4808      	ldr	r0, [pc, #32]	; (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c954:	f7ff fdb2 	bl	800c4bc <USBD_GetString>
 800c958:	e004      	b.n	800c964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	4904      	ldr	r1, [pc, #16]	; (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c95e:	4805      	ldr	r0, [pc, #20]	; (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c960:	f7ff fdac 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c964:	4b02      	ldr	r3, [pc, #8]	; (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	24001574 	.word	0x24001574
 800c974:	0800dbd4 	.word	0x0800dbd4

0800c978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4907      	ldr	r1, [pc, #28]	; (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c98e:	4808      	ldr	r0, [pc, #32]	; (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c990:	f7ff fd94 	bl	800c4bc <USBD_GetString>
 800c994:	e004      	b.n	800c9a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4904      	ldr	r1, [pc, #16]	; (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c99a:	4805      	ldr	r0, [pc, #20]	; (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c99c:	f7ff fd8e 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	; (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	24001574 	.word	0x24001574
 800c9b0:	0800dbe0 	.word	0x0800dbe0

0800c9b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9ba:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <Get_SerialNum+0x44>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9c0:	4b0e      	ldr	r3, [pc, #56]	; (800c9fc <Get_SerialNum+0x48>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <Get_SerialNum+0x4c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d009      	beq.n	800c9ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9da:	2208      	movs	r2, #8
 800c9dc:	4909      	ldr	r1, [pc, #36]	; (800ca04 <Get_SerialNum+0x50>)
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f814 	bl	800ca0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9e4:	2204      	movs	r2, #4
 800c9e6:	4908      	ldr	r1, [pc, #32]	; (800ca08 <Get_SerialNum+0x54>)
 800c9e8:	68b8      	ldr	r0, [r7, #8]
 800c9ea:	f000 f80f 	bl	800ca0c <IntToUnicode>
  }
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	1ff1e800 	.word	0x1ff1e800
 800c9fc:	1ff1e804 	.word	0x1ff1e804
 800ca00:	1ff1e808 	.word	0x1ff1e808
 800ca04:	240000e6 	.word	0x240000e6
 800ca08:	240000f6 	.word	0x240000f6

0800ca0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b087      	sub	sp, #28
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75fb      	strb	r3, [r7, #23]
 800ca22:	e027      	b.n	800ca74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	0f1b      	lsrs	r3, r3, #28
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d80b      	bhi.n	800ca44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	0f1b      	lsrs	r3, r3, #28
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4619      	mov	r1, r3
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	440b      	add	r3, r1
 800ca3c:	3230      	adds	r2, #48	; 0x30
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	e00a      	b.n	800ca5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	0f1b      	lsrs	r3, r3, #28
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4619      	mov	r1, r3
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	440b      	add	r3, r1
 800ca54:	3237      	adds	r2, #55	; 0x37
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	011b      	lsls	r3, r3, #4
 800ca5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	3301      	adds	r3, #1
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	3301      	adds	r3, #1
 800ca72:	75fb      	strb	r3, [r7, #23]
 800ca74:	7dfa      	ldrb	r2, [r7, #23]
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d3d3      	bcc.n	800ca24 <IntToUnicode+0x18>
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
	...

0800ca8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b0bc      	sub	sp, #240	; 0xf0
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	605a      	str	r2, [r3, #4]
 800ca9e:	609a      	str	r2, [r3, #8]
 800caa0:	60da      	str	r2, [r3, #12]
 800caa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800caa4:	f107 0310 	add.w	r3, r7, #16
 800caa8:	22c8      	movs	r2, #200	; 0xc8
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f000 fbdd 	bl	800d26c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a2c      	ldr	r2, [pc, #176]	; (800cb68 <HAL_PCD_MspInit+0xdc>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d151      	bne.n	800cb60 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cabc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cac0:	f04f 0300 	mov.w	r3, #0
 800cac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cac8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800cacc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cad0:	f107 0310 	add.w	r3, r7, #16
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f9 f921 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800cae0:	f7f4 f830 	bl	8000b44 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800cae4:	f7f8 f924 	bl	8004d30 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cae8:	4b20      	ldr	r3, [pc, #128]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800caea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800caee:	4a1f      	ldr	r2, [pc, #124]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800caf0:	f043 0301 	orr.w	r3, r3, #1
 800caf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800caf8:	4b1c      	ldr	r3, [pc, #112]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800cafa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cb0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800cb20:	230a      	movs	r3, #10
 800cb22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4810      	ldr	r0, [pc, #64]	; (800cb70 <HAL_PCD_MspInit+0xe4>)
 800cb2e:	f7f6 fc0d 	bl	800334c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb32:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800cb34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cb38:	4a0c      	ldr	r2, [pc, #48]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800cb3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cb42:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <HAL_PCD_MspInit+0xe0>)
 800cb44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cb48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb4c:	60bb      	str	r3, [r7, #8]
 800cb4e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cb50:	2200      	movs	r2, #0
 800cb52:	2100      	movs	r1, #0
 800cb54:	2065      	movs	r0, #101	; 0x65
 800cb56:	f7f4 faec 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb5a:	2065      	movs	r0, #101	; 0x65
 800cb5c:	f7f4 fb03 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb60:	bf00      	nop
 800cb62:	37f0      	adds	r7, #240	; 0xf0
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	40080000 	.word	0x40080000
 800cb6c:	58024400 	.word	0x58024400
 800cb70:	58020000 	.word	0x58020000

0800cb74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4610      	mov	r0, r2
 800cb8c:	f7fe fb31 	bl	800b1f2 <USBD_LL_SetupStage>
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cbaa:	78fa      	ldrb	r2, [r7, #3]
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	4413      	add	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	440b      	add	r3, r1
 800cbb8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	78fb      	ldrb	r3, [r7, #3]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	f7fe fb6b 	bl	800b29c <USBD_LL_DataOutStage>
}
 800cbc6:	bf00      	nop
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cbe0:	78fa      	ldrb	r2, [r7, #3]
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	440b      	add	r3, r1
 800cbee:	3348      	adds	r3, #72	; 0x48
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	78fb      	ldrb	r3, [r7, #3]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	f7fe fc04 	bl	800b402 <USBD_LL_DataInStage>
}
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fd3e 	bl	800b692 <USBD_LL_SOF>
}
 800cc16:	bf00      	nop
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc26:	2301      	movs	r3, #1
 800cc28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]
 800cc36:	e008      	b.n	800cc4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d102      	bne.n	800cc46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc40:	2301      	movs	r3, #1
 800cc42:	73fb      	strb	r3, [r7, #15]
 800cc44:	e001      	b.n	800cc4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc46:	f7f3 ff7d 	bl	8000b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc50:	7bfa      	ldrb	r2, [r7, #15]
 800cc52:	4611      	mov	r1, r2
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fe fcd8 	bl	800b60a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fe fc80 	bl	800b566 <USBD_LL_Reset>
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe fcd3 	bl	800b62a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6812      	ldr	r2, [r2, #0]
 800cc92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc96:	f043 0301 	orr.w	r3, r3, #1
 800cc9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a1b      	ldr	r3, [r3, #32]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cca4:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <HAL_PCD_SuspendCallback+0x48>)
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	4a03      	ldr	r2, [pc, #12]	; (800ccb8 <HAL_PCD_SuspendCallback+0x48>)
 800ccaa:	f043 0306 	orr.w	r3, r3, #6
 800ccae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	e000ed00 	.word	0xe000ed00

0800ccbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fcc9 	bl	800b662 <USBD_LL_Resume>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccea:	78fa      	ldrb	r2, [r7, #3]
 800ccec:	4611      	mov	r1, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fd21 	bl	800b736 <USBD_LL_IsoOUTIncomplete>
}
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	460b      	mov	r3, r1
 800cd06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cd0e:	78fa      	ldrb	r2, [r7, #3]
 800cd10:	4611      	mov	r1, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fcdd 	bl	800b6d2 <USBD_LL_IsoINIncomplete>
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fd33 	bl	800b79a <USBD_LL_DevConnected>
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fd30 	bl	800b7b0 <USBD_LL_DevDisconnected>
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d13e      	bne.n	800cde6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cd68:	4a21      	ldr	r2, [pc, #132]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a1f      	ldr	r2, [pc, #124]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd78:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd7a:	4a1e      	ldr	r2, [pc, #120]	; (800cdf4 <USBD_LL_Init+0x9c>)
 800cd7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800cd7e:	4b1c      	ldr	r3, [pc, #112]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd80:	2209      	movs	r2, #9
 800cd82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd84:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd86:	2202      	movs	r2, #2
 800cd88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd8a:	4b19      	ldr	r3, [pc, #100]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd90:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd92:	2202      	movs	r2, #2
 800cd94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cd96:	4b16      	ldr	r3, [pc, #88]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cd9c:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cda2:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800cda8:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cdae:	4b10      	ldr	r3, [pc, #64]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdba:	480d      	ldr	r0, [pc, #52]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdbc:	f7f6 fca4 	bl	8003708 <HAL_PCD_Init>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800cdc6:	f7f3 febd 	bl	8000b44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cdca:	2180      	movs	r1, #128	; 0x80
 800cdcc:	4808      	ldr	r0, [pc, #32]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdce:	f7f7 ff14 	bl	8004bfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cdd2:	2240      	movs	r2, #64	; 0x40
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4806      	ldr	r0, [pc, #24]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cdd8:	f7f7 fec8 	bl	8004b6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cddc:	2280      	movs	r2, #128	; 0x80
 800cdde:	2101      	movs	r1, #1
 800cde0:	4803      	ldr	r0, [pc, #12]	; (800cdf0 <USBD_LL_Init+0x98>)
 800cde2:	f7f7 fec3 	bl	8004b6c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	24001774 	.word	0x24001774
 800cdf4:	40080000 	.word	0x40080000

0800cdf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f6 fd9e 	bl	8003950 <HAL_PCD_Start>
 800ce14:	4603      	mov	r3, r0
 800ce16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 f942 	bl	800d0a4 <USBD_Get_USB_Status>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	4608      	mov	r0, r1
 800ce38:	4611      	mov	r1, r2
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	70fb      	strb	r3, [r7, #3]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70bb      	strb	r3, [r7, #2]
 800ce44:	4613      	mov	r3, r2
 800ce46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce56:	78bb      	ldrb	r3, [r7, #2]
 800ce58:	883a      	ldrh	r2, [r7, #0]
 800ce5a:	78f9      	ldrb	r1, [r7, #3]
 800ce5c:	f7f7 fa9e 	bl	800439c <HAL_PCD_EP_Open>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 f91c 	bl	800d0a4 <USBD_Get_USB_Status>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce94:	78fa      	ldrb	r2, [r7, #3]
 800ce96:	4611      	mov	r1, r2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f7 fae7 	bl	800446c <HAL_PCD_EP_Close>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 f8fd 	bl	800d0a4 <USBD_Get_USB_Status>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ced2:	78fa      	ldrb	r2, [r7, #3]
 800ced4:	4611      	mov	r1, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7f7 fba1 	bl	800461e <HAL_PCD_EP_SetStall>
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 f8de 	bl	800d0a4 <USBD_Get_USB_Status>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf10:	78fa      	ldrb	r2, [r7, #3]
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7f7 fbe6 	bl	80046e6 <HAL_PCD_EP_ClrStall>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 f8bf 	bl	800d0a4 <USBD_Get_USB_Status>
 800cf26:	4603      	mov	r3, r0
 800cf28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	da0b      	bge.n	800cf68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf56:	68f9      	ldr	r1, [r7, #12]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	4413      	add	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	440b      	add	r3, r1
 800cf62:	333e      	adds	r3, #62	; 0x3e
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	e00b      	b.n	800cf80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf6e:	68f9      	ldr	r1, [r7, #12]
 800cf70:	4613      	mov	r3, r2
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cf7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cfa6:	78fa      	ldrb	r2, [r7, #3]
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f7 f9d1 	bl	8004352 <HAL_PCD_SetAddress>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 f874 	bl	800d0a4 <USBD_Get_USB_Status>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	603b      	str	r3, [r7, #0]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfe8:	7af9      	ldrb	r1, [r7, #11]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	f7f7 fadb 	bl	80045a8 <HAL_PCD_EP_Transmit>
 800cff2:	4603      	mov	r3, r0
 800cff4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f853 	bl	800d0a4 <USBD_Get_USB_Status>
 800cffe:	4603      	mov	r3, r0
 800d000:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d002:	7dbb      	ldrb	r3, [r7, #22]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	460b      	mov	r3, r1
 800d01a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d02a:	7af9      	ldrb	r1, [r7, #11]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	f7f7 fa66 	bl	8004500 <HAL_PCD_EP_Receive>
 800d034:	4603      	mov	r3, r0
 800d036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d038:	7dfb      	ldrb	r3, [r7, #23]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 f832 	bl	800d0a4 <USBD_Get_USB_Status>
 800d040:	4603      	mov	r3, r0
 800d042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d044:	7dbb      	ldrb	r3, [r7, #22]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d060:	78fa      	ldrb	r2, [r7, #3]
 800d062:	4611      	mov	r1, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7f7 fa87 	bl	8004578 <HAL_PCD_EP_GetRxCount>
 800d06a:	4603      	mov	r3, r0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d07c:	4b03      	ldr	r3, [pc, #12]	; (800d08c <USBD_static_malloc+0x18>)
}
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	24001c80 	.word	0x24001c80

0800d090 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	d817      	bhi.n	800d0e8 <USBD_Get_USB_Status+0x44>
 800d0b8:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <USBD_Get_USB_Status+0x1c>)
 800d0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0be:	bf00      	nop
 800d0c0:	0800d0d1 	.word	0x0800d0d1
 800d0c4:	0800d0d7 	.word	0x0800d0d7
 800d0c8:	0800d0dd 	.word	0x0800d0dd
 800d0cc:	0800d0e3 	.word	0x0800d0e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0d4:	e00b      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d0da:	e008      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e0:	e005      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e6:	e002      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ec:	bf00      	nop
  }
  return usb_status;
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <ibus_init_communication>:

static uint8_t rx_buffer[IBUS_LENGTH] = {0};


void ibus_init_communication(int uart)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart, rx_buffer, 32);  //initialize the UART to receive data and store it in the rx_buffer array
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2220      	movs	r2, #32
 800d108:	4903      	ldr	r1, [pc, #12]	; (800d118 <ibus_init_communication+0x1c>)
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fa fcc2 	bl	8007a94 <HAL_UART_Receive_DMA>
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	24001ea0 	.word	0x24001ea0

0800d11c <read_ibus_frame>:



bool read_ibus_frame(uint16_t *ibus_data) //decoding the RX frame and returning channels values
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	if(!check_ibus()){
 800d124:	f000 f810 	bl	800d148 <check_ibus>
 800d128:	4603      	mov	r3, r0
 800d12a:	f083 0301 	eor.w	r3, r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <read_ibus_frame+0x1c>
				return false ;
 800d134:	2300      	movs	r3, #0
 800d136:	e003      	b.n	800d140 <read_ibus_frame+0x24>
	}
	read_ibus_channels(ibus_data);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f83f 	bl	800d1bc <read_ibus_channels>
	return true;
 800d13e:	2301      	movs	r3, #1
}
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <check_ibus>:




bool check_ibus ()
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
// check if the frame correspond to the right Ibus protocol format
uint16_t checksum_cal = 0xffff;
 800d14e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d152:	81fb      	strh	r3, [r7, #14]
uint16_t checksum_ibus;	
// checking the start command
if(! (rx_buffer[0] == IBUS_LENGTH && rx_buffer[1] == IBUS_COMMAND))
 800d154:	4b18      	ldr	r3, [pc, #96]	; (800d1b8 <check_ibus+0x70>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b20      	cmp	r3, #32
 800d15a:	d103      	bne.n	800d164 <check_ibus+0x1c>
 800d15c:	4b16      	ldr	r3, [pc, #88]	; (800d1b8 <check_ibus+0x70>)
 800d15e:	785b      	ldrb	r3, [r3, #1]
 800d160:	2b40      	cmp	r3, #64	; 0x40
 800d162:	d001      	beq.n	800d168 <check_ibus+0x20>
	{
   return false;
 800d164:	2300      	movs	r3, #0
 800d166:	e021      	b.n	800d1ac <check_ibus+0x64>
	}
// checking the checksum  (0xFFFF - (sum of 30 bytes))
for(int i = 0; i < 30; i++)
 800d168:	2300      	movs	r3, #0
 800d16a:	60bb      	str	r3, [r7, #8]
 800d16c:	e00a      	b.n	800d184 <check_ibus+0x3c>
	{
		checksum_cal -= rx_buffer[i];
 800d16e:	4a12      	ldr	r2, [pc, #72]	; (800d1b8 <check_ibus+0x70>)
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	4413      	add	r3, r2
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	b29b      	uxth	r3, r3
 800d178:	89fa      	ldrh	r2, [r7, #14]
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	81fb      	strh	r3, [r7, #14]
for(int i = 0; i < 30; i++)
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	3301      	adds	r3, #1
 800d182:	60bb      	str	r3, [r7, #8]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b1d      	cmp	r3, #29
 800d188:	ddf1      	ble.n	800d16e <check_ibus+0x26>
	}
checksum_ibus = rx_buffer[31] << 8 | rx_buffer[30]; // checksum value from ibus
 800d18a:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <check_ibus+0x70>)
 800d18c:	7fdb      	ldrb	r3, [r3, #31]
 800d18e:	021b      	lsls	r3, r3, #8
 800d190:	b21a      	sxth	r2, r3
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <check_ibus+0x70>)
 800d194:	7f9b      	ldrb	r3, [r3, #30]
 800d196:	b21b      	sxth	r3, r3
 800d198:	4313      	orrs	r3, r2
 800d19a:	b21b      	sxth	r3, r3
 800d19c:	80fb      	strh	r3, [r7, #6]
return (checksum_ibus == checksum_cal);
 800d19e:	88fa      	ldrh	r2, [r7, #6]
 800d1a0:	89fb      	ldrh	r3, [r7, #14]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	bf0c      	ite	eq
 800d1a6:	2301      	moveq	r3, #1
 800d1a8:	2300      	movne	r3, #0
 800d1aa:	b2db      	uxtb	r3, r3
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	24001ea0 	.word	0x24001ea0

0800d1bc <read_ibus_channels>:




void read_ibus_channels(uint16_t *ibus_data)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
// return the value of each channels in the ibus_data array
for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	60bb      	str	r3, [r7, #8]
 800d1cc:	e018      	b.n	800d200 <read_ibus_channels+0x44>
	{
		ibus_data[ch_index] = rx_buffer[bf_index + 1] << 8 | rx_buffer[bf_index];
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	4a10      	ldr	r2, [pc, #64]	; (800d214 <read_ibus_channels+0x58>)
 800d1d4:	5cd3      	ldrb	r3, [r2, r3]
 800d1d6:	021b      	lsls	r3, r3, #8
 800d1d8:	b21a      	sxth	r2, r3
 800d1da:	490e      	ldr	r1, [pc, #56]	; (800d214 <read_ibus_channels+0x58>)
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	440b      	add	r3, r1
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	b21b      	sxth	r3, r3
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	b219      	sxth	r1, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	b28a      	uxth	r2, r1
 800d1f2:	801a      	strh	r2, [r3, #0]
for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	60bb      	str	r3, [r7, #8]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b0d      	cmp	r3, #13
 800d204:	dde3      	ble.n	800d1ce <read_ibus_channels+0x12>
	}
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	24001ea0 	.word	0x24001ea0

0800d218 <__errno>:
 800d218:	4b01      	ldr	r3, [pc, #4]	; (800d220 <__errno+0x8>)
 800d21a:	6818      	ldr	r0, [r3, #0]
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	24000100 	.word	0x24000100

0800d224 <__libc_init_array>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	4d0d      	ldr	r5, [pc, #52]	; (800d25c <__libc_init_array+0x38>)
 800d228:	4c0d      	ldr	r4, [pc, #52]	; (800d260 <__libc_init_array+0x3c>)
 800d22a:	1b64      	subs	r4, r4, r5
 800d22c:	10a4      	asrs	r4, r4, #2
 800d22e:	2600      	movs	r6, #0
 800d230:	42a6      	cmp	r6, r4
 800d232:	d109      	bne.n	800d248 <__libc_init_array+0x24>
 800d234:	4d0b      	ldr	r5, [pc, #44]	; (800d264 <__libc_init_array+0x40>)
 800d236:	4c0c      	ldr	r4, [pc, #48]	; (800d268 <__libc_init_array+0x44>)
 800d238:	f000 fc8e 	bl	800db58 <_init>
 800d23c:	1b64      	subs	r4, r4, r5
 800d23e:	10a4      	asrs	r4, r4, #2
 800d240:	2600      	movs	r6, #0
 800d242:	42a6      	cmp	r6, r4
 800d244:	d105      	bne.n	800d252 <__libc_init_array+0x2e>
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	f855 3b04 	ldr.w	r3, [r5], #4
 800d24c:	4798      	blx	r3
 800d24e:	3601      	adds	r6, #1
 800d250:	e7ee      	b.n	800d230 <__libc_init_array+0xc>
 800d252:	f855 3b04 	ldr.w	r3, [r5], #4
 800d256:	4798      	blx	r3
 800d258:	3601      	adds	r6, #1
 800d25a:	e7f2      	b.n	800d242 <__libc_init_array+0x1e>
 800d25c:	0800dc6c 	.word	0x0800dc6c
 800d260:	0800dc6c 	.word	0x0800dc6c
 800d264:	0800dc6c 	.word	0x0800dc6c
 800d268:	0800dc70 	.word	0x0800dc70

0800d26c <memset>:
 800d26c:	4402      	add	r2, r0
 800d26e:	4603      	mov	r3, r0
 800d270:	4293      	cmp	r3, r2
 800d272:	d100      	bne.n	800d276 <memset+0xa>
 800d274:	4770      	bx	lr
 800d276:	f803 1b01 	strb.w	r1, [r3], #1
 800d27a:	e7f9      	b.n	800d270 <memset+0x4>

0800d27c <siprintf>:
 800d27c:	b40e      	push	{r1, r2, r3}
 800d27e:	b500      	push	{lr}
 800d280:	b09c      	sub	sp, #112	; 0x70
 800d282:	ab1d      	add	r3, sp, #116	; 0x74
 800d284:	9002      	str	r0, [sp, #8]
 800d286:	9006      	str	r0, [sp, #24]
 800d288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d28c:	4809      	ldr	r0, [pc, #36]	; (800d2b4 <siprintf+0x38>)
 800d28e:	9107      	str	r1, [sp, #28]
 800d290:	9104      	str	r1, [sp, #16]
 800d292:	4909      	ldr	r1, [pc, #36]	; (800d2b8 <siprintf+0x3c>)
 800d294:	f853 2b04 	ldr.w	r2, [r3], #4
 800d298:	9105      	str	r1, [sp, #20]
 800d29a:	6800      	ldr	r0, [r0, #0]
 800d29c:	9301      	str	r3, [sp, #4]
 800d29e:	a902      	add	r1, sp, #8
 800d2a0:	f000 f868 	bl	800d374 <_svfiprintf_r>
 800d2a4:	9b02      	ldr	r3, [sp, #8]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	701a      	strb	r2, [r3, #0]
 800d2aa:	b01c      	add	sp, #112	; 0x70
 800d2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2b0:	b003      	add	sp, #12
 800d2b2:	4770      	bx	lr
 800d2b4:	24000100 	.word	0x24000100
 800d2b8:	ffff0208 	.word	0xffff0208

0800d2bc <__ssputs_r>:
 800d2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c0:	688e      	ldr	r6, [r1, #8]
 800d2c2:	429e      	cmp	r6, r3
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	4690      	mov	r8, r2
 800d2ca:	461f      	mov	r7, r3
 800d2cc:	d838      	bhi.n	800d340 <__ssputs_r+0x84>
 800d2ce:	898a      	ldrh	r2, [r1, #12]
 800d2d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2d4:	d032      	beq.n	800d33c <__ssputs_r+0x80>
 800d2d6:	6825      	ldr	r5, [r4, #0]
 800d2d8:	6909      	ldr	r1, [r1, #16]
 800d2da:	eba5 0901 	sub.w	r9, r5, r1
 800d2de:	6965      	ldr	r5, [r4, #20]
 800d2e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	444b      	add	r3, r9
 800d2ec:	106d      	asrs	r5, r5, #1
 800d2ee:	429d      	cmp	r5, r3
 800d2f0:	bf38      	it	cc
 800d2f2:	461d      	movcc	r5, r3
 800d2f4:	0553      	lsls	r3, r2, #21
 800d2f6:	d531      	bpl.n	800d35c <__ssputs_r+0xa0>
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f000 fb63 	bl	800d9c4 <_malloc_r>
 800d2fe:	4606      	mov	r6, r0
 800d300:	b950      	cbnz	r0, 800d318 <__ssputs_r+0x5c>
 800d302:	230c      	movs	r3, #12
 800d304:	f8ca 3000 	str.w	r3, [sl]
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d318:	6921      	ldr	r1, [r4, #16]
 800d31a:	464a      	mov	r2, r9
 800d31c:	f000 fabe 	bl	800d89c <memcpy>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	6126      	str	r6, [r4, #16]
 800d32e:	6165      	str	r5, [r4, #20]
 800d330:	444e      	add	r6, r9
 800d332:	eba5 0509 	sub.w	r5, r5, r9
 800d336:	6026      	str	r6, [r4, #0]
 800d338:	60a5      	str	r5, [r4, #8]
 800d33a:	463e      	mov	r6, r7
 800d33c:	42be      	cmp	r6, r7
 800d33e:	d900      	bls.n	800d342 <__ssputs_r+0x86>
 800d340:	463e      	mov	r6, r7
 800d342:	6820      	ldr	r0, [r4, #0]
 800d344:	4632      	mov	r2, r6
 800d346:	4641      	mov	r1, r8
 800d348:	f000 fab6 	bl	800d8b8 <memmove>
 800d34c:	68a3      	ldr	r3, [r4, #8]
 800d34e:	1b9b      	subs	r3, r3, r6
 800d350:	60a3      	str	r3, [r4, #8]
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	4433      	add	r3, r6
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	2000      	movs	r0, #0
 800d35a:	e7db      	b.n	800d314 <__ssputs_r+0x58>
 800d35c:	462a      	mov	r2, r5
 800d35e:	f000 fba5 	bl	800daac <_realloc_r>
 800d362:	4606      	mov	r6, r0
 800d364:	2800      	cmp	r0, #0
 800d366:	d1e1      	bne.n	800d32c <__ssputs_r+0x70>
 800d368:	6921      	ldr	r1, [r4, #16]
 800d36a:	4650      	mov	r0, sl
 800d36c:	f000 fabe 	bl	800d8ec <_free_r>
 800d370:	e7c7      	b.n	800d302 <__ssputs_r+0x46>
	...

0800d374 <_svfiprintf_r>:
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	4698      	mov	r8, r3
 800d37a:	898b      	ldrh	r3, [r1, #12]
 800d37c:	061b      	lsls	r3, r3, #24
 800d37e:	b09d      	sub	sp, #116	; 0x74
 800d380:	4607      	mov	r7, r0
 800d382:	460d      	mov	r5, r1
 800d384:	4614      	mov	r4, r2
 800d386:	d50e      	bpl.n	800d3a6 <_svfiprintf_r+0x32>
 800d388:	690b      	ldr	r3, [r1, #16]
 800d38a:	b963      	cbnz	r3, 800d3a6 <_svfiprintf_r+0x32>
 800d38c:	2140      	movs	r1, #64	; 0x40
 800d38e:	f000 fb19 	bl	800d9c4 <_malloc_r>
 800d392:	6028      	str	r0, [r5, #0]
 800d394:	6128      	str	r0, [r5, #16]
 800d396:	b920      	cbnz	r0, 800d3a2 <_svfiprintf_r+0x2e>
 800d398:	230c      	movs	r3, #12
 800d39a:	603b      	str	r3, [r7, #0]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e0d1      	b.n	800d546 <_svfiprintf_r+0x1d2>
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	616b      	str	r3, [r5, #20]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3aa:	2320      	movs	r3, #32
 800d3ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3b4:	2330      	movs	r3, #48	; 0x30
 800d3b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d560 <_svfiprintf_r+0x1ec>
 800d3ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3be:	f04f 0901 	mov.w	r9, #1
 800d3c2:	4623      	mov	r3, r4
 800d3c4:	469a      	mov	sl, r3
 800d3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ca:	b10a      	cbz	r2, 800d3d0 <_svfiprintf_r+0x5c>
 800d3cc:	2a25      	cmp	r2, #37	; 0x25
 800d3ce:	d1f9      	bne.n	800d3c4 <_svfiprintf_r+0x50>
 800d3d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3d4:	d00b      	beq.n	800d3ee <_svfiprintf_r+0x7a>
 800d3d6:	465b      	mov	r3, fp
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4638      	mov	r0, r7
 800d3de:	f7ff ff6d 	bl	800d2bc <__ssputs_r>
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f000 80aa 	beq.w	800d53c <_svfiprintf_r+0x1c8>
 800d3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3ea:	445a      	add	r2, fp
 800d3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 80a2 	beq.w	800d53c <_svfiprintf_r+0x1c8>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d402:	f10a 0a01 	add.w	sl, sl, #1
 800d406:	9304      	str	r3, [sp, #16]
 800d408:	9307      	str	r3, [sp, #28]
 800d40a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d40e:	931a      	str	r3, [sp, #104]	; 0x68
 800d410:	4654      	mov	r4, sl
 800d412:	2205      	movs	r2, #5
 800d414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d418:	4851      	ldr	r0, [pc, #324]	; (800d560 <_svfiprintf_r+0x1ec>)
 800d41a:	f7f2 ff61 	bl	80002e0 <memchr>
 800d41e:	9a04      	ldr	r2, [sp, #16]
 800d420:	b9d8      	cbnz	r0, 800d45a <_svfiprintf_r+0xe6>
 800d422:	06d0      	lsls	r0, r2, #27
 800d424:	bf44      	itt	mi
 800d426:	2320      	movmi	r3, #32
 800d428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d42c:	0711      	lsls	r1, r2, #28
 800d42e:	bf44      	itt	mi
 800d430:	232b      	movmi	r3, #43	; 0x2b
 800d432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d436:	f89a 3000 	ldrb.w	r3, [sl]
 800d43a:	2b2a      	cmp	r3, #42	; 0x2a
 800d43c:	d015      	beq.n	800d46a <_svfiprintf_r+0xf6>
 800d43e:	9a07      	ldr	r2, [sp, #28]
 800d440:	4654      	mov	r4, sl
 800d442:	2000      	movs	r0, #0
 800d444:	f04f 0c0a 	mov.w	ip, #10
 800d448:	4621      	mov	r1, r4
 800d44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d44e:	3b30      	subs	r3, #48	; 0x30
 800d450:	2b09      	cmp	r3, #9
 800d452:	d94e      	bls.n	800d4f2 <_svfiprintf_r+0x17e>
 800d454:	b1b0      	cbz	r0, 800d484 <_svfiprintf_r+0x110>
 800d456:	9207      	str	r2, [sp, #28]
 800d458:	e014      	b.n	800d484 <_svfiprintf_r+0x110>
 800d45a:	eba0 0308 	sub.w	r3, r0, r8
 800d45e:	fa09 f303 	lsl.w	r3, r9, r3
 800d462:	4313      	orrs	r3, r2
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	46a2      	mov	sl, r4
 800d468:	e7d2      	b.n	800d410 <_svfiprintf_r+0x9c>
 800d46a:	9b03      	ldr	r3, [sp, #12]
 800d46c:	1d19      	adds	r1, r3, #4
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	9103      	str	r1, [sp, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfbb      	ittet	lt
 800d476:	425b      	neglt	r3, r3
 800d478:	f042 0202 	orrlt.w	r2, r2, #2
 800d47c:	9307      	strge	r3, [sp, #28]
 800d47e:	9307      	strlt	r3, [sp, #28]
 800d480:	bfb8      	it	lt
 800d482:	9204      	strlt	r2, [sp, #16]
 800d484:	7823      	ldrb	r3, [r4, #0]
 800d486:	2b2e      	cmp	r3, #46	; 0x2e
 800d488:	d10c      	bne.n	800d4a4 <_svfiprintf_r+0x130>
 800d48a:	7863      	ldrb	r3, [r4, #1]
 800d48c:	2b2a      	cmp	r3, #42	; 0x2a
 800d48e:	d135      	bne.n	800d4fc <_svfiprintf_r+0x188>
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	1d1a      	adds	r2, r3, #4
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	9203      	str	r2, [sp, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	bfb8      	it	lt
 800d49c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4a0:	3402      	adds	r4, #2
 800d4a2:	9305      	str	r3, [sp, #20]
 800d4a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d570 <_svfiprintf_r+0x1fc>
 800d4a8:	7821      	ldrb	r1, [r4, #0]
 800d4aa:	2203      	movs	r2, #3
 800d4ac:	4650      	mov	r0, sl
 800d4ae:	f7f2 ff17 	bl	80002e0 <memchr>
 800d4b2:	b140      	cbz	r0, 800d4c6 <_svfiprintf_r+0x152>
 800d4b4:	2340      	movs	r3, #64	; 0x40
 800d4b6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d4be:	9b04      	ldr	r3, [sp, #16]
 800d4c0:	4303      	orrs	r3, r0
 800d4c2:	3401      	adds	r4, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ca:	4826      	ldr	r0, [pc, #152]	; (800d564 <_svfiprintf_r+0x1f0>)
 800d4cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	f7f2 ff05 	bl	80002e0 <memchr>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d038      	beq.n	800d54c <_svfiprintf_r+0x1d8>
 800d4da:	4b23      	ldr	r3, [pc, #140]	; (800d568 <_svfiprintf_r+0x1f4>)
 800d4dc:	bb1b      	cbnz	r3, 800d526 <_svfiprintf_r+0x1b2>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	f023 0307 	bic.w	r3, r3, #7
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ec:	4433      	add	r3, r6
 800d4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f0:	e767      	b.n	800d3c2 <_svfiprintf_r+0x4e>
 800d4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	e7a5      	b.n	800d448 <_svfiprintf_r+0xd4>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	3401      	adds	r4, #1
 800d500:	9305      	str	r3, [sp, #20]
 800d502:	4619      	mov	r1, r3
 800d504:	f04f 0c0a 	mov.w	ip, #10
 800d508:	4620      	mov	r0, r4
 800d50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d50e:	3a30      	subs	r2, #48	; 0x30
 800d510:	2a09      	cmp	r2, #9
 800d512:	d903      	bls.n	800d51c <_svfiprintf_r+0x1a8>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0c5      	beq.n	800d4a4 <_svfiprintf_r+0x130>
 800d518:	9105      	str	r1, [sp, #20]
 800d51a:	e7c3      	b.n	800d4a4 <_svfiprintf_r+0x130>
 800d51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d520:	4604      	mov	r4, r0
 800d522:	2301      	movs	r3, #1
 800d524:	e7f0      	b.n	800d508 <_svfiprintf_r+0x194>
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	462a      	mov	r2, r5
 800d52c:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <_svfiprintf_r+0x1f8>)
 800d52e:	a904      	add	r1, sp, #16
 800d530:	4638      	mov	r0, r7
 800d532:	f3af 8000 	nop.w
 800d536:	1c42      	adds	r2, r0, #1
 800d538:	4606      	mov	r6, r0
 800d53a:	d1d6      	bne.n	800d4ea <_svfiprintf_r+0x176>
 800d53c:	89ab      	ldrh	r3, [r5, #12]
 800d53e:	065b      	lsls	r3, r3, #25
 800d540:	f53f af2c 	bmi.w	800d39c <_svfiprintf_r+0x28>
 800d544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d546:	b01d      	add	sp, #116	; 0x74
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	ab03      	add	r3, sp, #12
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	462a      	mov	r2, r5
 800d552:	4b06      	ldr	r3, [pc, #24]	; (800d56c <_svfiprintf_r+0x1f8>)
 800d554:	a904      	add	r1, sp, #16
 800d556:	4638      	mov	r0, r7
 800d558:	f000 f87a 	bl	800d650 <_printf_i>
 800d55c:	e7eb      	b.n	800d536 <_svfiprintf_r+0x1c2>
 800d55e:	bf00      	nop
 800d560:	0800dc30 	.word	0x0800dc30
 800d564:	0800dc3a 	.word	0x0800dc3a
 800d568:	00000000 	.word	0x00000000
 800d56c:	0800d2bd 	.word	0x0800d2bd
 800d570:	0800dc36 	.word	0x0800dc36

0800d574 <_printf_common>:
 800d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d578:	4616      	mov	r6, r2
 800d57a:	4699      	mov	r9, r3
 800d57c:	688a      	ldr	r2, [r1, #8]
 800d57e:	690b      	ldr	r3, [r1, #16]
 800d580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d584:	4293      	cmp	r3, r2
 800d586:	bfb8      	it	lt
 800d588:	4613      	movlt	r3, r2
 800d58a:	6033      	str	r3, [r6, #0]
 800d58c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d590:	4607      	mov	r7, r0
 800d592:	460c      	mov	r4, r1
 800d594:	b10a      	cbz	r2, 800d59a <_printf_common+0x26>
 800d596:	3301      	adds	r3, #1
 800d598:	6033      	str	r3, [r6, #0]
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	0699      	lsls	r1, r3, #26
 800d59e:	bf42      	ittt	mi
 800d5a0:	6833      	ldrmi	r3, [r6, #0]
 800d5a2:	3302      	addmi	r3, #2
 800d5a4:	6033      	strmi	r3, [r6, #0]
 800d5a6:	6825      	ldr	r5, [r4, #0]
 800d5a8:	f015 0506 	ands.w	r5, r5, #6
 800d5ac:	d106      	bne.n	800d5bc <_printf_common+0x48>
 800d5ae:	f104 0a19 	add.w	sl, r4, #25
 800d5b2:	68e3      	ldr	r3, [r4, #12]
 800d5b4:	6832      	ldr	r2, [r6, #0]
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	42ab      	cmp	r3, r5
 800d5ba:	dc26      	bgt.n	800d60a <_printf_common+0x96>
 800d5bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5c0:	1e13      	subs	r3, r2, #0
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	bf18      	it	ne
 800d5c6:	2301      	movne	r3, #1
 800d5c8:	0692      	lsls	r2, r2, #26
 800d5ca:	d42b      	bmi.n	800d624 <_printf_common+0xb0>
 800d5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	47c0      	blx	r8
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d01e      	beq.n	800d618 <_printf_common+0xa4>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	68e5      	ldr	r5, [r4, #12]
 800d5de:	6832      	ldr	r2, [r6, #0]
 800d5e0:	f003 0306 	and.w	r3, r3, #6
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	bf08      	it	eq
 800d5e8:	1aad      	subeq	r5, r5, r2
 800d5ea:	68a3      	ldr	r3, [r4, #8]
 800d5ec:	6922      	ldr	r2, [r4, #16]
 800d5ee:	bf0c      	ite	eq
 800d5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f4:	2500      	movne	r5, #0
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	bfc4      	itt	gt
 800d5fa:	1a9b      	subgt	r3, r3, r2
 800d5fc:	18ed      	addgt	r5, r5, r3
 800d5fe:	2600      	movs	r6, #0
 800d600:	341a      	adds	r4, #26
 800d602:	42b5      	cmp	r5, r6
 800d604:	d11a      	bne.n	800d63c <_printf_common+0xc8>
 800d606:	2000      	movs	r0, #0
 800d608:	e008      	b.n	800d61c <_printf_common+0xa8>
 800d60a:	2301      	movs	r3, #1
 800d60c:	4652      	mov	r2, sl
 800d60e:	4649      	mov	r1, r9
 800d610:	4638      	mov	r0, r7
 800d612:	47c0      	blx	r8
 800d614:	3001      	adds	r0, #1
 800d616:	d103      	bne.n	800d620 <_printf_common+0xac>
 800d618:	f04f 30ff 	mov.w	r0, #4294967295
 800d61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d620:	3501      	adds	r5, #1
 800d622:	e7c6      	b.n	800d5b2 <_printf_common+0x3e>
 800d624:	18e1      	adds	r1, r4, r3
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	2030      	movs	r0, #48	; 0x30
 800d62a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d62e:	4422      	add	r2, r4
 800d630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d638:	3302      	adds	r3, #2
 800d63a:	e7c7      	b.n	800d5cc <_printf_common+0x58>
 800d63c:	2301      	movs	r3, #1
 800d63e:	4622      	mov	r2, r4
 800d640:	4649      	mov	r1, r9
 800d642:	4638      	mov	r0, r7
 800d644:	47c0      	blx	r8
 800d646:	3001      	adds	r0, #1
 800d648:	d0e6      	beq.n	800d618 <_printf_common+0xa4>
 800d64a:	3601      	adds	r6, #1
 800d64c:	e7d9      	b.n	800d602 <_printf_common+0x8e>
	...

0800d650 <_printf_i>:
 800d650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	7e0f      	ldrb	r7, [r1, #24]
 800d656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d658:	2f78      	cmp	r7, #120	; 0x78
 800d65a:	4691      	mov	r9, r2
 800d65c:	4680      	mov	r8, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	469a      	mov	sl, r3
 800d662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d666:	d807      	bhi.n	800d678 <_printf_i+0x28>
 800d668:	2f62      	cmp	r7, #98	; 0x62
 800d66a:	d80a      	bhi.n	800d682 <_printf_i+0x32>
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	f000 80d8 	beq.w	800d822 <_printf_i+0x1d2>
 800d672:	2f58      	cmp	r7, #88	; 0x58
 800d674:	f000 80a3 	beq.w	800d7be <_printf_i+0x16e>
 800d678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d67c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d680:	e03a      	b.n	800d6f8 <_printf_i+0xa8>
 800d682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d686:	2b15      	cmp	r3, #21
 800d688:	d8f6      	bhi.n	800d678 <_printf_i+0x28>
 800d68a:	a101      	add	r1, pc, #4	; (adr r1, 800d690 <_printf_i+0x40>)
 800d68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d690:	0800d6e9 	.word	0x0800d6e9
 800d694:	0800d6fd 	.word	0x0800d6fd
 800d698:	0800d679 	.word	0x0800d679
 800d69c:	0800d679 	.word	0x0800d679
 800d6a0:	0800d679 	.word	0x0800d679
 800d6a4:	0800d679 	.word	0x0800d679
 800d6a8:	0800d6fd 	.word	0x0800d6fd
 800d6ac:	0800d679 	.word	0x0800d679
 800d6b0:	0800d679 	.word	0x0800d679
 800d6b4:	0800d679 	.word	0x0800d679
 800d6b8:	0800d679 	.word	0x0800d679
 800d6bc:	0800d809 	.word	0x0800d809
 800d6c0:	0800d72d 	.word	0x0800d72d
 800d6c4:	0800d7eb 	.word	0x0800d7eb
 800d6c8:	0800d679 	.word	0x0800d679
 800d6cc:	0800d679 	.word	0x0800d679
 800d6d0:	0800d82b 	.word	0x0800d82b
 800d6d4:	0800d679 	.word	0x0800d679
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d679 	.word	0x0800d679
 800d6e0:	0800d679 	.word	0x0800d679
 800d6e4:	0800d7f3 	.word	0x0800d7f3
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	1d1a      	adds	r2, r3, #4
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	602a      	str	r2, [r5, #0]
 800d6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e0a3      	b.n	800d844 <_printf_i+0x1f4>
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	6829      	ldr	r1, [r5, #0]
 800d700:	0606      	lsls	r6, r0, #24
 800d702:	f101 0304 	add.w	r3, r1, #4
 800d706:	d50a      	bpl.n	800d71e <_printf_i+0xce>
 800d708:	680e      	ldr	r6, [r1, #0]
 800d70a:	602b      	str	r3, [r5, #0]
 800d70c:	2e00      	cmp	r6, #0
 800d70e:	da03      	bge.n	800d718 <_printf_i+0xc8>
 800d710:	232d      	movs	r3, #45	; 0x2d
 800d712:	4276      	negs	r6, r6
 800d714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d718:	485e      	ldr	r0, [pc, #376]	; (800d894 <_printf_i+0x244>)
 800d71a:	230a      	movs	r3, #10
 800d71c:	e019      	b.n	800d752 <_printf_i+0x102>
 800d71e:	680e      	ldr	r6, [r1, #0]
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d726:	bf18      	it	ne
 800d728:	b236      	sxthne	r6, r6
 800d72a:	e7ef      	b.n	800d70c <_printf_i+0xbc>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	6029      	str	r1, [r5, #0]
 800d734:	0601      	lsls	r1, r0, #24
 800d736:	d501      	bpl.n	800d73c <_printf_i+0xec>
 800d738:	681e      	ldr	r6, [r3, #0]
 800d73a:	e002      	b.n	800d742 <_printf_i+0xf2>
 800d73c:	0646      	lsls	r6, r0, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0xe8>
 800d740:	881e      	ldrh	r6, [r3, #0]
 800d742:	4854      	ldr	r0, [pc, #336]	; (800d894 <_printf_i+0x244>)
 800d744:	2f6f      	cmp	r7, #111	; 0x6f
 800d746:	bf0c      	ite	eq
 800d748:	2308      	moveq	r3, #8
 800d74a:	230a      	movne	r3, #10
 800d74c:	2100      	movs	r1, #0
 800d74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d752:	6865      	ldr	r5, [r4, #4]
 800d754:	60a5      	str	r5, [r4, #8]
 800d756:	2d00      	cmp	r5, #0
 800d758:	bfa2      	ittt	ge
 800d75a:	6821      	ldrge	r1, [r4, #0]
 800d75c:	f021 0104 	bicge.w	r1, r1, #4
 800d760:	6021      	strge	r1, [r4, #0]
 800d762:	b90e      	cbnz	r6, 800d768 <_printf_i+0x118>
 800d764:	2d00      	cmp	r5, #0
 800d766:	d04d      	beq.n	800d804 <_printf_i+0x1b4>
 800d768:	4615      	mov	r5, r2
 800d76a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d76e:	fb03 6711 	mls	r7, r3, r1, r6
 800d772:	5dc7      	ldrb	r7, [r0, r7]
 800d774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d778:	4637      	mov	r7, r6
 800d77a:	42bb      	cmp	r3, r7
 800d77c:	460e      	mov	r6, r1
 800d77e:	d9f4      	bls.n	800d76a <_printf_i+0x11a>
 800d780:	2b08      	cmp	r3, #8
 800d782:	d10b      	bne.n	800d79c <_printf_i+0x14c>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	07de      	lsls	r6, r3, #31
 800d788:	d508      	bpl.n	800d79c <_printf_i+0x14c>
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	6861      	ldr	r1, [r4, #4]
 800d78e:	4299      	cmp	r1, r3
 800d790:	bfde      	ittt	le
 800d792:	2330      	movle	r3, #48	; 0x30
 800d794:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d79c:	1b52      	subs	r2, r2, r5
 800d79e:	6122      	str	r2, [r4, #16]
 800d7a0:	f8cd a000 	str.w	sl, [sp]
 800d7a4:	464b      	mov	r3, r9
 800d7a6:	aa03      	add	r2, sp, #12
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7ff fee2 	bl	800d574 <_printf_common>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d14c      	bne.n	800d84e <_printf_i+0x1fe>
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b8:	b004      	add	sp, #16
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	4835      	ldr	r0, [pc, #212]	; (800d894 <_printf_i+0x244>)
 800d7c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7c4:	6829      	ldr	r1, [r5, #0]
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7cc:	6029      	str	r1, [r5, #0]
 800d7ce:	061d      	lsls	r5, r3, #24
 800d7d0:	d514      	bpl.n	800d7fc <_printf_i+0x1ac>
 800d7d2:	07df      	lsls	r7, r3, #31
 800d7d4:	bf44      	itt	mi
 800d7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d7da:	6023      	strmi	r3, [r4, #0]
 800d7dc:	b91e      	cbnz	r6, 800d7e6 <_printf_i+0x196>
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	f023 0320 	bic.w	r3, r3, #32
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	2310      	movs	r3, #16
 800d7e8:	e7b0      	b.n	800d74c <_printf_i+0xfc>
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	f043 0320 	orr.w	r3, r3, #32
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	2378      	movs	r3, #120	; 0x78
 800d7f4:	4828      	ldr	r0, [pc, #160]	; (800d898 <_printf_i+0x248>)
 800d7f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7fa:	e7e3      	b.n	800d7c4 <_printf_i+0x174>
 800d7fc:	0659      	lsls	r1, r3, #25
 800d7fe:	bf48      	it	mi
 800d800:	b2b6      	uxthmi	r6, r6
 800d802:	e7e6      	b.n	800d7d2 <_printf_i+0x182>
 800d804:	4615      	mov	r5, r2
 800d806:	e7bb      	b.n	800d780 <_printf_i+0x130>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	6826      	ldr	r6, [r4, #0]
 800d80c:	6961      	ldr	r1, [r4, #20]
 800d80e:	1d18      	adds	r0, r3, #4
 800d810:	6028      	str	r0, [r5, #0]
 800d812:	0635      	lsls	r5, r6, #24
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	d501      	bpl.n	800d81c <_printf_i+0x1cc>
 800d818:	6019      	str	r1, [r3, #0]
 800d81a:	e002      	b.n	800d822 <_printf_i+0x1d2>
 800d81c:	0670      	lsls	r0, r6, #25
 800d81e:	d5fb      	bpl.n	800d818 <_printf_i+0x1c8>
 800d820:	8019      	strh	r1, [r3, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	6123      	str	r3, [r4, #16]
 800d826:	4615      	mov	r5, r2
 800d828:	e7ba      	b.n	800d7a0 <_printf_i+0x150>
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	1d1a      	adds	r2, r3, #4
 800d82e:	602a      	str	r2, [r5, #0]
 800d830:	681d      	ldr	r5, [r3, #0]
 800d832:	6862      	ldr	r2, [r4, #4]
 800d834:	2100      	movs	r1, #0
 800d836:	4628      	mov	r0, r5
 800d838:	f7f2 fd52 	bl	80002e0 <memchr>
 800d83c:	b108      	cbz	r0, 800d842 <_printf_i+0x1f2>
 800d83e:	1b40      	subs	r0, r0, r5
 800d840:	6060      	str	r0, [r4, #4]
 800d842:	6863      	ldr	r3, [r4, #4]
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	2300      	movs	r3, #0
 800d848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84c:	e7a8      	b.n	800d7a0 <_printf_i+0x150>
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	462a      	mov	r2, r5
 800d852:	4649      	mov	r1, r9
 800d854:	4640      	mov	r0, r8
 800d856:	47d0      	blx	sl
 800d858:	3001      	adds	r0, #1
 800d85a:	d0ab      	beq.n	800d7b4 <_printf_i+0x164>
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	079b      	lsls	r3, r3, #30
 800d860:	d413      	bmi.n	800d88a <_printf_i+0x23a>
 800d862:	68e0      	ldr	r0, [r4, #12]
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	4298      	cmp	r0, r3
 800d868:	bfb8      	it	lt
 800d86a:	4618      	movlt	r0, r3
 800d86c:	e7a4      	b.n	800d7b8 <_printf_i+0x168>
 800d86e:	2301      	movs	r3, #1
 800d870:	4632      	mov	r2, r6
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	47d0      	blx	sl
 800d878:	3001      	adds	r0, #1
 800d87a:	d09b      	beq.n	800d7b4 <_printf_i+0x164>
 800d87c:	3501      	adds	r5, #1
 800d87e:	68e3      	ldr	r3, [r4, #12]
 800d880:	9903      	ldr	r1, [sp, #12]
 800d882:	1a5b      	subs	r3, r3, r1
 800d884:	42ab      	cmp	r3, r5
 800d886:	dcf2      	bgt.n	800d86e <_printf_i+0x21e>
 800d888:	e7eb      	b.n	800d862 <_printf_i+0x212>
 800d88a:	2500      	movs	r5, #0
 800d88c:	f104 0619 	add.w	r6, r4, #25
 800d890:	e7f5      	b.n	800d87e <_printf_i+0x22e>
 800d892:	bf00      	nop
 800d894:	0800dc41 	.word	0x0800dc41
 800d898:	0800dc52 	.word	0x0800dc52

0800d89c <memcpy>:
 800d89c:	440a      	add	r2, r1
 800d89e:	4291      	cmp	r1, r2
 800d8a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8a4:	d100      	bne.n	800d8a8 <memcpy+0xc>
 800d8a6:	4770      	bx	lr
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8b2:	4291      	cmp	r1, r2
 800d8b4:	d1f9      	bne.n	800d8aa <memcpy+0xe>
 800d8b6:	bd10      	pop	{r4, pc}

0800d8b8 <memmove>:
 800d8b8:	4288      	cmp	r0, r1
 800d8ba:	b510      	push	{r4, lr}
 800d8bc:	eb01 0402 	add.w	r4, r1, r2
 800d8c0:	d902      	bls.n	800d8c8 <memmove+0x10>
 800d8c2:	4284      	cmp	r4, r0
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	d807      	bhi.n	800d8d8 <memmove+0x20>
 800d8c8:	1e43      	subs	r3, r0, #1
 800d8ca:	42a1      	cmp	r1, r4
 800d8cc:	d008      	beq.n	800d8e0 <memmove+0x28>
 800d8ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8d6:	e7f8      	b.n	800d8ca <memmove+0x12>
 800d8d8:	4402      	add	r2, r0
 800d8da:	4601      	mov	r1, r0
 800d8dc:	428a      	cmp	r2, r1
 800d8de:	d100      	bne.n	800d8e2 <memmove+0x2a>
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ea:	e7f7      	b.n	800d8dc <memmove+0x24>

0800d8ec <_free_r>:
 800d8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8ee:	2900      	cmp	r1, #0
 800d8f0:	d044      	beq.n	800d97c <_free_r+0x90>
 800d8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8f6:	9001      	str	r0, [sp, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d8fe:	bfb8      	it	lt
 800d900:	18e4      	addlt	r4, r4, r3
 800d902:	f000 f913 	bl	800db2c <__malloc_lock>
 800d906:	4a1e      	ldr	r2, [pc, #120]	; (800d980 <_free_r+0x94>)
 800d908:	9801      	ldr	r0, [sp, #4]
 800d90a:	6813      	ldr	r3, [r2, #0]
 800d90c:	b933      	cbnz	r3, 800d91c <_free_r+0x30>
 800d90e:	6063      	str	r3, [r4, #4]
 800d910:	6014      	str	r4, [r2, #0]
 800d912:	b003      	add	sp, #12
 800d914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d918:	f000 b90e 	b.w	800db38 <__malloc_unlock>
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d908      	bls.n	800d932 <_free_r+0x46>
 800d920:	6825      	ldr	r5, [r4, #0]
 800d922:	1961      	adds	r1, r4, r5
 800d924:	428b      	cmp	r3, r1
 800d926:	bf01      	itttt	eq
 800d928:	6819      	ldreq	r1, [r3, #0]
 800d92a:	685b      	ldreq	r3, [r3, #4]
 800d92c:	1949      	addeq	r1, r1, r5
 800d92e:	6021      	streq	r1, [r4, #0]
 800d930:	e7ed      	b.n	800d90e <_free_r+0x22>
 800d932:	461a      	mov	r2, r3
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	b10b      	cbz	r3, 800d93c <_free_r+0x50>
 800d938:	42a3      	cmp	r3, r4
 800d93a:	d9fa      	bls.n	800d932 <_free_r+0x46>
 800d93c:	6811      	ldr	r1, [r2, #0]
 800d93e:	1855      	adds	r5, r2, r1
 800d940:	42a5      	cmp	r5, r4
 800d942:	d10b      	bne.n	800d95c <_free_r+0x70>
 800d944:	6824      	ldr	r4, [r4, #0]
 800d946:	4421      	add	r1, r4
 800d948:	1854      	adds	r4, r2, r1
 800d94a:	42a3      	cmp	r3, r4
 800d94c:	6011      	str	r1, [r2, #0]
 800d94e:	d1e0      	bne.n	800d912 <_free_r+0x26>
 800d950:	681c      	ldr	r4, [r3, #0]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	6053      	str	r3, [r2, #4]
 800d956:	4421      	add	r1, r4
 800d958:	6011      	str	r1, [r2, #0]
 800d95a:	e7da      	b.n	800d912 <_free_r+0x26>
 800d95c:	d902      	bls.n	800d964 <_free_r+0x78>
 800d95e:	230c      	movs	r3, #12
 800d960:	6003      	str	r3, [r0, #0]
 800d962:	e7d6      	b.n	800d912 <_free_r+0x26>
 800d964:	6825      	ldr	r5, [r4, #0]
 800d966:	1961      	adds	r1, r4, r5
 800d968:	428b      	cmp	r3, r1
 800d96a:	bf04      	itt	eq
 800d96c:	6819      	ldreq	r1, [r3, #0]
 800d96e:	685b      	ldreq	r3, [r3, #4]
 800d970:	6063      	str	r3, [r4, #4]
 800d972:	bf04      	itt	eq
 800d974:	1949      	addeq	r1, r1, r5
 800d976:	6021      	streq	r1, [r4, #0]
 800d978:	6054      	str	r4, [r2, #4]
 800d97a:	e7ca      	b.n	800d912 <_free_r+0x26>
 800d97c:	b003      	add	sp, #12
 800d97e:	bd30      	pop	{r4, r5, pc}
 800d980:	24001ec0 	.word	0x24001ec0

0800d984 <sbrk_aligned>:
 800d984:	b570      	push	{r4, r5, r6, lr}
 800d986:	4e0e      	ldr	r6, [pc, #56]	; (800d9c0 <sbrk_aligned+0x3c>)
 800d988:	460c      	mov	r4, r1
 800d98a:	6831      	ldr	r1, [r6, #0]
 800d98c:	4605      	mov	r5, r0
 800d98e:	b911      	cbnz	r1, 800d996 <sbrk_aligned+0x12>
 800d990:	f000 f8bc 	bl	800db0c <_sbrk_r>
 800d994:	6030      	str	r0, [r6, #0]
 800d996:	4621      	mov	r1, r4
 800d998:	4628      	mov	r0, r5
 800d99a:	f000 f8b7 	bl	800db0c <_sbrk_r>
 800d99e:	1c43      	adds	r3, r0, #1
 800d9a0:	d00a      	beq.n	800d9b8 <sbrk_aligned+0x34>
 800d9a2:	1cc4      	adds	r4, r0, #3
 800d9a4:	f024 0403 	bic.w	r4, r4, #3
 800d9a8:	42a0      	cmp	r0, r4
 800d9aa:	d007      	beq.n	800d9bc <sbrk_aligned+0x38>
 800d9ac:	1a21      	subs	r1, r4, r0
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 f8ac 	bl	800db0c <_sbrk_r>
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d101      	bne.n	800d9bc <sbrk_aligned+0x38>
 800d9b8:	f04f 34ff 	mov.w	r4, #4294967295
 800d9bc:	4620      	mov	r0, r4
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	24001ec4 	.word	0x24001ec4

0800d9c4 <_malloc_r>:
 800d9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c8:	1ccd      	adds	r5, r1, #3
 800d9ca:	f025 0503 	bic.w	r5, r5, #3
 800d9ce:	3508      	adds	r5, #8
 800d9d0:	2d0c      	cmp	r5, #12
 800d9d2:	bf38      	it	cc
 800d9d4:	250c      	movcc	r5, #12
 800d9d6:	2d00      	cmp	r5, #0
 800d9d8:	4607      	mov	r7, r0
 800d9da:	db01      	blt.n	800d9e0 <_malloc_r+0x1c>
 800d9dc:	42a9      	cmp	r1, r5
 800d9de:	d905      	bls.n	800d9ec <_malloc_r+0x28>
 800d9e0:	230c      	movs	r3, #12
 800d9e2:	603b      	str	r3, [r7, #0]
 800d9e4:	2600      	movs	r6, #0
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ec:	4e2e      	ldr	r6, [pc, #184]	; (800daa8 <_malloc_r+0xe4>)
 800d9ee:	f000 f89d 	bl	800db2c <__malloc_lock>
 800d9f2:	6833      	ldr	r3, [r6, #0]
 800d9f4:	461c      	mov	r4, r3
 800d9f6:	bb34      	cbnz	r4, 800da46 <_malloc_r+0x82>
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	f7ff ffc2 	bl	800d984 <sbrk_aligned>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	4604      	mov	r4, r0
 800da04:	d14d      	bne.n	800daa2 <_malloc_r+0xde>
 800da06:	6834      	ldr	r4, [r6, #0]
 800da08:	4626      	mov	r6, r4
 800da0a:	2e00      	cmp	r6, #0
 800da0c:	d140      	bne.n	800da90 <_malloc_r+0xcc>
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	4631      	mov	r1, r6
 800da12:	4638      	mov	r0, r7
 800da14:	eb04 0803 	add.w	r8, r4, r3
 800da18:	f000 f878 	bl	800db0c <_sbrk_r>
 800da1c:	4580      	cmp	r8, r0
 800da1e:	d13a      	bne.n	800da96 <_malloc_r+0xd2>
 800da20:	6821      	ldr	r1, [r4, #0]
 800da22:	3503      	adds	r5, #3
 800da24:	1a6d      	subs	r5, r5, r1
 800da26:	f025 0503 	bic.w	r5, r5, #3
 800da2a:	3508      	adds	r5, #8
 800da2c:	2d0c      	cmp	r5, #12
 800da2e:	bf38      	it	cc
 800da30:	250c      	movcc	r5, #12
 800da32:	4629      	mov	r1, r5
 800da34:	4638      	mov	r0, r7
 800da36:	f7ff ffa5 	bl	800d984 <sbrk_aligned>
 800da3a:	3001      	adds	r0, #1
 800da3c:	d02b      	beq.n	800da96 <_malloc_r+0xd2>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	442b      	add	r3, r5
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	e00e      	b.n	800da64 <_malloc_r+0xa0>
 800da46:	6822      	ldr	r2, [r4, #0]
 800da48:	1b52      	subs	r2, r2, r5
 800da4a:	d41e      	bmi.n	800da8a <_malloc_r+0xc6>
 800da4c:	2a0b      	cmp	r2, #11
 800da4e:	d916      	bls.n	800da7e <_malloc_r+0xba>
 800da50:	1961      	adds	r1, r4, r5
 800da52:	42a3      	cmp	r3, r4
 800da54:	6025      	str	r5, [r4, #0]
 800da56:	bf18      	it	ne
 800da58:	6059      	strne	r1, [r3, #4]
 800da5a:	6863      	ldr	r3, [r4, #4]
 800da5c:	bf08      	it	eq
 800da5e:	6031      	streq	r1, [r6, #0]
 800da60:	5162      	str	r2, [r4, r5]
 800da62:	604b      	str	r3, [r1, #4]
 800da64:	4638      	mov	r0, r7
 800da66:	f104 060b 	add.w	r6, r4, #11
 800da6a:	f000 f865 	bl	800db38 <__malloc_unlock>
 800da6e:	f026 0607 	bic.w	r6, r6, #7
 800da72:	1d23      	adds	r3, r4, #4
 800da74:	1af2      	subs	r2, r6, r3
 800da76:	d0b6      	beq.n	800d9e6 <_malloc_r+0x22>
 800da78:	1b9b      	subs	r3, r3, r6
 800da7a:	50a3      	str	r3, [r4, r2]
 800da7c:	e7b3      	b.n	800d9e6 <_malloc_r+0x22>
 800da7e:	6862      	ldr	r2, [r4, #4]
 800da80:	42a3      	cmp	r3, r4
 800da82:	bf0c      	ite	eq
 800da84:	6032      	streq	r2, [r6, #0]
 800da86:	605a      	strne	r2, [r3, #4]
 800da88:	e7ec      	b.n	800da64 <_malloc_r+0xa0>
 800da8a:	4623      	mov	r3, r4
 800da8c:	6864      	ldr	r4, [r4, #4]
 800da8e:	e7b2      	b.n	800d9f6 <_malloc_r+0x32>
 800da90:	4634      	mov	r4, r6
 800da92:	6876      	ldr	r6, [r6, #4]
 800da94:	e7b9      	b.n	800da0a <_malloc_r+0x46>
 800da96:	230c      	movs	r3, #12
 800da98:	603b      	str	r3, [r7, #0]
 800da9a:	4638      	mov	r0, r7
 800da9c:	f000 f84c 	bl	800db38 <__malloc_unlock>
 800daa0:	e7a1      	b.n	800d9e6 <_malloc_r+0x22>
 800daa2:	6025      	str	r5, [r4, #0]
 800daa4:	e7de      	b.n	800da64 <_malloc_r+0xa0>
 800daa6:	bf00      	nop
 800daa8:	24001ec0 	.word	0x24001ec0

0800daac <_realloc_r>:
 800daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab0:	4680      	mov	r8, r0
 800dab2:	4614      	mov	r4, r2
 800dab4:	460e      	mov	r6, r1
 800dab6:	b921      	cbnz	r1, 800dac2 <_realloc_r+0x16>
 800dab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dabc:	4611      	mov	r1, r2
 800dabe:	f7ff bf81 	b.w	800d9c4 <_malloc_r>
 800dac2:	b92a      	cbnz	r2, 800dad0 <_realloc_r+0x24>
 800dac4:	f7ff ff12 	bl	800d8ec <_free_r>
 800dac8:	4625      	mov	r5, r4
 800daca:	4628      	mov	r0, r5
 800dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad0:	f000 f838 	bl	800db44 <_malloc_usable_size_r>
 800dad4:	4284      	cmp	r4, r0
 800dad6:	4607      	mov	r7, r0
 800dad8:	d802      	bhi.n	800dae0 <_realloc_r+0x34>
 800dada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dade:	d812      	bhi.n	800db06 <_realloc_r+0x5a>
 800dae0:	4621      	mov	r1, r4
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7ff ff6e 	bl	800d9c4 <_malloc_r>
 800dae8:	4605      	mov	r5, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	d0ed      	beq.n	800daca <_realloc_r+0x1e>
 800daee:	42bc      	cmp	r4, r7
 800daf0:	4622      	mov	r2, r4
 800daf2:	4631      	mov	r1, r6
 800daf4:	bf28      	it	cs
 800daf6:	463a      	movcs	r2, r7
 800daf8:	f7ff fed0 	bl	800d89c <memcpy>
 800dafc:	4631      	mov	r1, r6
 800dafe:	4640      	mov	r0, r8
 800db00:	f7ff fef4 	bl	800d8ec <_free_r>
 800db04:	e7e1      	b.n	800daca <_realloc_r+0x1e>
 800db06:	4635      	mov	r5, r6
 800db08:	e7df      	b.n	800daca <_realloc_r+0x1e>
	...

0800db0c <_sbrk_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	4d06      	ldr	r5, [pc, #24]	; (800db28 <_sbrk_r+0x1c>)
 800db10:	2300      	movs	r3, #0
 800db12:	4604      	mov	r4, r0
 800db14:	4608      	mov	r0, r1
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	f7f3 f90e 	bl	8000d38 <_sbrk>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_sbrk_r+0x1a>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_sbrk_r+0x1a>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	24001ec8 	.word	0x24001ec8

0800db2c <__malloc_lock>:
 800db2c:	4801      	ldr	r0, [pc, #4]	; (800db34 <__malloc_lock+0x8>)
 800db2e:	f000 b811 	b.w	800db54 <__retarget_lock_acquire_recursive>
 800db32:	bf00      	nop
 800db34:	24001ecc 	.word	0x24001ecc

0800db38 <__malloc_unlock>:
 800db38:	4801      	ldr	r0, [pc, #4]	; (800db40 <__malloc_unlock+0x8>)
 800db3a:	f000 b80c 	b.w	800db56 <__retarget_lock_release_recursive>
 800db3e:	bf00      	nop
 800db40:	24001ecc 	.word	0x24001ecc

0800db44 <_malloc_usable_size_r>:
 800db44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db48:	1f18      	subs	r0, r3, #4
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	bfbc      	itt	lt
 800db4e:	580b      	ldrlt	r3, [r1, r0]
 800db50:	18c0      	addlt	r0, r0, r3
 800db52:	4770      	bx	lr

0800db54 <__retarget_lock_acquire_recursive>:
 800db54:	4770      	bx	lr

0800db56 <__retarget_lock_release_recursive>:
 800db56:	4770      	bx	lr

0800db58 <_init>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	bf00      	nop
 800db5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5e:	bc08      	pop	{r3}
 800db60:	469e      	mov	lr, r3
 800db62:	4770      	bx	lr

0800db64 <_fini>:
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	bf00      	nop
 800db68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6a:	bc08      	pop	{r3}
 800db6c:	469e      	mov	lr, r3
 800db6e:	4770      	bx	lr
